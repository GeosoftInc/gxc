//*** extends 'class_empty.gxh'

#ifndef HSYS_GXH_DEFINED
#define HSYS_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class SYS
//
//-----------------------------------------------------------------------------------------------------------
//
// The SYS library functions perform a wide range functions,
// including the storage and retrieval of named parameters
// from the current workspace; writing messages to the user;
// display of progress bars; retrieving file, date and time
// information from the operating system; and providing warning
// and error handling functions.
//
//-----------------------------------------------------------------------------------------------------------
// Notes
//
// PARAMETER CONTROL FUNCTIONS
// 
// Parameters can be named with an index extension.
// For example, a parameter could be named as "PARM[1]".
// The index can be a positive number, or it can be a '*'.
// 
// If the index is a '*' in SetString_SYS, then the value string
// will be parsed into multiple values. Commas are assumed to be delimiters.
// 
// E.g.
// 
// ::
// 
//    "group1",
//    "multiparm[*]",
//    "value1,\"value,2\",\"value 3\",  value4  ,\"value 5 \""
// 
// 
// Will set:
// 
// ::
// 
//     multiparm[0] ="value1"
//     multiparm[1] ="value,2"
//     multiparm[2] ="value 3"
//     multiparm[3] ="value4"
//     multiparm[4] ="value 5"
// 
// To read a parameter, name the parameter with the index.  There is no
// looped-reading ability. For example using the following with GtString_SYS:
// 
// "group1","multiparm[3]",setting
// 
// will return:
// 
// setting = "value4"
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block

#define Prompt_SYS(A,B)					IiPrompt_SYS(A,B,sizeof(B))
#define Destroy_SYS(A)					Destr_SYS((HANDLE)(A))
#define iFindPathNameEx_SYS(A,B,C,D)	iFindPathEx_SYS(A,B,C,D,sizeof(D))
#define GetDotNetGXEntries_SYS(a,b)     IiGetDotNetGXEntries_SYS(a,b,sizeof(b))
#define iFindPathName_SYS(A,B,C)        iFindPath_SYS(A,B,C,sizeof(C))

//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// ARC_LICENSE Definitions
//
// ArcGIS platform types
//
// ARC_LICENSE_ENGINENOTPRESENT
// The Engine or any qualifying ArcGIS product is missing
//
// ARC_LICENSE_DESKTOPENGINE
// Desktop Engine
//
// ARC_LICENSE_ARCVIEW
// ArcView
//
// ARC_LICENSE_ARCEDITOR
// ArcEditor
//
// ARC_LICENSE_ARCINFO
// ArcInfo
//
// ARC_LICENSE_ARCSERVER
// ArcServer
//
//===========================================================================================================


#define ARC_LICENSE_ENGINENOTPRESENT 0
#define ARC_LICENSE_DESKTOPENGINE 1
#define ARC_LICENSE_ARCVIEW 2
#define ARC_LICENSE_ARCEDITOR 3
#define ARC_LICENSE_ARCINFO 4
#define ARC_LICENSE_ARCSERVER 5


//===========================================================================================================
//
// GEO_DIRECTORY Definitions
//
// Geosoft directory defines
//
// GEO_DIRECTORY_NONE
// None
//
// GEO_DIRECTORY_GEOSOFT
// Geosoft\
//
// GEO_DIRECTORY_BIN
// Geosoft\bin
//
// GEO_DIRECTORY_GER
// Geosoft\ger
//
// GEO_DIRECTORY_OMN
// Geosoft\omn
//
// GEO_DIRECTORY_TBL
// Geosoft\tbl
//
// GEO_DIRECTORY_FONTS
// Geosoft\fonts
//
// GEO_DIRECTORY_GX
// Geosoft\gx
//
// GEO_DIRECTORY_GS
// Geosoft\gs
//
// GEO_DIRECTORY_APPS
// Geosoft\apps
//
// GEO_DIRECTORY_ETC
// Geosoft\user\etc and then Geosoft\etc
//
// GEO_DIRECTORY_HLP
// Geosoft\hlp
//
// GEO_DIRECTORY_USER_CSV
// Geosoft\user\csv
//
// GEO_DIRECTORY_USER_LIC
// Geosoft\user\lic
//
// GEO_DIRECTORY_USER_INI
// Geosoft\user\ini
//
// GEO_DIRECTORY_USER_TEMP
// Geosoft\temp (or where the user put it)
//
// GEO_DIRECTORY_USER_ETC
// Geosoft\user\etc
//
// GEO_DIRECTORY_IMG
// Geosoft\img
//
// GEO_DIRECTORY_BAR
// Geosoft\bar
//
// GEO_DIRECTORY_MAPTEMPLATE
// Geosoft\maptemplate
//
// GEO_DIRECTORY_USER_MAPTEMPLATE
// Geosoft\user\maptemplate
//
// GEO_DIRECTORY_PYGX
// Geosoft\pygx
//
// GEO_DIRECTORY_USER_PYGX
// Geosoft\user\pygx
//
// GEO_DIRECTORY_USER_GX
// Geosoft\user\gx
//
//===========================================================================================================


#define GEO_DIRECTORY_NONE 0
#define GEO_DIRECTORY_GEOSOFT 1
#define GEO_DIRECTORY_BIN 2
#define GEO_DIRECTORY_GER 3
#define GEO_DIRECTORY_OMN 4
#define GEO_DIRECTORY_TBL 5
#define GEO_DIRECTORY_FONTS 6
#define GEO_DIRECTORY_GX 7
#define GEO_DIRECTORY_GS 8
#define GEO_DIRECTORY_APPS 9
#define GEO_DIRECTORY_ETC 10
#define GEO_DIRECTORY_HLP 11
#define GEO_DIRECTORY_USER_CSV 14
#define GEO_DIRECTORY_USER_LIC 15
#define GEO_DIRECTORY_USER_INI 16
#define GEO_DIRECTORY_USER_TEMP 17
#define GEO_DIRECTORY_USER_ETC 18
#define GEO_DIRECTORY_IMG 19
#define GEO_DIRECTORY_BAR 20
#define GEO_DIRECTORY_MAPTEMPLATE 22
#define GEO_DIRECTORY_USER_MAPTEMPLATE 23
#define GEO_DIRECTORY_PYGX 24
#define GEO_DIRECTORY_USER_PYGX 25
#define GEO_DIRECTORY_USER_GX 26


//===========================================================================================================
//
// REG_DOMAIN Definitions
//
// Registry key domains
//
// REG_DOMAIN_MACHINE
// Same as HKEY_LOCAL_MACHINE in Windows
//
// REG_DOMAIN_USER
// Same as HKEY_CURRENT_USER in Windows
//
//===========================================================================================================


#define REG_DOMAIN_MACHINE 0
#define REG_DOMAIN_USER 1


//===========================================================================================================
//
// SHELL_EXECUTE Definitions
//
// Shell execute defines
//
// SW_HIDE
// 
//
// SW_SHOWNORMAL
// 
//
// SW_SHOWMINIMIZED
// 
//
// SW_SHOWMAXIMIZED
// 
//
// SW_SHOWNOACTIVATE
// 
//
// SW_SHOW
// 
//
// SW_MINIMIZE
// 
//
// SW_SHOWMINNOACTIVE
// 
//
// SW_SHOWNA
// 
//
// SW_RESTORE
// 
//
// SW_SHOWDEFAULT
// 
//
// SW_FORCEMINIMIZE
// 
//
//===========================================================================================================


#define SW_HIDE 0
#define SW_SHOWNORMAL 1
#define SW_SHOWMINIMIZED 2
#define SW_SHOWMAXIMIZED 3
#define SW_SHOWNOACTIVATE 4
#define SW_SHOW 5
#define SW_MINIMIZE 6
#define SW_SHOWMINNOACTIVE 7
#define SW_SHOWNA 8
#define SW_RESTORE 9
#define SW_SHOWDEFAULT 10
#define SW_FORCEMINIMIZE 11


//===========================================================================================================
//
// SYS_DIR Definitions
//
// SYS Directory locations
//
// SYS_DIR_LOCAL
// Is the workspace working directory
//
// SYS_DIR_GEOSOFT
// Is the geosoft installation directory (read-only)
//
// SYS_DIR_USER
// is the geosoft installation directory that
// contains user read/write files.
//
// SYS_DIR_GEOTEMP
// Geosoft Temp folder
//
// SYS_DIR_WINDOWS
// Windows folder
//
// SYS_DIR_SYSTEM
// Windows SYSTEM folder
//
// SYS_DIR_LICENSE
// Where the license file is stored
//
// SYS_DIR_RESOURCEFILES
// User RESOURCEFILES Folder
//
// SYS_DIR_GEOSOFT_BAR
// BAR folder
//
// SYS_DIR_GEOSOFT_BIN
// BIN folder
//
// SYS_DIR_GEOSOFT_CSV
// CSV folder
//
// SYS_DIR_GEOSOFT_CSV_ALIASES
// CSV ALIASES folder
//
// SYS_DIR_GEOSOFT_DATA
// DATA folder
//
// SYS_DIR_GEOSOFT_DBG
// DBG folder
//
// SYS_DIR_GEOSOFT_ENCRYPTEDFILES
// Encrypted Files folder
//
// SYS_DIR_GEOSOFT_ETC
// ETC folder
//
// SYS_DIR_GEOSOFT_FONTS
// FONTS folder
//
// SYS_DIR_GEOSOFT_GER
// GER folder
//
// SYS_DIR_GEOSOFT_GS
// GS folder
//
// SYS_DIR_GEOSOFT_GX
// GX folder
//
// SYS_DIR_GEOSOFT_HLP
// HLP folder
//
// SYS_DIR_GEOSOFT_IMG
// IMG folder
//
// SYS_DIR_GEOSOFT_INI
// INI folder
//
// SYS_DIR_GEOSOFT_MAPTEMPLATE
// MAPTEMPLATE folder
//
// SYS_DIR_GEOSOFT_OMN
// OMN folder
//
// SYS_DIR_GEOSOFT_PAGE
// PAGE folder
//
// SYS_DIR_GEOSOFT_SCHEMA
// SCHEMA folder
//
// SYS_DIR_GEOSOFT_SPEC_INI
// SPEC INI older
//
// SYS_DIR_GEOSOFT_STYLESHEETS
// STYLE SHEETS folder
//
// SYS_DIR_GEOSOFT_TBL
// TBL folder
//
// SYS_DIR_GEOSOFT_PYTHON
// PYTHON folder
//
// SYS_DIR_USER_CSV
// User CSV Folder
//
// SYS_DIR_USER_ETC
// User ETC Folder
//
// SYS_DIR_USER_GS
// User GS Folder
//
// SYS_DIR_USER_HLP
// User HLP Folder
//
// SYS_DIR_USER_INI
// User INI Folder
//
// SYS_DIR_USER_LIC
// User LIC Folder
//
// SYS_DIR_USER_MAPTEMPLATE
// User MAPTEMPLATE Folder
//
// SYS_DIR_USER_OMN
// User OMN Folder
//
// SYS_DIR_USER_BAR
// User BAR Folder
//
// SYS_DIR_USER_IMG
// User IMG Folder
//
// SYS_DIR_USER_STACKS
// User STACKS Folder
//
// SYS_DIR_USER_TEMP
// User TEMP Folder
//
// SYS_DIR_USER_SERVICES
// User SERVICES Folder
//
// SYS_DIR_USER_STYLESHEETS
// User STYLESHEETS Folder
//
//===========================================================================================================


#define SYS_DIR_LOCAL 0
#define SYS_DIR_GEOSOFT 1
#define SYS_DIR_USER 2
#define SYS_DIR_GEOTEMP 3
#define SYS_DIR_WINDOWS 4
#define SYS_DIR_SYSTEM 5
#define SYS_DIR_LICENSE 6
#define SYS_DIR_RESOURCEFILES 7
#define SYS_DIR_GEOSOFT_BAR 100
#define SYS_DIR_GEOSOFT_BIN 101
#define SYS_DIR_GEOSOFT_CSV 102
#define SYS_DIR_GEOSOFT_CSV_ALIASES 103
#define SYS_DIR_GEOSOFT_DATA 104
#define SYS_DIR_GEOSOFT_DBG 105
#define SYS_DIR_GEOSOFT_ENCRYPTEDFILES 106
#define SYS_DIR_GEOSOFT_ETC 107
#define SYS_DIR_GEOSOFT_FONTS 108
#define SYS_DIR_GEOSOFT_GER 109
#define SYS_DIR_GEOSOFT_GS 110
#define SYS_DIR_GEOSOFT_GX 111
#define SYS_DIR_GEOSOFT_HLP 112
#define SYS_DIR_GEOSOFT_IMG 113
#define SYS_DIR_GEOSOFT_INI 114
#define SYS_DIR_GEOSOFT_MAPTEMPLATE 115
#define SYS_DIR_GEOSOFT_OMN 116
#define SYS_DIR_GEOSOFT_PAGE 117
#define SYS_DIR_GEOSOFT_SCHEMA 118
#define SYS_DIR_GEOSOFT_SPEC_INI 119
#define SYS_DIR_GEOSOFT_STYLESHEETS 120
#define SYS_DIR_GEOSOFT_TBL 121
#define SYS_DIR_GEOSOFT_PYTHON 127
#define SYS_DIR_USER_CSV 200
#define SYS_DIR_USER_ETC 201
#define SYS_DIR_USER_GS 202
#define SYS_DIR_USER_HLP 203
#define SYS_DIR_USER_INI 204
#define SYS_DIR_USER_LIC 205
#define SYS_DIR_USER_MAPTEMPLATE 206
#define SYS_DIR_USER_OMN 207
#define SYS_DIR_USER_BAR 214
#define SYS_DIR_USER_IMG 215
#define SYS_DIR_USER_STACKS 209
#define SYS_DIR_USER_TEMP 210
#define SYS_DIR_USER_SERVICES 211
#define SYS_DIR_USER_STYLESHEETS 212


//===========================================================================================================
//
// SYS_FONT Definitions
//
// Font types
//
// SYS_FONT_GFN
// Geosoft GFN fonts.
//
// SYS_FONT_TT
// Available TrueType fonts
//
//===========================================================================================================


#define SYS_FONT_GFN 1
#define SYS_FONT_TT 0


//===========================================================================================================
//
// SYS_INFO Definitions
//
// System information
//
// SYS_INFO_VERSION_MAJOR
// 
//
// SYS_INFO_VERSION_MINOR
// 
//
// SYS_INFO_VERSION_SP
// 
//
// SYS_INFO_BUILD_NUMBER
// 
//
// SYS_INFO_BUILD_LABEL
// 
//
// SYS_INFO_VERSION_LABEL
// 
//
// SYS_INFO_PRODUCTNAME
// 
//
// SYS_INFO_SERVERNAME
// 
//
// SYS_INFO_LEGALCOPYRIGHT
// 
//
// SYS_INFO_REGISTRY
// 
//
// SYS_INFO_REGISTRY_ENVIRONMENT
// 
//
// SYS_INFO_REGISTRY_SUPPORT
// 
//
// SYS_INFO_REGISTRY_INTERAPP
// 
//
// SYS_INFO_OIS_REGISTRY
// 
//
// SYS_INFO_TEST_REGISTRY
// 
//
//===========================================================================================================


#define SYS_INFO_VERSION_MAJOR 0
#define SYS_INFO_VERSION_MINOR 1
#define SYS_INFO_VERSION_SP 2
#define SYS_INFO_BUILD_NUMBER 3
#define SYS_INFO_BUILD_LABEL 4
#define SYS_INFO_VERSION_LABEL 5
#define SYS_INFO_PRODUCTNAME 6
#define SYS_INFO_SERVERNAME 7
#define SYS_INFO_LEGALCOPYRIGHT 8
#define SYS_INFO_REGISTRY 9
#define SYS_INFO_REGISTRY_ENVIRONMENT 10
#define SYS_INFO_REGISTRY_SUPPORT 11
#define SYS_INFO_REGISTRY_INTERAPP 12
#define SYS_INFO_OIS_REGISTRY 13
#define SYS_INFO_TEST_REGISTRY 14


//===========================================================================================================
//
// SYS_LINEAGE_SOURCE Definitions
//
// Type of lineage sources
//
// SYS_LINEAGE_SOURCE_MAP
// 
//
// SYS_LINEAGE_SOURCE_MXD
// 
//
// SYS_LINEAGE_SOURCE_DB
// 
//
// SYS_LINEAGE_SOURCE_MAPTEMPLATE
// 
//
// SYS_LINEAGE_SOURCE_GRID
// 
//
// SYS_LINEAGE_SOURCE_VOXEL
// 
//
//===========================================================================================================


#define SYS_LINEAGE_SOURCE_MAP 0
#define SYS_LINEAGE_SOURCE_MXD 1
#define SYS_LINEAGE_SOURCE_DB 2
#define SYS_LINEAGE_SOURCE_MAPTEMPLATE 3
#define SYS_LINEAGE_SOURCE_GRID 4
#define SYS_LINEAGE_SOURCE_VOXEL 5


//===========================================================================================================
//
// SYS_MENU_CLEAR Definitions
//
// Font types
//
// SYS_MENU_CLEAR_ALL
// Clear all menus excluding the coremenus.omn
// but including any default menus specified in the settings (these will not come back in this project).
//
// SYS_MENU_CLEAR_DEFAULT
// Clear all menus excluding the coremenus.omn
// but reload any default menus specified in the settings (essentially this is a refresh
// back to the default state again).
//
//===========================================================================================================


#define SYS_MENU_CLEAR_ALL 0
#define SYS_MENU_CLEAR_DEFAULT 1


//===========================================================================================================
//
// SYS_PATH Definitions
//
// Get specific Geosoft paths. The path name will
// have a directory separator at the end.
//
// SYS_PATH_LOCAL
// Is the workspace working directory
//
// SYS_PATH_GEOSOFT
// Is the geosoft installation directory (read-only)
//
// SYS_PATH_GEOSOFT_USER
// is the geosoft installation directory that
// contains user read/write files.
//
// SYS_PATH_GEOTEMP
// Geosoft Temp folder
//
// SYS_PATH_WINDOWS
// Windows folder
//
// SYS_PATH_SYSTEM
// System folder
//
// SYS_PATH_LICENSE
// Where the license file is stored
//
// SYS_PATH_RESOURCEFILES
// User RESOURCEFILES Folder
//
// SYS_PATH_GEOSOFT_BAR
// BAR folder
//
// SYS_PATH_GEOSOFT_BIN
// BIN folder
//
// SYS_PATH_GEOSOFT_CSV
// CSV folder
//
// SYS_PATH_GEOSOFT_CSV_ALIASES
// CSV ALIASES folder
//
// SYS_PATH_GEOSOFT_DATA
// DATA folder
//
// SYS_PATH_GEOSOFT_DBG
// DBG folder
//
// SYS_PATH_GEOSOFT_ENCRYPTEDFILES
// Encrypted Files folder
//
// SYS_PATH_GEOSOFT_ETC
// ETC folder
//
// SYS_PATH_GEOSOFT_FONTS
// FONTS folder
//
// SYS_PATH_GEOSOFT_GER
// GER folder
//
// SYS_PATH_GEOSOFT_GS
// GS folder
//
// SYS_PATH_GEOSOFT_PYGX
// PYGX folder
//
// SYS_PATH_GEOSOFT_GX
// GX folder
//
// SYS_PATH_GEOSOFT_HLP
// HLP folder
//
// SYS_PATH_GEOSOFT_IMG
// IMG folder
//
// SYS_PATH_GEOSOFT_INI
// INI folder
//
// SYS_PATH_GEOSOFT_MAPTEMPLATE
// MAPTEMPLATE folder
//
// SYS_PATH_GEOSOFT_OMN
// OMN folder
//
// SYS_PATH_GEOSOFT_PAGE
// PAGE folder
//
// SYS_PATH_GEOSOFT_SCHEMA
// SCHEMA folder
//
// SYS_PATH_GEOSOFT_SPEC_INI
// SPEC INI older
//
// SYS_PATH_GEOSOFT_STYLESHEETS
// STYLE SHEETS folder
//
// SYS_PATH_GEOSOFT_TBL
// TBL folder
//
// SYS_PATH_GEOSOFT_USER_CSV
// User CSV Folder
//
// SYS_PATH_GEOSOFT_USER_ETC
// User ETC Folder
//
// SYS_PATH_GEOSOFT_USER_GS
// User GS Folder
//
// SYS_PATH_GEOSOFT_USER_GX
// User GX Folder
//
// SYS_PATH_GEOSOFT_USER_PYGX
// User PYGX Folder
//
// SYS_PATH_GEOSOFT_USER_HLP
// User HLP Folder
//
// SYS_PATH_GEOSOFT_USER_INI
// User INI Folder
//
// SYS_PATH_GEOSOFT_USER_LIC
// User LIC Folder
//
// SYS_PATH_GEOSOFT_USER_MAPTEMPLATE
// User MAPTEMPLATE Folder
//
// SYS_PATH_GEOSOFT_USER_OMN
// User OMN Folder
//
// SYS_PATH_GEOSOFT_USER_STACKS
// User STACKS Folder
//
// SYS_PATH_GEOSOFT_USER_TEMP
// User TEMP Folder
//
// SYS_PATH_USER_SERVICES
// User SERVICES Folder
//
// SYS_PATH_USER_STYLESHEETS
// User STYLESHEETS Folder
//
//===========================================================================================================


#define SYS_PATH_LOCAL 0
#define SYS_PATH_GEOSOFT 1
#define SYS_PATH_GEOSOFT_USER 2
#define SYS_PATH_GEOTEMP 3
#define SYS_PATH_WINDOWS 4
#define SYS_PATH_SYSTEM 5
#define SYS_PATH_LICENSE 6
#define SYS_PATH_RESOURCEFILES 7
#define SYS_PATH_GEOSOFT_BAR 100
#define SYS_PATH_GEOSOFT_BIN 101
#define SYS_PATH_GEOSOFT_CSV 102
#define SYS_PATH_GEOSOFT_CSV_ALIASES 103
#define SYS_PATH_GEOSOFT_DATA 104
#define SYS_PATH_GEOSOFT_DBG 105
#define SYS_PATH_GEOSOFT_ENCRYPTEDFILES 106
#define SYS_PATH_GEOSOFT_ETC 107
#define SYS_PATH_GEOSOFT_FONTS 108
#define SYS_PATH_GEOSOFT_GER 109
#define SYS_PATH_GEOSOFT_GS 110
#define SYS_PATH_GEOSOFT_PYGX 126
#define SYS_PATH_GEOSOFT_GX 111
#define SYS_PATH_GEOSOFT_HLP 112
#define SYS_PATH_GEOSOFT_IMG 113
#define SYS_PATH_GEOSOFT_INI 114
#define SYS_PATH_GEOSOFT_MAPTEMPLATE 115
#define SYS_PATH_GEOSOFT_OMN 116
#define SYS_PATH_GEOSOFT_PAGE 117
#define SYS_PATH_GEOSOFT_SCHEMA 118
#define SYS_PATH_GEOSOFT_SPEC_INI 119
#define SYS_PATH_GEOSOFT_STYLESHEETS 120
#define SYS_PATH_GEOSOFT_TBL 121
#define SYS_PATH_GEOSOFT_USER_CSV 200
#define SYS_PATH_GEOSOFT_USER_ETC 201
#define SYS_PATH_GEOSOFT_USER_GS 202
#define SYS_PATH_GEOSOFT_USER_GX 217
#define SYS_PATH_GEOSOFT_USER_PYGX 216
#define SYS_PATH_GEOSOFT_USER_HLP 203
#define SYS_PATH_GEOSOFT_USER_INI 204
#define SYS_PATH_GEOSOFT_USER_LIC 205
#define SYS_PATH_GEOSOFT_USER_MAPTEMPLATE 206
#define SYS_PATH_GEOSOFT_USER_OMN 207
#define SYS_PATH_GEOSOFT_USER_STACKS 209
#define SYS_PATH_GEOSOFT_USER_TEMP 210
#define SYS_PATH_USER_SERVICES 211
#define SYS_PATH_USER_STYLESHEETS 212


//===========================================================================================================
//
// SYS_RUN_DISPLAY Definitions
//
// Windows Display Options
// Determine how applications are started.
// These options are not yet implemented.
//
// SYS_RUN_DISPLAY_WINDOW
// In a window  (default)
//
// SYS_RUN_DISPLAY_MINIMIZE
// Maximized
//
// SYS_RUN_DISPLAY_FULLSCREEN
// Full Screen
//
//===========================================================================================================


#define SYS_RUN_DISPLAY_WINDOW 0
#define SYS_RUN_DISPLAY_MINIMIZE 8
#define SYS_RUN_DISPLAY_FULLSCREEN 16


//===========================================================================================================
//
// SYS_RUN_HOLD Definitions
//
// DOS Console Options
// These options determine if and when the DOS/EXE
// console window is held. These options only work
// on DOS and EXE programs.
//
// SYS_RUN_HOLD_NEVER
// Don't wait (Default)
//
// SYS_RUN_HOLD_ONERROR
// Hold the screen if there is an error
//
// SYS_RUN_HOLD_ALWAYS
// Always hold the screen
//
//===========================================================================================================


#define SYS_RUN_HOLD_NEVER 0
#define SYS_RUN_HOLD_ONERROR 512
#define SYS_RUN_HOLD_ALWAYS 1024


//===========================================================================================================
//
// SYS_RUN_TYPE Definitions
//
// Type of application to run
//
// SYS_RUN_TYPE_DOS
// Things such as .BAT files, copy commands, etc. (A console window is created)
//
// SYS_RUN_TYPE_EXE
// Any program (.EXE) (a console window is created)
//
// SYS_RUN_TYPE_WINDOWS
// Windows applications that do not require a console window.
//
//===========================================================================================================


#define SYS_RUN_TYPE_DOS 1
#define SYS_RUN_TYPE_EXE 0
#define SYS_RUN_TYPE_WINDOWS 2


//===========================================================================================================
//
// SYS_RUN_WIN Definitions
//
// Windows Options
// Should we wait for the application to
// finish or should we continue executing. If you wait
// for another program, Oasis montaj will not
// redraw or respond. We always wait for EXE and DOS programs.
//
// SYS_RUN_WIN_NOWAIT
// Never wait (default)
//
// SYS_RUN_WIN_WAIT
// Always wait
//
//===========================================================================================================


#define SYS_RUN_WIN_NOWAIT 0
#define SYS_RUN_WIN_WAIT 2048


//===========================================================================================================
//
// SYS_SEARCH_PATH Definitions
//
// Find File define
//
// FIND_LOCAL_GEOSOFT
// Local and then Geosoft directory
//
// FIND_GEOSOFT
// Geosoft directory
//
// FIND_LOCAL
// Local directory
//
// FIND_SHORT
// Make the name short (FLAG that is added on)
//
//===========================================================================================================


#define FIND_LOCAL_GEOSOFT 0
#define FIND_GEOSOFT 1
#define FIND_LOCAL 2
#define FIND_SHORT 1024


//===========================================================================================================
//
// SYS_ENCRYPTION_KEY Definitions
//
// How to encrypt a string. Determines the portability of the encrypted string.
//
// SYS_ENCRYPTION_KEY_GEOSOFT_ID
// Encrypt string to currently signed-in user. The string can be decrypted
// by the same user on any machine.
//
// SYS_ENCRYPTION_KEY_GLOBAL_ID
// Encrypt string to current machine. The string can be decrypted by any
// user on the same machine.
//
//===========================================================================================================


#define SYS_ENCRYPTION_KEY_GEOSOFT_ID 0
#define SYS_ENCRYPTION_KEY_GLOBAL_ID 1


//===========================================================================================================
//
// TD_ICON Definitions
//
// TaskDialog Icon
//
// TD_ICON_NONE
// No icon.
//
// TD_ICON_WARNING
// An exclamation-point icon appears in the task dialog.
//
// TD_ICON_ERROR
// A stop-sign icon appears in the task dialog.
//
// TD_ICON_INFORMATION
// An icon consisting of a lowercase letter i in a circle appears in the task dialog.
//
// TD_ICON_SUCCESS
// A shield icon appears in the task dialog.
//
// TD_ICON_CONFIRMATION
// A shield icon appears in the task dialog.
//
//===========================================================================================================


#define TD_ICON_NONE 0
#define TD_ICON_WARNING 1
#define TD_ICON_ERROR 2
#define TD_ICON_INFORMATION 3
#define TD_ICON_SUCCESS 4
#define TD_ICON_CONFIRMATION 5


//===========================================================================================================
//
// TD_BUTTON Definitions
//
// TaskDialog Common Buttons
//
// TD_BUTTON_NONE
// No common buttons.
//
// TD_BUTTON_OK
// Button results in TD_ID_OK return value.
//
// TD_BUTTON_YES
// Button results in TD_ID_YES return value.
//
// TD_BUTTON_NO
// Button results in TD_ID_NO return value.
//
// TD_BUTTON_CANCEL
// Button results in TD_ID_CANCEL return value.
//
// TD_BUTTON_RETRY
// Button results in TD_ID_RETRY return value.
//
// TD_BUTTON_CLOSE
// Button results in TD_ID_CLOSE return value.
//
//===========================================================================================================


#define TD_BUTTON_NONE 0
#define TD_BUTTON_OK 1
#define TD_BUTTON_YES 2
#define TD_BUTTON_NO 4
#define TD_BUTTON_CANCEL 8
#define TD_BUTTON_RETRY 16
#define TD_BUTTON_CLOSE 32


//===========================================================================================================
//
// TD_ID Definitions
//
// TaskDialog Common Button Return Values
//
// TD_ID_OK
// TD_BUTTON_OK pressed.
//
// TD_ID_CANCEL
// TD_BUTTON_CANCEL pressed.
//
// TD_ID_RETRY
// TD_BUTTON_RETRY pressed.
//
// TD_ID_YES
// TD_BUTTON_YES pressed.
//
// TD_ID_NO
// TD_BUTTON_NO pressed.
//
// TD_ID_CLOSE
// TD_BUTTON_CLOSE pressed.
//
//===========================================================================================================


#define TD_ID_OK 1
#define TD_ID_CANCEL 2
#define TD_ID_RETRY 4
#define TD_ID_YES 6
#define TD_ID_NO 7
#define TD_ID_CLOSE 8





//===========================================================================================================
//
// Date/Time Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// BreakDate_SYS Breaks a decimal date value into year, month and day.
//
// Available     5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void BreakDate_SYS(real,      // Date value to break
                             var int,   // Year
                             var int,   // Month (0-11)
                             var int);  // Day   (0-30)


  
//-----------------------------------------------------------------------------------------------------------
// iDatetoLong_SYS Converts a double date to a value representing total
//                 days elapsed since day 0 of year 0. This uses the
//                 Numerical Receipies Julian function.
//
// Returns         x - Days
//
// Available       6.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iDatetoLong_SYS(real);  // Date


  
//-----------------------------------------------------------------------------------------------------------
// iTimetoLong_SYS Converts decimal hours to seconds in a day.
//
// Returns         x - Seconds (integer)
//
// Available       6.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iTimetoLong_SYS(real);  // Time


  
//-----------------------------------------------------------------------------------------------------------
// rDate_SYS Returns the current date in decimal years.
//
// Returns   Date in decimal years.
//
// Notes     The FormatDate_STR function can be used to convert a date to
//           a string.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rDate_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// rLongtoDate_SYS Converts a value representing total days elapsed since
//                 day 0 of year 0 to a geosoft date. This uses the
//                 Numerical Receipies Julian function.
//
// Returns         x - Date
//
// Available       6.3
//-----------------------------------------------------------------------------------------------------------

[_public] real rLongtoDate_SYS(int);  // Day


  
//-----------------------------------------------------------------------------------------------------------
// rLongtoTime_SYS Converts seconds to decimal hours.
//
// Returns         x - Time
//
// Available       6.3
//-----------------------------------------------------------------------------------------------------------

[_public] real rLongtoTime_SYS(int);  // Seconds


  
//-----------------------------------------------------------------------------------------------------------
// rMakeDate_SYS Returns the decimal date given the year, month and day.
//
// Returns       Date in decimal years.
//
// Available     5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] real rMakeDate_SYS(int,   // Year
                             int,   // Month (0-11)
                             int);  // Day   (0-30)


  
//-----------------------------------------------------------------------------------------------------------
// rSecondstoTime_SYS Converts fractional seconds to decimal hours.
//
// Returns            x - Time
//
// Available          6.3
//-----------------------------------------------------------------------------------------------------------

[_public] real rSecondstoTime_SYS(real);  // Seconds


  
//-----------------------------------------------------------------------------------------------------------
// rTime_SYS Returns the current time in decimal hours.
//
// Returns   Time in decimal hours.
//
// Notes     The FormatTime_STR function can be used to convert a time to
//           a string.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rTime_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// rTimetoSeconds_SYS Converts decimal hours to seconds in a day fractional
//
// Returns            x - Number of seconds with fractions
//
// Available          6.3
//-----------------------------------------------------------------------------------------------------------

[_public] real rTimetoSeconds_SYS(real);  // Time


  
//-----------------------------------------------------------------------------------------------------------
// rUTCDate_SYS Returns the current UTC date in decimal years.
//
// Returns      Date in decimal years.
//
// Notes        The FormatDate_STR function can be used to convert a date to
//              a string.
//
// Available    7.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rUTCDate_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// rUTCTime_SYS Returns the current UTC time in decimal hours.
//
// Returns      Time in decimal hours.
//
// Notes        The FormatTime_STR function can be used to convert a time to
//              a string.
//
// Available    7.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rUTCTime_SYS();



//===========================================================================================================
//
// Environment Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// iExistEnv_SYS Check if setting exists in environment.
//
// Returns       1 - Yes
//               0 - No
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iExistEnv_SYS(string);  // Setting


  
//-----------------------------------------------------------------------------------------------------------
// IGetEnv_SYS Get an environment setting.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetEnv_SYS(string,       // Setting
                           var string,   // Value string
                           int);         // Sizeof string
#define GetEnv_SYS(parm, set) IGetEnv_SYS(parm, set, sizeof(set))


  
//-----------------------------------------------------------------------------------------------------------
// SetEnv_SYS Set an environment setting.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetEnv_SYS(string,   // Setting
                          string);  // Value



//===========================================================================================================
//
// Error Handling Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// iClearErrAP_SYS This method is called at to clear all registered errors.
//
// Returns         0 - Successful
//
// Available       5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iClearErrAP_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// iGetTopErrorAP_SYS Get the error number of the last registered error.
//
// Returns            The top error number registered, 0 if none registered.
//
// Available          8.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetTopErrorAP_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// iGetErrorAP_SYS Get the error number of an error.
//
// Returns         The error number registered, 0 if none registered.
//
// Available       9.6
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetErrorAP_SYS(int);  // The error index (0 to N-1, where N=number of registered errors)


  
//-----------------------------------------------------------------------------------------------------------
// IGetErrorMessageAP_SYS Return the error message text as a string.
//
// Notes                  This wrapper is mostly for use outside of GXs,
//                        because in general if an error is registered in a GX
//                        the GX would terminate before it could be called.
//                        Use iNumErrorsAP_SYS to get the number of registered errors.
//
// Available              6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetErrorMessageAP_SYS(int,          // The error index (0 to N-1, where N=number of registered errors)
                                      var string,   // Buffer to return message in
                                      int);         // Length of buffer
#define GetErrorMessageAP_SYS(err, err_str) IGetErrorMessageAP_SYS(err, err_str, sizeof(err_str))


  
//-----------------------------------------------------------------------------------------------------------
// iNumErrorsAP_SYS Returns the number of registered errors.
//
// Returns          The number of registered errors.
//
// Notes            This wrapper is mostly for use outside of GXs,
//                  because in general if an error is registered in a GX
//                  the GX would terminate before it could be called.
//
// See also         GetErrorMessageAP_SYS
//
// Available        6.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iNumErrorsAP_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// SetServerMessagesAP_SYS Control the server message handling.
//
// Notes                   Should be set to false when dialogs should not
//                         appear. This setting is thread specific.
//
// Available               6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetServerMessagesAP_SYS(int);  // 1 - Display messages, 0 - messages reported as errors



//===========================================================================================================
//
// Execution Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// iRun_SYS Run a command line process.
//
// Returns  -1 if failed to execute task
//          Exit status of the task
//
// Notes    The Default option for each define below is the first one
//          and is set to 0.
//          
//          We look for the command object in the following order:
//          
//          1. the local working directory
//          2. the <geosoft>\bin directory
//          3. the system path
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iRun_SYS(string,   // Command name
                       string,   // Command line arguments
                       int);     // Flags SYS_RUN_TYPE SYS_RUN_DISPLAY SYS_RUN_HOLD SYS_RUN_WIN


  
//-----------------------------------------------------------------------------------------------------------
// iRunGS_SYS Run a GS.
//
// Returns    Exit status of the GS
//            -1 cancelled
//            0 success
//            1 ended with an error.
//
// See also   SetInteractive_SYS, iRunGX_SYS
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iRunGS_SYS(string);  // Name of GS to run.


  
//-----------------------------------------------------------------------------------------------------------
// iRunGX_SYS Run a GX.
//
// Returns    Exit status of the GX:
//            -1 cancelled
//            0 success
//            1 ended with an error.
//
// Notes      If the called GX returns an error, they will not be
//            displayed until the "top" calling GX terminates, unless you
//            call ShowError_SYS.
//
// See also   iRunGXEx_SYS, SetInteractive_SYS and iRunGS_SYS
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iRunGX_SYS(string);  // Name of GX to run.


  
//-----------------------------------------------------------------------------------------------------------
// iRunPython_SYS Run a Python GX script with initialization information.
//
// Returns        Return value of the GX set by SetReturn_SYS (0 by default). Terminates on error or cancel.
//
// See also       SetReturn_SYS
//
// Available      9.9
//-----------------------------------------------------------------------------------------------------------

[_public] int iRunPython_SYS(string,   // Name of Python GX to run.
                             string);  // Initialization information (usually JSON). Available withon Python script as a global variable named gx_init_info.


  
//-----------------------------------------------------------------------------------------------------------
// iRunGXEx_SYS Run a GX.
//
// Returns      Exit status of the GX:
//              -1 cancelled
//              0 success
//              1 ended with an error.
//
// See also     iRunGX_SYS, SetReturn_SYS
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iRunGXEx_SYS(string,    // Name of GX to run.
                           var int);  // Return value set in the child GX (0 by default)


  
//-----------------------------------------------------------------------------------------------------------
// iRunPDF_SYS Run a PDF.
//
// Returns     Exit status of the task, 0 usually means success.
//
// Notes       The group name of the PDF variables will be "group_pdf",
//             where "group" is the name given in the first argument,
//             and "pdf" is the root PDF file name.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed_app] int iRunPDF_SYS(string,   // Group name, can be "".
                                string);  // PDF name    (.pdf assumed)


  
//-----------------------------------------------------------------------------------------------------------
// iShellExecute_SYS Call Microsoft ShellExecute function (See `MSDN <https://msdn.microsoft.com/en-us/library/windows/desktop/bb762153(v=vs.85).aspx>`_)
//
// Returns           return value of ShellExecute as documented on MSDN
//
// See also          DoCommand_SYS
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iShellExecute_SYS(string,   // Verb
                                string,   // File
                                string,   // Parameters
                                string,   // Directory
                                int);     // SHELL_EXECUTE


  
//-----------------------------------------------------------------------------------------------------------
// SetReturn_SYS Set the return value of a GX.
//
// Notes         This value is returned in the iRunGXEx_SYS call only.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetReturn_SYS(int);  // Return Value



//===========================================================================================================
//
// External DLL Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// DoCommand_SYS Execute an Oasis montaj command.
//
// Notes         Commands syntax:  "[type] command"
//               
//               =======  ============================================================================================
//               type     command
//               =======  ============================================================================================
//               ID       Internal Menu Command (as found in omn and geobar files e.g. *ID_EDIT_SELECT)
//               -------  --------------------------------------------------------------------------------------------
//               GX       gx file name
//               -------  --------------------------------------------------------------------------------------------
//               GS       gs file name
//               -------  --------------------------------------------------------------------------------------------
//               DOTNET   dll file name 
//                        Use qualifiers to specify class and method e.g.:
//                        "[DOTNET] geogxnet.dll(Geosoft.GX.NewGDB.NewGDB;Run)"
//               -------  --------------------------------------------------------------------------------------------
//               PDF      Geosoft pdf file name (Not Adobe PDF document, a legacy Geosoft Sushi script)
//               -------  --------------------------------------------------------------------------------------------
//               DOS      DOS style command
//               -------  --------------------------------------------------------------------------------------------
//               HLP      help file name
//               =======  ============================================================================================
//               
//               The must be ONE space between the "]" and the command.  For example:
//               
//               "[ID] ID_EDIT_SELECT"  // bring up the line edit tool
//
// See also      iShellExecute_SYS
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void DoCommand_SYS(string);  // Command


  
//-----------------------------------------------------------------------------------------------------------
// Error_SYS Register an error message
//
// Notes     Use this function to register your own error
//           messages when an error occurs in your code.  Your
//           errors can be provided in your own GER file.  See
//           GEOSOFT.GER for an example of the GER file format.
//           
//           If the error # is not found in your error file, the
//           OE32.GER file, then the GEOSOFT.GER file will be
//           searched.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Error_SYS(string,   // Your error file name, "" if none.
                         string,   // Module name in which error occurred.
                         int);     // Error number


  
//-----------------------------------------------------------------------------------------------------------
// ErrorTag_SYS Set an error message tag string
//
// Notes        Use this method to replace tag strings in your error
//              message text with run-time information.  For example,
//              Geosoft error messages often use the tag strings "%1",
//              "%2", etc. as place holders to be replaced by a string
//              which is only known at run-time.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ErrorTag_SYS(string,   // Tag string, ie "%1".
                            string);  // String to replace the tag.


  
//-----------------------------------------------------------------------------------------------------------
// iAssertGX_SYS DLL function argument error assertion
//
// Returns       0 assertion passed
//               1 assertion failed
//
// Notes         Use this function to evaluate errors in passed
//               function arguments.  Functions called by GX programs
//               should be tolerant of all errors in the passed argument
//               list.  The iAssertGX_SYS can be used to test each
//               argument before doing any work in the function.  If
//               an assertion fails, an error will be registered with
//               the name of the function and the parameter name and
//               a 1 will be returned.  The caller should immediatley
//               cleaning up (if necessary) and return.
//               
//               You could also test the validity of arguments and call
//               the Error_SYS, ErrorTag_SYS and Terminate_SYS
//               functions if you would like to provide a more specific
//               error message.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iAssertGX_SYS(int,      // Boolean expression (ie. (dB != 0.0) )
                            string,   // Module name
                            string);  // Argument name


  
//-----------------------------------------------------------------------------------------------------------
// iOLEAutomation_SYS Call OLE Automation designed to be called from Montaj.
//
// Returns            Return from automation engine.
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iOLEAutomation_SYS(string,   // Object Name
                                     string,   // Info String
                                     int);     // Info Int


  
//-----------------------------------------------------------------------------------------------------------
// SaveLog_SYS Saves the main log file to another file.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SaveLog_SYS(string);  // Output file name


  
//-----------------------------------------------------------------------------------------------------------
// ShowError_SYS Display any errors to the user.
//
// Notes         If you call a GX from another GX using iRunGX_SYS, and
//               the called GX registers errors, they will not be displayed
//               until after the "top" GX exits.
//               If you wish to continue without exiting, call this function
//               so that errors are displayed immediately to the user. For
//               instance, when creating a new map from inside another GX:
//               
//               --- Run NEWMAP wizard. Keep trying if something is wrong (like a
//               too-small map scale), but exit if the user cancels (iRet==-1) ---
//               
//               do {
//               iRet = iRunGX_SYS("newmap.gx");
//               if(iRet==1) ShowError_SYS();     // Dump errors.
//               } while(iRet==1);
//               
//               This wrapper is not intended for use outside a GX, because it
//               uses the GX run-time machinery to display the error messages.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void ShowError_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// Terminate_SYS DLL error termination
//
// Notes         Call this function immediately before returning to
//               the caller after an error has occurred inside the
//               DLL.  If an error has occurred, you should clean-up
//               (free memory, close files), call Error_SYS to register
//               your own error messages, call ErrorTag_SYS to set any
//               error message tags, call Terminate_SYS and return.
//               
//               Geosoft functions that detect an error will have
//               already registered their own errors and called
//               Terminate_SYS.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Terminate_SYS(string);  // Module name



//===========================================================================================================
//
// File System Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// CRCFile_SYS Compute the CRC of a file
//
// Returns     CRC Value
//
// Available   6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] CRC CRCFile_SYS(string);  // File Name


  
//-----------------------------------------------------------------------------------------------------------
// CRCFileOffset_SYS Compute the CRC of a file with an Offset
//
// Returns           CRC Value
//
// Available         6.4
//-----------------------------------------------------------------------------------------------------------

[_public] CRC CRCFileOffset_SYS(string,   // File Name
                                int);     // Offset in the file (0 for start)


  
//-----------------------------------------------------------------------------------------------------------
// FileRen_SYS Rename a file
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void FileRen_SYS(string,   // Old file name
                           string);  // New file name


  
//-----------------------------------------------------------------------------------------------------------
// FindFilesVV_SYS Fill a VV with files matching an input file mask.
//
// Notes           Fill a VV with files matching the input file mask.
//                 The VV should be of string type.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void FindFilesVV_SYS(VV,       // VV object
                               string);  // File mask to match


  
//-----------------------------------------------------------------------------------------------------------
// IAbsoluteFileName_SYS Convert an abbreviated path name to a full path name.
//
// Notes                 This is mainly intended to convert ".\name" to a full
//                       name at run-time.
//
// Available             5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IAbsoluteFileName_SYS(string,       // Input file name to resolve
                                     var string,   // Output name, can be the same as input
                                     int);         // Size of output name
#define AbsoluteFileName_SYS(abbr, name) IAbsoluteFileName_SYS(abbr, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// iCopyFile_SYS Copy a file.
//
// Returns       0 if file copied ok.
//               1 if unable to copy file or source file not found.
//
// Available     5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] int iCopyFile_SYS(string,   // Source file
                            string);  // Destination file


  
//-----------------------------------------------------------------------------------------------------------
// iDeleteFile_SYS Delete a file.
//
// Returns         0 if file deleted.
//                 1 if unable to find file or delete file.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iDeleteFile_SYS(string);  // Name of file to delete


  
//-----------------------------------------------------------------------------------------------------------
// iDeleteGIFile_SYS Delete the GI file associated with a grid.
//
// Returns           0 if file deleted.
//                   1 if file is not found, or found but could not be deleted.
//                   
//                   This is a "one-line" function to take a grid file name,
//                   remove the qualifiers, add the ".gi" and delete the file.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iDeleteGIFile_SYS(string);  // Name of grid file to delete


  
//-----------------------------------------------------------------------------------------------------------
// iDeleteGridFile_SYS Delete a grid file and its associated GI and XML files.
//
// Returns             0 if grid file deleted.
//                     1 if grid file not found or if one or more files is found but could not be deleted.
//
// Notes               Deletes the grid file first, and, if they exist, the associated GI
//                     and XML files.
//                     No error is registered if a file is not found or cannot be deleted.
//
// Available           7.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iDeleteGridFile_SYS(string);  // Name of grid file to delete


  
//-----------------------------------------------------------------------------------------------------------
// DeleteDirectory_SYS Delete a directory and all files/subdirectories contained therein.
//
// Available           2023.2
//-----------------------------------------------------------------------------------------------------------

[_public] void DeleteDirectory_SYS(string);  // Name of directory to delete


  
//-----------------------------------------------------------------------------------------------------------
// iDirExist_SYS Check to see if a directory exists
//
// Returns       0 - Directory doesn't exist
//               1 - Directory exists
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iDirExist_SYS(string);  // Name of directory to check


  
//-----------------------------------------------------------------------------------------------------------
// iFileExist_SYS Check to see if a file exists
//
// Returns        0 - File doesn't exist
//                1 - File exists
//
// Notes          Use the FULL path for the file name. If the full
//                path is not specified, then the current working
//                directory is used for the path.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iFileExist_SYS(string);  // Name of file to check


  
//-----------------------------------------------------------------------------------------------------------
// iFileSize_SYS Returns size of a file.
//
// Returns       0 none/error
//               x Size
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iFileSize_SYS(string);  // Name of file


  
//-----------------------------------------------------------------------------------------------------------
// iFileWritable_SYS Check if a file can be created or opened in read-write mode
//                   at a specific location
//
// Available         6.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iFileWritable_SYS(string);  // File path name to check


  
//-----------------------------------------------------------------------------------------------------------
// iFindPath_SYS Get full path for a file with Geosoft subdirectory parameter.
//
// Returns       0 if file found.
//               1 if file not found.
//
// Notes         Directories can be resolved from the Environment section of the
//               Geosoft registry, or from system environment variables that are
//               not defined in the Geosoft Environment registry.  The following
//               file prefixes will be replaced by the environment settings:
//               
//               <geosoft>      the main Geosoft installation directory
//               <geosoft2>     the secondary Geosoft installation directory
//               <geotemp>      the Geosoft temporary file directory
//               <windows>      the operating system Windows directory
//               <system>       the operating system system directory
//               <other>        other environment variables
//
// Available     6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iFindPath_SYS(string,       // File to get path name for
                            int,          // SYS_SEARCH_PATH
                            var string,   // Buffer to place path name into
                            int);         // Size of Buffer
#define _iFindPath_SYS(file, mode, fullname) iFindPath_SYS(file, mode, fullname, sizeof(fullname))


  
//-----------------------------------------------------------------------------------------------------------
// iFindPathEx_SYS Get full path for a file.
//
// Returns         0 if file found.
//                 1 if file not found.
//
// Notes           Directories can be resolved from the Environment section of the
//                 Geosoft registry, or from system environment variables that are
//                 not defined in the Geosoft Environment registry.  The following
//                 file prefixes will be replaced by the environment settings:
//                 
//                 <geosoft>      the main Geosoft installation directory
//                 <geosoft2>     the secondary Geosoft installation directory
//                 <geotemp>      the Geosoft temporary file directory
//                 <windows>      the operating system Windows directory
//                 <system>       the operating system system directory
//                 <other>        other environment variable
//
// Available       6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iFindPathEx_SYS(string,       // File to get path name for
                              int,          // SYS_SEARCH_PATH
                              int,          // GEO_DIRECTORY
                              var string,   // Buffer to place path name into
                              int);         // Size of Buffer
#define _iFindPathEx_SYS(file, mode, dir_mode, fullname) iFindPathEx_SYS(file, mode, dir_mode, fullname, sizeof(fullname))


  
//-----------------------------------------------------------------------------------------------------------
// IGetDirectory_SYS Get a directory path
//
// Notes             The path will always end with the file separator character
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetDirectory_SYS(int,          // SYS_DIR
                                 var string,   // Returned directory path string
                                 int);         // Size of the string
#define GetDirectory_SYS(sys_dir, dir) IGetDirectory_SYS(sys_dir, dir, sizeof(dir))


  
//-----------------------------------------------------------------------------------------------------------
// IGetPath_SYS Get a Geosoft path
//
// Notes        The path name will have a directory separator at the end.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetPath_SYS(int,          // SYS_PATH
                            var string,   // String in which to place path
                            int);         // Maximum string size
#define GetPath_SYS(type, path) IGetPath_SYS(type, path, sizeof(path))


  
//-----------------------------------------------------------------------------------------------------------
// IGetWindowsDir_SYS Get the Windows directory path
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetWindowsDir_SYS(var string,   // Buff for directory path string
                                  int);         // Size of the buff
#define GetWindowsDir_SYS(dir) IGetWindowsDir_SYS(dir, sizeof(dir))


  
//-----------------------------------------------------------------------------------------------------------
// iMakeDir_SYS Create a directory.
//
// Returns      0 - Directory made
//              1 - Directory cannot be made
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iMakeDir_SYS(string);  // Name of directory


  
//-----------------------------------------------------------------------------------------------------------
// iMakeFileReadonly_SYS Set a file's read-only attribute.
//
// Returns               0 if read-only attribute successfully set,
//                       1 if attribute change fails.
//
// Available             6.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iMakeFileReadonly_SYS(string);  // Name of file


  
//-----------------------------------------------------------------------------------------------------------
// iMakeFileWritable_SYS Removes a file's read-only attribute.
//
// Returns               0 if read-only attribute successfully removed,
//                       1 if attribute change fails.
//
// Available             6.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iMakeFileWritable_SYS(string);  // Name of file


  
//-----------------------------------------------------------------------------------------------------------
// IRelativeFileName_SYS Convert a file name to a relative abbreviated path name
//
// Notes                 This will produce relative paths based on the workspace
//                       directory into ".\name".
//
// Available             6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] void IRelativeFileName_SYS(string,       // Input file name to resolve
                                     var string,   // Output name, can be the same as input
                                     int);         // Size of output name
#define RelativeFileName_SYS(abbr, name) IRelativeFileName_SYS(abbr, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// IShortPathFileName_SYS Obtains the short path form of a specified input path.
//
// Available              5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IShortPathFileName_SYS(string,       // Input file name to resolve
                                      var string,   // Output name, can be the same as input
                                      int);         // Size of output name
#define ShortPathFileName_SYS(in_name, name) IShortPathFileName_SYS(in_name, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// ITempFileExt_SYS Generate a unique file name for this extension in the temp directory.
//
// Notes            This is useful for created a unique tempory name for a file in the Geosoft temporary directory.
//
// Available        5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] void ITempFileExt_SYS(string,       // Input extension (without .)
                                var string,   // Output name
                                int);         // Size of output name
#define TempFileExt_SYS(ext, out) ITempFileExt_SYS(ext, out, sizeof(out))


  
//-----------------------------------------------------------------------------------------------------------
// ITempFileName_SYS Generate a file name for this file in the temp directory.
//
// Notes             This is useful for created a unique tempory name for a file in the Geosoft temporary directory.
//                   
//                   From version 7.0 The file extension will match the input file, but the
//                   filename itself will be a process and thread unique value to ensure that
//                   clashes does not happen.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ITempFileName_SYS(string,       // Input file name to resolve (path is removed)
                                 var string,   // Output name, can be the same as input
                                 int);         // Size of output name
#define TempFileName_SYS(path_file, out_filename) ITempFileName_SYS(path_file, out_filename, sizeof(out_filename))


  
//-----------------------------------------------------------------------------------------------------------
// ITransferPath_SYS Transfers file path to new file name.
//
// Notes             The path and volume of from the input string is added to
//                   file name from the output string.
//
// Available         5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] void ITransferPath_SYS(string,       // Input file path/name
                                 var string,   // Output file name with path transfered
                                 int);         // Maximum length of output string
#define TransferPath_SYS(path_file, file) ITransferPath_SYS(path_file, file, sizeof(file))


  
//-----------------------------------------------------------------------------------------------------------
// iValidFileName_SYS Check to see if a file name valid
//
// Returns            0 - File name is not valid
//                    1 - File name is valid
//
// Notes              Use the FULL path for the file name. If the full
//                    path is not specified, then the current working
//                    directory is used for the path.
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iValidFileName_SYS(string);  // Name of file to check


  
//-----------------------------------------------------------------------------------------------------------
// iWriteInDir_SYS Can I create files in this directory ?
//
// Returns         0 - Directory doesn't allow write of does not exist
//                 1 - Directory allows writes
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iWriteInDir_SYS(string);  // Name of directory to check


  
//-----------------------------------------------------------------------------------------------------------
// rFileDate_SYS File creation date in decimal years.
//
// Returns       Date in decimal years, rDUMMY if the file does not exist.
//
// Notes         The FormatDate_STR function can be used to convert a date
//               to a string.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rFileDate_SYS(string);  // File name


  
//-----------------------------------------------------------------------------------------------------------
// rFileTime_SYS File creation time in decimal hours.
//
// Returns       Date in decimal hours, rDUMMY if the file does not exist.
//
// Notes         The FormatTime_STR function can be used to convert a time
//               to a string.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rFileTime_SYS(string);  // File name


  
//-----------------------------------------------------------------------------------------------------------
// rUTCFileDate_SYS File creation UTC date in decimal years.
//
// Returns          Date in decimal years, rDUMMY if the file does not exist.
//
// Notes            The FormatDate_STR function can be used to convert a date
//                  to a string.
//
// Available        7.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rUTCFileDate_SYS(string);  // File name


  
//-----------------------------------------------------------------------------------------------------------
// rUTCFileTime_SYS File creation UTC time in decimal hours.
//
// Returns          Date in decimal hours, rDUMMY if the file does not exist.
//
// Notes            The FormatTime_STR function can be used to convert a time
//                  to a string.
//
// Available        7.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rUTCFileTime_SYS(string);  // File name



//===========================================================================================================
//
// Global Parameter Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// GetSettingsMETA_SYS Get the settings metadata object.
//
// Available           6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetSettingsMETA_SYS(META);  // META object to store the settings metadata in


  
//-----------------------------------------------------------------------------------------------------------
// GlobalReset_SYS Reset the global parameters.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GlobalReset_SYS(string);  // New INI file name, if "", use default.


  
//-----------------------------------------------------------------------------------------------------------
// GlobalSet_SYS Set a global parameter setting.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GlobalSet_SYS(string,   // Name of the Parameter
                             string);  // Setting


  
//-----------------------------------------------------------------------------------------------------------
// GlobalWrite_SYS Modify the global parameters.
//
// Notes           If the global parameters have been changed, use
//                 this function to make the changes permanent,
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GlobalWrite_SYS(string);  // Global INI file, if "" use default.


  
//-----------------------------------------------------------------------------------------------------------
// IiGlobal_SYS Get a global parameter setting.
//
// Returns      0 if parameter found.
//              1 if parameter not found or not set.
//
// Notes        The returned string will be empty if the parameter is
//              not found.
//              
//              Parameters are derived from GEOSOFT.INI.
//              This is a standard Windows style INI
//              file that contains [GROUPS], PARAMETERS and SETTINGS
//              as follows
//              
//              [GROUP1]
//              PARAM1=setting1
//              PARAM2 setting2
//              PARAM3 "setting3 is text"
//              
//              To retrieve an entry, specify the group.parameter.  For
//              example, iGlobal_SYS("GROUP1.PARAM3",sSetting) will
//              retrieve the string "setting is text".  The double
//              quotes will not appear in the setting.
//
// Available    6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] int IiGlobal_SYS(string,       // Name of the Parameter
                           var string,   // Setting returned
                           int);         // Size of the buffer
#define iGlobal_SYS(parm, setting) IiGlobal_SYS(parm, setting, sizeof(setting))


  
//-----------------------------------------------------------------------------------------------------------
// ResetSettings_SYS Resets the GX_HELP settings in the geosoft.ini file
//                   after changes have been made.
//
// Available         5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public_app] void ResetSettings_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// SetSettingsMETA_SYS Set the settings metadata object.
//
// Available           6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetSettingsMETA_SYS(META);  // META object



//===========================================================================================================
//
// Licensing Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// iCheckArcLicense_SYS Check to see if a ESRI ArcEngine or ArcView license is available
//
// Returns              1 - Licenced
//                      0 - Not licenced
//
// Available            7.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iCheckArcLicense_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// iCheckArcLicenseEx_SYS Check to see if a ESRI ArcEngine or ArcView license is available, returns type and version of available engine.
//
// Returns                ARC_LICENSE
//
// Available              9.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iCheckArcLicenseEx_SYS(var string,   // Version String
                                     int);         // Size of Version String
#define _iCheckArcLicenseEx_SYS(version) iCheckArcLicenseEx_SYS(version, sizeof(version))


  
//-----------------------------------------------------------------------------------------------------------
// iCheckIntrinsic_SYS Check to see if an intrinsic object is licensed
//
// Returns             1 - Licenced
//                     0 - Not licenced
//
// Available           6.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iCheckIntrinsic_SYS(int,      // Intrinsic Class Number
                                  string);  // Intrinsic Name (must be exact)


  
//-----------------------------------------------------------------------------------------------------------
// iGetGeodist_SYS Gets a global flag that indicates whether we are
//                 running within the geodist library
//
// Returns         0 - Geodist not loaded, 1 - Geodist loaded
//
// Available       6.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetGeodist_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// IGetLicenseClass_SYS Get the current application license class.
//
// Notes                String may be one of :  "ArcGIS"
//                      "OasisMontaj"
//                      "DapServer"
//
// Available            6.1
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetLicenseClass_SYS(var string,   // Class String
                                    int);         // Size of Class String
#define GetLicenseClass_SYS(cl) IGetLicenseClass_SYS(cl, sizeof(cl))


  
//-----------------------------------------------------------------------------------------------------------
// IGetLicensedUser_SYS Get the licensed user name and Company
//
// Available            6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetLicensedUser_SYS(var string,   // User Name
                                    int,          // Size of user name
                                    var string,   // Company Name
                                    int);         // Size of Company name
#define GetLicensedUser_SYS(user, company) IGetLicensedUser_SYS(user, sizeof(user), company, sizeof(company))


  
//-----------------------------------------------------------------------------------------------------------
// iIsSignedIn_SYS Check if signed in via Geosoft Connect
//
// Available       9.4
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsSignedIn_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// SignIn_SYS Sign in via Geosoft Connect
//
// Available  9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void SignIn_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// CheckProductUpdates_SYS Check for product updates via Geosoft Connect
//
// Available               9.6
//-----------------------------------------------------------------------------------------------------------

[_public] void CheckProductUpdates_SYS(int);  // Do not show notification if no updates available.


  
//-----------------------------------------------------------------------------------------------------------
// GeosoftConnectAuthenticateAndNavigate_SYS Automatically authenticate and navigate to my.geosoft.com URL
//
// Available                                 9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GeosoftConnectAuthenticateAndNavigate_SYS(string);  // URL


  
//-----------------------------------------------------------------------------------------------------------
// IGetGeosoftID_SYS Get the Geosoft ID (email) if signed in
//
// Available         9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetGeosoftID_SYS(var string,   // Returned ID
                                 int);         // Size of ID
#define GetGeosoftID_SYS(id) IGetGeosoftID_SYS(id, sizeof(id))


  
//-----------------------------------------------------------------------------------------------------------
// PublishDatasetsToCentral_SYS Publish datasets to Central
//
// Available                    2021.2
//-----------------------------------------------------------------------------------------------------------

[_public] void PublishDatasetsToCentral_SYS(string,       // Central Instance UUID
                                            string,       // Project UUID
                                            string,       // Project name
                                            var string,   // Central server GUID
                                            int,          // Size of Central server GUID buffer.
                                            var int,      // Branch ID
                                            var int,      // Revision ID
                                            string,       // metadata as JSON
                                            string);      // Parent Event ID
#define _PublishDatasetsToCentral_SYS(instance_uuid, project_uuid, project_name, central_server_guid, central_branch_id, central_revision_id, metadata_as_json, parent_event_id) PublishDatasetsToCentral_SYS(instance_uuid, project_uuid, project_name, central_server_guid, sizeof(central_server_guid), central_branch_id, central_revision_id, metadata_as_json, parent_event_id)


  
//-----------------------------------------------------------------------------------------------------------
// GetPublishPathForCentral_SYS Get cache path to publish datasets to Central
//
// Available                    2021.2
//-----------------------------------------------------------------------------------------------------------

[_public] void GetPublishPathForCentral_SYS(string,       // Project UUID
                                            var string,   // Returned cache path
                                            int);         // Size of cache path
#define _GetPublishPathForCentral_SYS(project_uuid, cache_path) GetPublishPathForCentral_SYS(project_uuid, cache_path, sizeof(cache_path))


  
//-----------------------------------------------------------------------------------------------------------
// ConnectWithCurrentCentralInstance_SYS Query information necessary to communicate with current Central Instance
//
// Available                             9.8
//-----------------------------------------------------------------------------------------------------------

[_public] void ConnectWithCurrentCentralInstance_SYS(var string,   // Instance name
                                                     int,          // Instance name size
                                                     var string,   // Base path (single port support)
                                                     int,          // Base path size
                                                     var string,   // URL
                                                     int,          // Url size
                                                     var string,   // Authorization token
                                                     int);         // Authorization token size
#define _ConnectWithCurrentCentralInstance_SYS(name, base_path, url, token) ConnectWithCurrentCentralInstance_SYS(name, sizeof(name), base_path, sizeof(base_path), url, sizeof(url), token, sizeof(token))


  
//-----------------------------------------------------------------------------------------------------------
// IGetProfileName_SYS Get the profile name as defined in My Geosoft (or email if not defined)
//
// Available           9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetProfileName_SYS(var string,   // Returned name
                                   int);         // Size of name
#define GetProfileName_SYS(name) IGetProfileName_SYS(name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// IGetProfileURL_SYS Get link to my.geosoft.com profile URL
//
// Available          9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetProfileURL_SYS(var string,   // Returned URL
                                  int);         // Size of URL
#define GetProfileURL_SYS(url) IGetProfileURL_SYS(url, sizeof(url))



//===========================================================================================================
//
// Lineage Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// AddLineageParameter_SYS Add a parameter to the current lineage object
//
// Available               7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void AddLineageParameter_SYS(string,   // Paramter Name
                                       string);  // Parameter Value


  
//-----------------------------------------------------------------------------------------------------------
// AddLineageSource_SYS Add a source to the current lineage object
//
// Available            7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void AddLineageSource_SYS(int,      // SYS_LINEAGE_SOURCE
                                    string);  // Source Name


  
//-----------------------------------------------------------------------------------------------------------
// ClearLineageParameters_SYS Clear all the lineage parameters
//
// Available                  7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ClearLineageParameters_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// ClearLineageSources_SYS Clear all the lineage sources
//
// Available               7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ClearLineageSources_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// CopyGeoFile_SYS Copy a Geosoft data file and all associated files to a new folder
//
// Notes           Grids are copied and the GI's are maintained - note that support
//                 for non-geosoft grids is limited since this method does not
//                 guarantee all grid files besides the main one are copied.
//
// Available       7.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void CopyGeoFile_SYS(string,   // File Name
                                 string);  // Target directory


  
//-----------------------------------------------------------------------------------------------------------
// IBackupGeoFile_SYS Backup a Geosoft data file and all associated files to a temporary folder.
//
// Notes              Grids are copied and the GI's are maintained - note that support
//                    for non-geosoft grids is limited since this method does not
//                    guarantee all grid files besides the main one are copied.
//
// Available          7.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void IBackupGeoFile_SYS(string,       // File Name
                                    var string,   // Buffer to place the target name into
                                    int);         // Size of the Buffer
#define BackupGeoFile_SYS(data, target) IBackupGeoFile_SYS(data, target, sizeof(target))


  
//-----------------------------------------------------------------------------------------------------------
// RemoveLineageOutput_SYS Remove an output from the current lineage object
//
// Available               7.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] void RemoveLineageOutput_SYS(string);  // Source Name


  
//-----------------------------------------------------------------------------------------------------------
// RemoveLineageParameter_SYS Remove a parameter in the current lineage object
//
// Available                  7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void RemoveLineageParameter_SYS(string);  // Paramter Name


  
//-----------------------------------------------------------------------------------------------------------
// RemoveLineageSource_SYS Remove a source from the current lineage object
//
// Available               7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void RemoveLineageSource_SYS(string);  // Source Name


  
//-----------------------------------------------------------------------------------------------------------
// RestoreGeoFile_SYS Backup a Geosoft data file and all associated files to original location
//
// Notes              Grids are copied and the GI's are maintained - note that support
//                    for non-geosoft grids is limited since this method does not
//                    guarantee all grid files besides the main one are copied.
//
// Available          7.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void RestoreGeoFile_SYS(string,   // Backup File Name
                                    string);  // Original file name


  
//-----------------------------------------------------------------------------------------------------------
// SetLineageDescription_SYS Set the description for the current lineage object
//
// Available                 7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetLineageDescription_SYS(string);  // Description


  
//-----------------------------------------------------------------------------------------------------------
// SetLineageDisplayName_SYS Set the display name for the current lineage object
//
// Available                 7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetLineageDisplayName_SYS(string);  // DisplayName


  
//-----------------------------------------------------------------------------------------------------------
// SetLineageName_SYS Set the name for the current lineage object
//
// Available          7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetLineageName_SYS(string);  // Name



//===========================================================================================================
//
// Menus and Toolbar Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// ClearMenus_SYS Clear all menus
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void ClearMenus_SYS(int);  // SYS_MENU_CLEAR


  
//-----------------------------------------------------------------------------------------------------------
// GetLoadedMenus_SYS Get the loaded menus.
//
// Notes              The names of the LSTs contain the menus and the values contain any exclusions. Exclusions 
//                    are semicolon separated top level menu names and/or toolbar.geobar file names.
//
// Available          9.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GetLoadedMenus_SYS(LST,   // Default menus (typically a single entry based on product)
                                      LST,   // Loaded menus
                                      LST);  // Loaded user menus


  
//-----------------------------------------------------------------------------------------------------------
// SetLoadedMenus_SYS Load a list of menus
//
// Notes              The names of the LSTs contain the menus and the values contain any exclusions. Exclusions 
//                    are semicolon separated top level menu names and/or toolbar.geobar file names.
//
// Available          9.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetLoadedMenus_SYS(LST,   // Default menus (typically a single entry based on product, do not change the name returned by GetLoadedMenus_SYS)
                                      LST,   // Loaded menus
                                      LST);  // Loaded user menus


  
//-----------------------------------------------------------------------------------------------------------
// GetEntitlementRights_SYS Get the Entitlement Rights
//
// Available                9.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetEntitlementRights_SYS(LST);  // Rights



//===========================================================================================================
//
// Misc Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// GenerateGUID_SYS Genrates a GUID string (e.g. {4FEDE8BF-CDAB-430A-8026-1CCC0EC0A2EB})
//
// Available        8.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GenerateGUID_SYS(var string,   // GUID
                                int);         // Size of GUID buffer.
#define _GenerateGUID_SYS(guid) GenerateGUID_SYS(guid, sizeof(guid))


  
//-----------------------------------------------------------------------------------------------------------
// ClipboardToFile_SYS Copy text from the clipboard to a file.
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ClipboardToFile_SYS(string);  // File name to place it into


  
//-----------------------------------------------------------------------------------------------------------
// CreateClipboardRA_SYS Create a RA to read text from the clipboard.
//
// Returns               RA to use for reading.
//
// Notes                 Destroy the RA as soon as possible. As long as it
//                       open the clipboard is not accessible from any
//                       application.
//
// Available             5.0
//-----------------------------------------------------------------------------------------------------------

[_public] RA CreateClipboardRA_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// CreateClipboardWA_SYS Create a WA to write text on the clipboard.
//
// Returns               WA to use for reading.
//
// Notes                 Destroy the WA as soon as possible. As long as it
//                       open the clipboard is not accessible from any
//                       application.
//
// Available             5.0
//-----------------------------------------------------------------------------------------------------------

[_public] WA CreateClipboardWA_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// Destr_SYS Destroy ANY object made with a Create_? method
//
// Notes     You can use this method instead of the Destroy_? methods
//           which are specific to each object.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Destr_SYS(HANDLE);  // Handle to object to delete


  
//-----------------------------------------------------------------------------------------------------------
// EMFObjectSize_SYS Get the size of an EMF object
//
// Available         6.4
//-----------------------------------------------------------------------------------------------------------

[_public] void EMFObjectSize_SYS(string,     // EMF File holding data
                                 var real,   // Size X
                                 var real);  // Size Y


  
//-----------------------------------------------------------------------------------------------------------
// FileToClipboard_SYS Copy a text file onto the clipboard as text.
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void FileToClipboard_SYS(string);  // File place into clipboard


  
//-----------------------------------------------------------------------------------------------------------
// FontLST_SYS List all Windows and geosoft fonts.
//
// Notes       To get TT and GFN fonts, call twice with the same list
//             and SYS_FONT_TT, then SYS_FONT_GFN, or vice-versa to
//             change order of listing.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void FontLST_SYS(LST,   // List Object
                           int);  // SYS_FONT


  
//-----------------------------------------------------------------------------------------------------------
// IiGetDotNetGXEntries_SYS Get the list of entry points that this assembly has
//                          exposed to Oasis montaj.
//
// Returns                  0  success
//                          1  error.
//
// Notes                    The list of entry points are passed back as one
//                          string with each entry point separated by a semi-colon.
//                          For example: NewGDB|Run;NewGDB|RunEx
//
// Available                6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] int IiGetDotNetGXEntries_SYS(string,       // Name of .NET GX assembly
                                       var string,   // Buffer to place list of entries in
                                       int);         // Sizeof buffer
#define iGetDotNetGXEntries_SYS(gx, entry_buffer) IiGetDotNetGXEntries_SYS(gx, entry_buffer, sizeof(entry_buffer))


  
//-----------------------------------------------------------------------------------------------------------
// SendGeneralMessage_SYS Send a general information message to all listners
//
// Available              6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void SendGeneralMessage_SYS(string,   // Message Class
                                      string);  // Message Info


  
//-----------------------------------------------------------------------------------------------------------
// WriteDebugLog_SYS This method writes out information to the output
//                   debugging log file (in temp folder) or output window.
//
// Available         6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void WriteDebugLog_SYS(string);  // String to Write out


  
//-----------------------------------------------------------------------------------------------------------
// LogScriptRun_SYS This method logs that a script was run
//
// Available        9.2
//-----------------------------------------------------------------------------------------------------------

[_public] void LogScriptRun_SYS(string);  // Location that launched the script



//===========================================================================================================
//
// Multithreading Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// iGetThreadID_SYS Get the ID the current thread.
//
// Returns          x - ID
//
// Notes            In a single threaded application this will always be 0.
//
// Available        5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetThreadID_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// RunMultiUserScript_SYS Execute a script using multithreaded users
//
// Notes                  No access is provided in the script to EMAPS
//                        or EDBS. Users must ensure that the resources
//                        that are shared are protected.
//
// Available              5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void RunMultiUserScript_SYS(string,   // Script to run
                                      int,      // Number of users to run
                                      int,      // Number of iterations to run (for each user)
                                      int,      // Minimum wait time between iterations (0 for none)
                                      int,      // Maximum wait time between iterations (0 for none)
                                      int);     // Ramp up time for users (0 for all users start immediatly)



//===========================================================================================================
//
// Parameter Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// ClearGroup_SYS Clear current contents of a group
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ClearGroup_SYS(string);  // Group to clear


  
//-----------------------------------------------------------------------------------------------------------
// ClearGroupParm_SYS Clears all paramters in a specified group.
//
// Available          5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void ClearGroupParm_SYS(string);  // String


  
//-----------------------------------------------------------------------------------------------------------
// ClearParm_SYS Clears all paramters.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ClearParm_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// DefaultInt_SYS Allows a default int to be set.
//
// Notes          The value will only be set if there is no existing
//                setting.
//
// Available      6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DefaultInt_SYS(string,   // Group Name
                              string,   // Parameter Name
                              int);     // Int Value to Set


  
//-----------------------------------------------------------------------------------------------------------
// DefaultReal_SYS Allows a default real to be set.
//
// Notes           The value will only be set if there is no existing
//                 setting.
//
// Available       6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DefaultReal_SYS(string,   // Group Name
                               string,   // Parameter Name
                               real);    // Real Value to Set


  
//-----------------------------------------------------------------------------------------------------------
// DefaultString_SYS Allows a default string to be set.
//
// Notes             The value will only be set if there is no existing
//                   setting.
//
// Available         6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DefaultString_SYS(string,   // Group Name
                                 string,   // Parameter Name
                                 string);  // String to Set it To


  
//-----------------------------------------------------------------------------------------------------------
// GetPattern_SYS Gets pattern parameters from the parameter block.
//
// Notes          Gets all the user-definable pattern parameters from
//                a specified group. Parameters are:
//                "PAT_NUMBER"    0 is solid fill (default)
//                "PAT_SIZE"      pattern tile size in mm. (can return iDUMMY)
//                "PAT_THICKNESS" pattern line thickness in percent of the tile size.
//                valid range is 0-100.
//                "PAT_DENSITY"   Tile spacing. A value of 1 means tiles are laid with no overlap.
//                A value of 2 means they overlap each other.
//                "PAT_COLOR"     The color value.
//                "PAT_BACKCOLOR" Background color value.
//                
//                Returned values may be DUMMY, but will be acceptable for use with
//                the iColorForm_GUI function, to set defaults.
//
// Available      6.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GetPattern_SYS(string,     // Input group name
                              var int,    // Pattern
                              var real,   // Size,
                              var int,    // Thick (0-100)
                              var real,   // Density,
                              var int,    // Pattern Color
                              var int);   // Background Color


  
//-----------------------------------------------------------------------------------------------------------
// GetREG_SYS Get REG parameters.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetREG_SYS(REG,      // REG to add parameters to
                          string);  // Group name wanted


  
//-----------------------------------------------------------------------------------------------------------
// GtString_SYS This method returns a string in the parameter block.
//
// Notes        If the setting exits it is placed in the buffer, otherwise
//              the buffer will have zero length
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GtString_SYS(string,       // Group Name
                            string,       // Parameter Name
                            var string,   // Buffer to place the string into
                            int);         // Size of the Buffer
#define GetString_SYS(group, field, buff) GtString_SYS(group, field, buff, sizeof(buff))


  
//-----------------------------------------------------------------------------------------------------------
// iExistInt_SYS This method checks to see if a int parameter exists.
//
// Returns       1 - Yes
//               0 - No
//
// Available     7.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iExistInt_SYS(string,   // Group Name
                            string);  // Parameter Name


  
//-----------------------------------------------------------------------------------------------------------
// iExistReal_SYS This method checks to see if a real parameter exists.
//
// Returns        1 - Yes
//                0 - No
//
// Available      7.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iExistReal_SYS(string,   // Group Name
                             string);  // Parameter Name


  
//-----------------------------------------------------------------------------------------------------------
// iExistString_SYS This method checks to see if a string parameter exists.
//
// Returns          1 - Yes
//                  0 - No
//
// Available        7.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iExistString_SYS(string,   // Group Name
                               string);  // Parameter Name


  
//-----------------------------------------------------------------------------------------------------------
// iGetInt_SYS This method returns an int from the parameter block.
//
// Returns     Int Value, iDUMMY if the parameter is not set.
//
// Available   6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetInt_SYS(string,   // Group Name
                          string);  // Parameter Name


  
//-----------------------------------------------------------------------------------------------------------
// iGetYesNo_SYS Check a YES/NO Setting
//
// Returns       1 - if first char in setting is a "Y" or"y"
//               0 - Otherwise
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetYesNo_SYS(string,   // Group Name
                            string);  // Parameter Name


  
//-----------------------------------------------------------------------------------------------------------
// IReplaceString_SYS Replace "% %" tokens in a string with parameter values
//
// Notes              If parameter does not exist, the token is removed.  Full parameter names,
//                    such as "%group.name%", are used as-is.  Partial parameter names, such as
//                    "%name%" will have the default group attached.
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IReplaceString_SYS(string,       // String to filter replace
                                  var string,   // Output string
                                  int,          // Output string length
                                  string);      // Default group name
#define ReplaceString_SYS(str_val, output, group) IReplaceString_SYS(str_val, output, sizeof(output), group)


  
//-----------------------------------------------------------------------------------------------------------
// LoadParm_SYS Reads parameters from a file.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LoadParm_SYS(string,   // Name of the File to read from
                            string);  // Group Name to write read ("" for all groups)


  
//-----------------------------------------------------------------------------------------------------------
// rGetReal_SYS This method returns a real from the parameter block.
//
// Returns      Real Value, rDUMMY if parameter not set.
//
// Available    6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetReal_SYS(string,   // Group Name
                            string);  // Parameter Name


  
//-----------------------------------------------------------------------------------------------------------
// SaveParm_SYS Writes out one group (or all groups) to a file.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SaveParm_SYS(string,   // Name of the File
                            int,      // 0 - New file, 1 - Append
                            string);  // Group Name to write out ("" for all groups)


  
//-----------------------------------------------------------------------------------------------------------
// FilterParmGroup_SYS Controls filtering of specific group during logging.
//
// Notes               This is useful to prevent certain utility GX parameters from being recorded during GS script runs where the parameters does not influence the actual script execution.
//
// Available           9.1
//-----------------------------------------------------------------------------------------------------------

[_public] void FilterParmGroup_SYS(string,   // Group Name
                                   int);     // 0 - Clear filter, 1 - Add filter


  
//-----------------------------------------------------------------------------------------------------------
// SetInt_SYS This method sets an int in the parameter block.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetInt_SYS(string,   // Group Name
                          string,   // Parameter Name
                          int);     // Int Value to Set


  
//-----------------------------------------------------------------------------------------------------------
// SetPattern_SYS Sets pattern parameters in the parameter block.
//
// Notes          Sets all the user-definable pattern parameters to
//                a specified group. Parameters are:
//                "PAT_NUMBER"    0 is solid fill
//                "PAT_SIZE"      pattern tile size in mm.
//                "PAT_THICKNESS" pattern line thickness in percent of the tile size.
//                valid range is 0-100.
//                "PAT_DENSITY"   Tile spacing. A value of 1 means tiles are laid with no overlap.
//                A value of 2 means they overlap each other.
//                "PAT_COLOR"     The color value.
//                "PAT_BACKCOLOR" Background color value.
//                
//                Input values may be DUMMY.
//                
//                Designed for use along with the sPatternForm_GUI function.
//
// Available      6.4
//-----------------------------------------------------------------------------------------------------------

[_public] void SetPattern_SYS(string,   // Group Name
                              int,      // Pattern
                              real,     // Size. Input GS_R8DM to use default
                              int,      // Thickness (0-100).  Input GS_S4DM to use default
                              real,     // Density. Input GS_R8DM to use default
                              int,      // Pattern Color
                              int);     // Background Color. Can be C_TRANSPARENT


  
//-----------------------------------------------------------------------------------------------------------
// SetReal_SYS This method Sets a real in the parameter block.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetReal_SYS(string,   // Group Name
                           string,   // Parameter Name
                           real);    // Real


  
//-----------------------------------------------------------------------------------------------------------
// SetREG_SYS Copy contents of a REG to current parameters.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetREG_SYS(REG);  // REG object


  
//-----------------------------------------------------------------------------------------------------------
// SetString_SYS This method sets a string in the parameter block.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetString_SYS(string,   // Group Name
                             string,   // Parameter Name
                             string);  // String to Set it To



//===========================================================================================================
//
// Progress Control Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// iCheckStop_SYS This method is called at convenient points in the
//                GX code to check if the user has asked the script
//                to stop running. This method should be called by
//                any GX program that may take a while to complete.
//
// Returns        0 - No
//                1 - Yes, Terminate processing.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iCheckStop_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// iProgState_SYS Return current progress state (On/Off)
//
// Notes          This is useful, for instance, when calling one GX from another,
//                especially if it is called multiple times in a loop.
//                The called GX may turn the progress ON/OFF on its own, which
//                means any progress tracking in the calling GX is disrupted.
//                The called GX should use this function to determine the original
//                progress state, and not turn off progress if it was already on.
//                
//                Returns				 0 - Progress is on
//                - Progress is off
//
// Available      7.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iProgState_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// ProgName_SYS This method allows you to name the current process being
//              displayed by the progress bar. This method has no affect
//              if no progress bar exists.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ProgName_SYS(string,   // New Process Name
                            int);     // 0 - Change the Name but do not change the percentage 1 - Change the Name and Reset Percent to 0 2 - Change the Name but no Percent Bar


  
//-----------------------------------------------------------------------------------------------------------
// Progress_SYS This method allows you to turn on the Progress BAR ON/OFF.
//              Once the progress bar is on, use the UpdateProg method
//              to drive it.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Progress_SYS(int);  // 0 - Turn Progress Bar OFF 1 - Turn Progress Bar ON


  
//-----------------------------------------------------------------------------------------------------------
// ProgUpdate_SYS This method drives the Progress Bar. It is passed
//                a percentage and will update the bar to reflect that
//                percentage.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ProgUpdate_SYS(int);  // Percentage Completed (0-100).


  
//-----------------------------------------------------------------------------------------------------------
// ProgUpdateL_SYS Updates progress bar based on count and maxcount.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ProgUpdateL_SYS(int,   // Count
                               int);  // Max count >= count



//===========================================================================================================
//
// Registry Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// IGetSysInfo_SYS Get system information
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetSysInfo_SYS(int,          // SYS_INFO
                               var string,   // Returned setting
                               int);         // Size of string
#define GetSysInfo_SYS(sys_info, info) IGetSysInfo_SYS(sys_info, info, sizeof(info))


  
//-----------------------------------------------------------------------------------------------------------
// IiRegistryGetVal_SYS Get a registry value
//
// Returns              0 if value exists
//                      1 if value does not exist
//
// Available            6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] int IiRegistryGetVal_SYS(int,          // REG_DOMAIN
                                   string,       // Key to set
                                   string,       // Value name within key
                                   var string,   // String for value data
                                   int);         // Size of String
#define iRegistryGetVal_SYS(domain, key, sub_key, value) IiRegistryGetVal_SYS(domain, key, sub_key, value, sizeof(value))


  
//-----------------------------------------------------------------------------------------------------------
// iRegistryDeleteKey_SYS Delete a registry value
//
// Returns                0 - Ok
//                        1 - Error
//
// Notes                  All sub-keys and values will be deleted if they exist.
//
// Available              5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iRegistryDeleteKey_SYS(int,      // REG_DOMAIN
                                     string);  // Key to delete


  
//-----------------------------------------------------------------------------------------------------------
// iRegistryDeleteVal_SYS Delete a registry value
//
// Returns                0 - Ok
//                        1 - Error
//
// Available              5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iRegistryDeleteVal_SYS(int,      // REG_DOMAIN
                                     string,   // Key
                                     string);  // Name of value to delete


  
//-----------------------------------------------------------------------------------------------------------
// RegistrySetVal_SYS Set/create a registry value
//
// Notes              This function will create the subkey and key if either do not
//                    already exist.
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void RegistrySetVal_SYS(int,      // REG_DOMAIN
                                  string,   // Key to set
                                  string,   // Name of Subkey within key
                                  string);  // Value for Subkey



//===========================================================================================================
//
// Temporary File Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// DestroyPTMP_SYS Destroy PTMP.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DestroyPTMP_SYS(PTMP);  // PTMP object to destroy


  
//-----------------------------------------------------------------------------------------------------------
// GetPTMP_SYS Get temporary saves copy of parameter block.
//
// See also    SavePTMP_SYS, DestroyPTMP_SYS
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetPTMP_SYS(PTMP);  // Saved with Save_PTMP_SYS


  
//-----------------------------------------------------------------------------------------------------------
// SavePTMP_SYS Save a temporary copy of the parameter block.
//
// Returns      PTMP handle.
//
// Notes        All PTMP instances will be destroyed on exit.
//
// See also     GetPTMP_SYS, DestroyPTMP_SYS
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] PTMP SavePTMP_SYS(string);  // Group Name to save, "" for everything.



//===========================================================================================================
//
// Termination Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// _Abort_SYS This method terminates the execution of a script. A message
//            giving the reason for the abort will be displayed along with
//            the line number where we stopped in the script.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void _Abort_SYS(string);  // Message to display
#define Abort_SYS _Abort_SYS


  
//-----------------------------------------------------------------------------------------------------------
// _Assert_SYS Abort with GX line number if not true.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void _Assert_SYS(int);  // Expression to evaluate (0 aborts)
#define Assert_SYS _Assert_SYS


  
//-----------------------------------------------------------------------------------------------------------
// _Exit_SYS This method terminates the execution of a script in  a regular
//           fashion with no error messages displayed.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void _Exit_SYS();
#define Exit_SYS _Exit_SYS


  
//-----------------------------------------------------------------------------------------------------------
// Cancel_SYS This method indicates that the GX program terminated without
//            doing anything of interest and should be ignored.  In
//            particular, the GX will not be logged in a recorded GS.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Cancel_SYS();



//===========================================================================================================
//
// Timing Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// iDelay_SYS Idle delay method.
//
// Returns    Success if the delay has elapsed.
//
// Available  6.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iDelay_SYS(real);  // Decimal Seconds to delay


  
//-----------------------------------------------------------------------------------------------------------
// iGetTimer_SYS Return the elapsed time since the established time.
//
// Returns       Success if the delay has elapsed.
//
// Notes         1st time through call the method with a flag of 1 to identify
//               the count start time, subsequent times the time will be the time
//               elapsed since the queried start time.  Do so by settign the flag to 0.
//
// Available     6.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetTimer_SYS(int,        // 1 - set start time, 0 - return elapsed time
                            var real,   // Start time in seconds
                            var real);  // Elapsed time in seconds



//===========================================================================================================
//
// User Interaction Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// DisplayHelp_SYS Display the help dialog with the specified topic highlighted
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void DisplayHelp_SYS(string,   // Group string to lookup in gxhelp.ini
                                   string);  // Index string to lookup in gxhelp.ini


  
//-----------------------------------------------------------------------------------------------------------
// DisplayHelpTopic_SYS Display the help dialog without topic lookup in INI files
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void DisplayHelpTopic_SYS(string,   // Help File (blank for default)
                                        string);  // Help Topic


  
//-----------------------------------------------------------------------------------------------------------
// DisplayInt_SYS Display an integer.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void DisplayInt_SYS(string,   // Title of the Window
                                  int);     // Number


  
//-----------------------------------------------------------------------------------------------------------
// DisplayMessage_SYS Display a user message.
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void DisplayMessage_SYS(string,   // Title of the Window
                                      string);  // Message String


  
//-----------------------------------------------------------------------------------------------------------
// DisplayReal_SYS Display a real number.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void DisplayReal_SYS(string,   // Title of the Window
                                   real);    // Number


  
//-----------------------------------------------------------------------------------------------------------
// iDisplayQuestion_SYS Display a YES/NO type question. This method waits
//                      for the user to hit YES or NO.
//
// Returns              0 - user selected No
//                      1 - user selected YES
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iDisplayQuestion_SYS(string,   // Title of the window
                                       string);  // Message String


  
//-----------------------------------------------------------------------------------------------------------
// iDisplayQuestionWithCancel_SYS Display a YES/NO/CANCEL type question. This method waits
//                                for the user to hit YES or NO or CANCEL.
//
// Returns                        0 - user selected No
//                                1 - user selected YES
//                                2 - user selected CANCEL
//
// Available                      5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iDisplayQuestionWithCancel_SYS(string,   // Title of the window
                                                 string);  // Message String


  
//-----------------------------------------------------------------------------------------------------------
// iDisplayTaskDialogUI_SYS Show a Windows TaskDialog UI (see https://msdn.microsoft.com/en-us/library/windows/desktop/bb760441(v=vs.85).aspx).
//
// Returns                  Button ID. One of TD_ID or the int value from LST of custom buttons.
//
// Available                9.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iDisplayTaskDialogUI_SYS(string,    // Title
                                       string,    // Main instruction (empty string for none)
                                       string,    // Content (empty string for none)
                                       int,       // Common Buttons, one of TD_BUTTON
                                       LST,       // Optional LST of custom buttons. Name in LST will be used for button text, while value should be an int to return. Pass (LST)0 to only use standard button flags.
                                       int,       // Icon TD_ICON
                                       string,    // Footer (empty string for none)
                                       int,       // Footer Icon TD_ICON
                                       string,    // Verification checkbox text (empty string for none)
                                       var int,   // Verification checkbox checked (in/out)
                                       string,    // Expanded information (empty string for none)
                                       string,    // Collapsed control text for expanded information (empty string for default; 'More')
                                       string);   // Expanded control text for expanded information (empty string for default; 'Less')


  
//-----------------------------------------------------------------------------------------------------------
// iInteractive_SYS Checks to see if you should run interactively.
//
// Returns          0 - Run in batch mode only
//                  1 - Run Interactively only
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iInteractive_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// iTestingSystemMode_SYS Checks to see if the GX is running in the Geosoft testing system.
//
// Returns                0 - Normal operation
//                        1 - Running in the Geosoft testing system.
//
// Available              9.6
//-----------------------------------------------------------------------------------------------------------

[_public] int iTestingSystemMode_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// IiPrompt_SYS Asks the User to enter a string.
//
// Returns      0 - User hit OK
//              1 - user hit CANCEL
//
// Notes        The User string is displayed as the default value in the prompt.
//              Empty the user string if no default is needed.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int IiPrompt_SYS(string,       // Title of the window
                               var string,   // Buffer to place the user's string
                               int);         // Size of the buffer
#define iPrompt_SYS(title, result) IiPrompt_SYS(title, result, sizeof(result))


  
//-----------------------------------------------------------------------------------------------------------
// iScript_SYS Checks to see if we are running inside OMS (script mode)
//
// Returns     0 - Normal mode
//             1 - Scripting mode
//             
//             A number of functions can only be run from inside Oasis montaj
//             (such as GetDisplayAreaRaw_EMAP), because they require an actual
//             window object, such as an editable database or map. Use this
//             function to prevent calls
//
// Available   6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iScript_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// iScriptRecord_SYS Checks to see if we are in scripting recording mode
//
// Returns           0 - Normal mode
//                   1 - Recording mode
//
// Available         6.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iScriptRecord_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// SetCursor_SYS Set the cursor on the display.
//
// Notes         Possible Cursors:
//               Normal, Horiz, Vert, Moving, Cross, Hand, NoEdit, Sun,
//               View, Group, ViewSel, GroupSel, BoxSelect, Shadow, Link,
//               Line, PolyLine, Polygon, Ellipse, Rectangle, Text, Symbol,
//               Zoom, Pan, Rotate, InteractiveZoom, PolyFill, GetFill,
//               SnapPoint, SnapLine, SnapOnPoint, SnapOnLine, NPolygon,
//               ExcludeRect, ExcludePoly, ExcludeNPoly, AddVertex, DelVertex, GeneralAdd and GeneralDelete
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetCursor_SYS(string);  // Cursor Names


  
//-----------------------------------------------------------------------------------------------------------
// SetInfoLine_SYS Display a message on the information line at the left
//                 bottom corner of the OAISIS montaj application.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetInfoLine_SYS(string);  // Message String


  
//-----------------------------------------------------------------------------------------------------------
// SetInteractive_SYS Sets the interactive mode.
//
// Notes              Call to iInteractive_SYS will return the value
//                    set here.
//
// See also           iInteractive_SYS, iRunGX_SYS and iRunGS_SYS
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetInteractive_SYS(int);  // 0 - interactive off 1 - interative on



//===========================================================================================================
//
// Workspace Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// GetWorkspaceREG_SYS Get a copy of the workspace REG;
//
// Notes               The workspace REG is separate from the reg used
//                     to store SYS parameters.
//                     
//                     Because GetWorkspaceREG_SYS returns a copy of the
//                     workspace REG, and not the workspace REG itself,
//                     you must call SetWorkspaceREG_SYS if you make changes
//                     to your own REG object and you wish them to take
//                     effect in the workspace REG.
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetWorkspaceREG_SYS(REG);  // REG object


  
//-----------------------------------------------------------------------------------------------------------
// SetWorkspaceREG_SYS Set the workspace REG;
//
// Notes               The workspace REG is separate from the reg used
//                     to store SYS parameters.
//                     
//                     Because GetWorkspaceREG_SYS returns a copy of the
//                     workspace REG, and not the workspace REG itself,
//                     you must call SetWorkspaceREG_SYS if you make changes
//                     to your own REG object and you wish them to take
//                     effect in the workspace REG
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetWorkspaceREG_SYS(REG);  // REG object



//===========================================================================================================
//
// String Encryption Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// EncryptString_SYS Encrypts a string for secure storage in configuration files
//                   or in the workspace parameters.
//
// Returns           Nothing.
//
// Available         9.0
//-----------------------------------------------------------------------------------------------------------

[_public] void EncryptString_SYS(string,       // Input string for encryption.
                                 var string,   // Output buffer for encrypted result.
                                 int,          // Size of output buffer.
                                 int);         // SYS_ENCRYPTION_KEY
#define _EncryptString_SYS(input, output, key) EncryptString_SYS(input, output, sizeof(output), key)


  
//-----------------------------------------------------------------------------------------------------------
// DecryptString_SYS Decrypts a string that has been previously encrypted by EncryptString_SYS.
//
// Returns           Nothing.
//
// Available         9.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DecryptString_SYS(string,       // Input string for decryption.
                                 var string,   // Output buffer for decrypted result.
                                 int,          // Size of output buffer.
                                 int);         // SYS_ENCRYPTION_KEY
#define _DecryptString_SYS(input, output, key) DecryptString_SYS(input, output, sizeof(output), key)


  
//-----------------------------------------------------------------------------------------------------------
// IsEncryptedString_SYS Checks whether the specified string was encrypted by EncryptString_SYS.
//
// Returns               0 (false) or non-zero (true)
//
// Available             9.0
//-----------------------------------------------------------------------------------------------------------

[_public] int IsEncryptedString_SYS(string);  // Input string to inspect.



//===========================================================================================================
//
// GX Debugger Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// DisableGXDebugger_SYS Disable GX Debugger GUI if active
//
// Notes                 All breakpoints will be cleared by this call.
//
// Available             5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DisableGXDebugger_SYS();


  
//-----------------------------------------------------------------------------------------------------------
// EnableGXDebugger_SYS Enable GX Debugger GUI
//
// Notes                Takes as input two strings one a path that will be scanned
//                      recursively for GXC source files and a second string without
//                      a path of the GX where the first breakpoint should be set in (i.e. "gxname.gx").
//                      The source of the GX should be found in the path (e.g. <path>\somewhere\gxname.gxc)
//                      and a breakpoint will be set on the first executing line of this GX. Make sure the
//                      GX binary is newer than the source file, otherwise unexpected results may occur. As
//                      soon as the GX is run the GUI will become visible and it will be possible to set more
//                      breakpoints in any of the GXC files found in the path.
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void EnableGXDebugger_SYS(string,   // Path that will be scanned recursively for GXC source files
                                    string);  // Name of gx where first breakpoint should be set





//*** endblock Generated


#endif
