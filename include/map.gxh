//*** extends 'class_empty.gxh'

#ifndef HMAP_GXH_DEFINED
#define HMAP_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class MAP
//
//-----------------------------------------------------------------------------------------------------------
//
// MAPs are containers for MVIEW objects. A view is a 3-D translation
// and a clip window on a map. Graphic entities can be drawn in an MVIEW.
// It is recommended that the MAP class be instantiated by first creating
// an EMAP object and calling the Lock_EMAP function.
// (See the explanation on the distinction between the MAP and EMAP classes).
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// DUPMAP Definitions
//
// Duplicate Modes
//
// DUPMAP_BLANK
// Blank
//
// DUPMAP_COPY
// Copy all current contents
//
// DUPMAP_COPY_PRE62
// Copy all current contents and save text for pre-6.2 versions.
//
//===========================================================================================================


#define DUPMAP_BLANK 0
#define DUPMAP_COPY 1
#define DUPMAP_COPY_PRE62 2


//===========================================================================================================
//
// MAP_EXPORT_BITS Definitions
//
// Color Types
//
// MAP_EXPORT_BITS_32
// 32 Bit Color (8-bit alpha)
//
// MAP_EXPORT_BITS_24
// 24 Bit Color
//
// MAP_EXPORT_BITS_GREY8
// 8 Bit Gray Scale
//
// MAP_EXPORT_BITS_8
// 8 Bit Color
//
// MAP_EXPORT_BITS_GREY4
// 4 Bit Gray Scale
//
// MAP_EXPORT_BITS_4
// 4 Bit Color
//
// MAP_EXPORT_BITS_GREY1
// 1 Bit Gray Scale
//
// MAP_EXPORT_BITS_DEFAULT
// Default Resolution
//
//===========================================================================================================


#define MAP_EXPORT_BITS_32 32
#define MAP_EXPORT_BITS_24 24
#define MAP_EXPORT_BITS_GREY8 9
#define MAP_EXPORT_BITS_8 8
#define MAP_EXPORT_BITS_GREY4 5
#define MAP_EXPORT_BITS_4 4
#define MAP_EXPORT_BITS_GREY1 1
#define MAP_EXPORT_BITS_DEFAULT 0


//===========================================================================================================
//
// MAP_EXPORT_FORMAT Definitions
//
// Export Formats
// Format   Description                  Type
// =======  ==========================   ====
//
// MAP_EXPORT_FORMAT_PLT
// "PLT"    Geosoft Plot (*.plt)         Plot
//
// MAP_EXPORT_FORMAT_SHP
// "SHP"    ArcView Shapfile (*.shp)     Plot
//
// MAP_EXPORT_FORMAT_DXF12
// "DXF12"  AutoCad12 (*.dxf)            Plot
//
// MAP_EXPORT_FORMAT_DXF13
// "DXF13"  AutoCad13 (*.dxf)            Plot
//
// MAP_EXPORT_FORMAT_GTIFF
// "GTIFF"  GeoTIFF (*.tif),             Color Image
//
// MAP_EXPORT_FORMAT_CGTIFF
// "CGTIFF"  GeoTIFF Compressed (*.tif), Color Image
//
// MAP_EXPORT_FORMAT_MTIFF
// "MTIFF"  MapInfo TIFF (*.tif)         Color Image
//
// MAP_EXPORT_FORMAT_ATIFF
// "ATIFF"  ArcView TIFF (*.tif)         Color Image
//
// MAP_EXPORT_FORMAT_GEO
// "GEO"    Geosoft COLOR grid (*.grd)   Color Image
//
// MAP_EXPORT_FORMAT_ERM
// "ERM"    ER Mapper RGB (*.ers)        Color Image
//
// MAP_EXPORT_FORMAT_KMZ
// "KMZ"    Keyhole Markup (*.kmz)       Zipped XML/Image files
//
//===========================================================================================================


#define MAP_EXPORT_FORMAT_PLT "PLT"
#define MAP_EXPORT_FORMAT_SHP "SHP"
#define MAP_EXPORT_FORMAT_DXF12 "DXF12"
#define MAP_EXPORT_FORMAT_DXF13 "DXF13"
#define MAP_EXPORT_FORMAT_GTIFF "GTIFF"
#define MAP_EXPORT_FORMAT_CGTIFF "CGTIFF"
#define MAP_EXPORT_FORMAT_MTIFF "MTIFF"
#define MAP_EXPORT_FORMAT_ATIFF "ATIFF"
#define MAP_EXPORT_FORMAT_GEO "GEO"
#define MAP_EXPORT_FORMAT_ERM "ERM"
#define MAP_EXPORT_FORMAT_KMZ "KMZ"


//===========================================================================================================
//
// MAP_EXPORT_METHOD Definitions
//
// Dithering Methods
//
// MAP_EXPORT_METHOD_STANDARD
// Standard Dither
//
// MAP_EXPORT_METHOD_DIFFUSE
// Error Diffusion Dither
//
// MAP_EXPORT_METHOD_NONE
// No Dither
//
//===========================================================================================================


#define MAP_EXPORT_METHOD_STANDARD 0
#define MAP_EXPORT_METHOD_DIFFUSE 1
#define MAP_EXPORT_METHOD_NONE 2


//===========================================================================================================
//
// MAP_EXPORT_RASTER_FORMAT Definitions
//
// Export Raster Formats
// .
// Format  Description                      Type           B/W  B/W  COL  B/W  COL  COL
// ======= ==========================       ===========    ===  ===  ===  ===  ===  ===
//
// MAP_EXPORT_RASTER_FORMAT_EMF
// "EMF"   Enhanced Metafile (*.emf)        Plot
//
// MAP_EXPORT_RASTER_FORMAT_BMP
// "BMP"   Bitmap (*.bmp)                   Color Image     X    X    X    X    X    X
//
// MAP_EXPORT_RASTER_FORMAT_JPEGL
// "JPEGL" JPEG Low Quality (*.jpg)         Color Image                              X
//
// MAP_EXPORT_RASTER_FORMAT_JPEG
// "JPEG" JPEG (*.jpg)                     Color Image                              X
//
// MAP_EXPORT_RASTER_FORMAT_JPEGH
// "JPEGH" JPEG High Quality (*.jpg)        Color Image                              X
//
// MAP_EXPORT_RASTER_FORMAT_GIF
// "GIF"   GIF (*.gif)                      Color Image     X    X    X    X    X
//
// MAP_EXPORT_RASTER_FORMAT_PCX
// "PCX"   PCX (*.pcx)                      Color Image     X    X    X    X    X    X
//
// MAP_EXPORT_RASTER_FORMAT_PNG
// "PNG"   PNG (*.png)                      Color Image     X    X    X    X    X    X
//
// MAP_EXPORT_RASTER_FORMAT_EPS
// "EPS"   Encasulated PostScript (*.eps)   Color Image                    X
//
// MAP_EXPORT_RASTER_FORMAT_TIFF
// "TIFF"  TIFF (*.tif)                     Color Image     X    X    X    X    X    X
//
//===========================================================================================================


#define MAP_EXPORT_RASTER_FORMAT_EMF "EMF"
#define MAP_EXPORT_RASTER_FORMAT_BMP "BMP"
#define MAP_EXPORT_RASTER_FORMAT_JPEGL "JPEGL"
#define MAP_EXPORT_RASTER_FORMAT_JPEG "JPEG"
#define MAP_EXPORT_RASTER_FORMAT_JPEGH "JPEGH"
#define MAP_EXPORT_RASTER_FORMAT_GIF "GIF"
#define MAP_EXPORT_RASTER_FORMAT_PCX "PCX"
#define MAP_EXPORT_RASTER_FORMAT_PNG "PNG"
#define MAP_EXPORT_RASTER_FORMAT_EPS "EPS"
#define MAP_EXPORT_RASTER_FORMAT_TIFF "TIFF"


//===========================================================================================================
//
// MAP_LIST_MODE Definitions
//
// Map List modes
//
// MAP_LIST_MODE_ALL
// 
//
// MAP_LIST_MODE_3D
// 
//
// MAP_LIST_MODE_NOT3D
// 
//
//===========================================================================================================


#define MAP_LIST_MODE_ALL 0
#define MAP_LIST_MODE_3D 1
#define MAP_LIST_MODE_NOT3D 2


//===========================================================================================================
//
// MAP_OPEN Definitions
//
// Open Modes
//
// MAP_WRITENEW
// 
//
// MAP_WRITEOLD
// 
//
//===========================================================================================================


#define MAP_WRITENEW 1
#define MAP_WRITEOLD 2





//===========================================================================================================
//
// Export Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// ExportAllInView_MAP Export the entire map in view units to an external format. View and Group names are removed and plane spatial coordinates will be in the units of the map.
//
// Available           7.1
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportAllInView_MAP(MAP,      // MAP object
                                   string,   // File Name To Export
                                   string,   // View to export coordinates in
                                   real,     // Resolution in view units of one pixel (or dummy, will be used if DPI is dummy)
                                   real,     // Resolution in DPI (will override view resolution if not dummy, map page size will be used to determine pixel size of output)
                                   int,      // MAP_EXPORT_BITS
                                   int,      // MAP_EXPORT_METHOD
                                   string,   // MAP_EXPORT_FORMAT
                                   string);  // Extended Options String (format specific)


  
//-----------------------------------------------------------------------------------------------------------
// ExportAllRaster_MAP Export the entire map to map to a non-geo raster format.
//
// Available           7.1
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportAllRaster_MAP(MAP,      // MAP object
                                   string,   // File Name To Export
                                   string,   // View to export coordinates in
                                   int,      // Number of Pixels in X (X or Y should be specified the other should be 0 and computed by export, or both can be 0 and DPI defined)
                                   int,      // Number of Pixels in Y (X or Y should be specified the other should be 0 and computed by export, or both can be 0 and DPI defined)
                                   real,     // Resolution in DPI (will override X and Y if not dummy, map page size will be used to determine pixel size of output)
                                   int,      // MAP_EXPORT_BITS
                                   int,      // MAP_EXPORT_METHOD
                                   string,   // MAP_EXPORT_RASTER_FORMAT
                                   string);  // Extended Options String (format specific)


  
//-----------------------------------------------------------------------------------------------------------
// ExportAreaInView_MAP Export an area of a map in view units to an external format
//
// Available            7.1
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportAreaInView_MAP(MAP,      // MAP object
                                    string,   // File Name To Export
                                    string,   // View to export coordinates in
                                    real,     // Resolution in view units of one pixel (or dummy, will be used if DPI is dummy)
                                    real,     // Resolution in DPI (will override view resolution if not dummy, map page size will be used to determine pixel size of output)
                                    int,      // MAP_EXPORT_BITS
                                    int,      // MAP_EXPORT_METHOD
                                    real,     // Area To Export Min X location in view units
                                    real,     // Area To Export Min Y location in view units
                                    real,     // Area To Export Max X location in view units
                                    real,     // Area To Export Max Y location in view units
                                    string,   // MAP_EXPORT_FORMAT
                                    string);  // Extended Options String (format specific)


  
//-----------------------------------------------------------------------------------------------------------
// ExportAreaRaster_MAP Export an area of a map to a non-geo raster format.
//
// Available            7.1
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportAreaRaster_MAP(MAP,      // MAP object
                                    string,   // File Name To Export
                                    string,   // View to export coordinates in
                                    real,     // Area To Export Min X location in view units
                                    real,     // Area To Export Min Y location in view units
                                    real,     // Area To Export Max X location in view units
                                    real,     // Area To Export Max Y location in view units
                                    int,      // Number of Pixels in X (X or Y should be specified the other should be 0 and computed by export, or both can be 0 and DPI defined)
                                    int,      // Number of Pixels in Y (X or Y should be specified the other should be 0 and computed by export, or both can be 0 and DPI defined)
                                    real,     // Resolution in DPI (will override X and Y if not dummy, map page size will be used to determine pixel size of output)
                                    int,      // MAP_EXPORT_BITS
                                    int,      // MAP_EXPORT_METHOD
                                    string,   // MAP_EXPORT_RASTER_FORMAT
                                    string);  // Extended Options String (format specific)


  
//-----------------------------------------------------------------------------------------------------------
// RenameView_MAP Renames a view in this map.
//
// Available      9.9
//-----------------------------------------------------------------------------------------------------------

[_public] void RenameView_MAP(MAP,      // MAP object
                              string,   // Name of view to rename)
                              string);  // New name of view


  
//-----------------------------------------------------------------------------------------------------------
// RenderBitmap_MAP Render a map to a bitmap.
//
// Available        6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void RenderBitmap_MAP(MAP,      // MAP object
                                string,   // View we exporting units in
                                real,     // MinX
                                real,     // MinY
                                real,     // MaxX
                                real,     // MaxY
                                string,   // File to generate (BMP or PNG, otherwise extension forced to BMP)
                                int);     // Maximum resolution in either direction, -1 for none (will change the pixel density of image if exceeded)


  
//-----------------------------------------------------------------------------------------------------------
// RenderViewBitmap_MAP Render a map view to a bitmap.
//
// Available            9.6
//-----------------------------------------------------------------------------------------------------------

[_public] void RenderViewBitmap_MAP(MAP,      // MAP object
                                    MVIEW,    // MVIEW object
                                    int,      // group (-1 for all)
                                    real,     // MinX
                                    real,     // MinY
                                    real,     // MaxX
                                    real,     // MaxY
                                    string,   // File to generate (BMP or PNG, otherwise extension forced to BMP)
                                    int);     // Maximum resolution in either direction, -1 for none (will change the pixel density of image if exceeded)



//===========================================================================================================
//
// 3D View Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// CreateLinked3DView_MAP Create a 3D View in this map that is linked to a MVIEW in a 3D View file.
//
// Available              9.2
//-----------------------------------------------------------------------------------------------------------

[_public] void CreateLinked3DView_MAP(MAP,      // MAP Object
                                      MVIEW,    // 3DV's 3D MVIEW
                                      string,   // New view name
                                      real,     // X minimum in mm
                                      real,     // Y minimun in mm
                                      real,     // X maximum in mm
                                      real);    // Y maximum in mm



//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// AGGList_MAP Get a list of all aggregates in this map.
//
// Notes       List items are returned as view/agg/layer.
//             The layer name is optional
//
// See also    LST class.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void AGGList_MAP(MAP,   // MAP Handle
                           LST,   // List to hold the views (allow up to 96 characters)
                           int);  // 0 - view/agg only 1 - view/agg/layer


  
//-----------------------------------------------------------------------------------------------------------
// AGGListEx_MAP Get a list of aggregates in this map based on a mode
//
// Notes         List items are returned as view/agg/layer.
//               The layer name is optional
//
// See also      LST class.
//
// Available     5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void AGGListEx_MAP(MAP,   // MAP Handle
                             LST,   // List to hold the views (allow up to 96 characters)
                             int,   // 0 - view/agg only 1 - view/agg/layer
                             int);  // MAP_LIST_MODE


  
//-----------------------------------------------------------------------------------------------------------
// Clean_MAP Clean up empty groups in all views in map.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Clean_MAP(MAP);  // MAP Handle


  
//-----------------------------------------------------------------------------------------------------------
// DeleteEmptyGroups_MAP Remove empty groups in the map, do not delete empty views.
//
// Available             2022.1
//-----------------------------------------------------------------------------------------------------------

[_public] void DeleteEmptyGroups_MAP(MAP);  // MAP Handle


  
//-----------------------------------------------------------------------------------------------------------
// Commit_MAP Commit any changes to a map.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Commit_MAP(MAP);  // Map


  
//-----------------------------------------------------------------------------------------------------------
// CopyMapToView_MAP Copy entire map into one view in output map.
//
// Available         5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] void CopyMapToView_MAP(MAP,      // Source MAP object
                                 string,   // Destination MAP name
                                 string);  // Name of View


  
//-----------------------------------------------------------------------------------------------------------
// CRCMap_MAP Generate an XML CRC of a MAP
//
// Available  6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void CRCMap_MAP(MAP,       // MAP object
                          var int,   // CRC returned
                          string);   // Name of xml to generate (.zip added)


  
//-----------------------------------------------------------------------------------------------------------
// Create_MAP Create a MAP.
//
// Returns    MAP Object
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] MAP Create_MAP(string,   // MAP file name
                         int);     // MAP_OPEN


  
//-----------------------------------------------------------------------------------------------------------
// Current_MAP This method returns the Current map opened.
//
// Returns     MAP Object
//
// Notes       If there is no current map, and running interactively,
//             the user is prompted to open a map.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] MAP Current_MAP();


  
//-----------------------------------------------------------------------------------------------------------
// DeleteView_MAP Deletes a view in this map.
//
// Notes          If the view does not exist, nothing happens.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DeleteView_MAP(MAP,      // MAP Handle
                              string);  // View Name to delete


  
//-----------------------------------------------------------------------------------------------------------
// Destroy_MAP Destroy the MAP handle.
//
// Notes       All changes to the map will be committed.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Destroy_MAP(MAP);  // MAP Handle


  
//-----------------------------------------------------------------------------------------------------------
// Discard_MAP Discard all changes made to the map.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Discard_MAP(MAP);  // Map


  
//-----------------------------------------------------------------------------------------------------------
// DupMap_MAP Duplicate copy of current map.
//
// Notes      Before version 6.2 text in maps were displayed with a character set
//            defining how characters above ASCII 127 would be displayed. 6.2 introduced
//            Unicode in the core montaj engine that eliminated the need for such a setting and
//            greatly increased the number of symbols that can be used. The only caveat
//            of the new system is that text may appear corrupted (especially with GFN fonts) in
//            versions prior to 6.2 that render maps created in version 6.2 and later.
//            The constant DUPMAP_COPY_PRE62 provides a way to create maps that can be
//            distributed to versions prior to 6.2.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DupMap_MAP(MAP,   // Source MAP object
                          MAP,   // Destination MAP object
                          int);  // DUPMAP


  
//-----------------------------------------------------------------------------------------------------------
// GetLPT_MAP Get the LPT Object of a MAP.
//
// Returns    LPT Object
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] LPT GetLPT_MAP(MAP);  // MAP Handle


  
//-----------------------------------------------------------------------------------------------------------
// GetMapSize_MAP Get the size of the Map.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetMapSize_MAP(MAP,        // MAP Handle
                              var real,   // X minimum in mm
                              var real,   // Y minimun in mm
                              var real,   // X maximum in mm
                              var real);  // Y maximum in mm


  
//-----------------------------------------------------------------------------------------------------------
// GetMETA_MAP Get the map's META
//
// Returns     META Object
//
// Notes       If the map has no META, an empty META will be created.
//
// Available   5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] META GetMETA_MAP(MAP);  // MAP object


  
//-----------------------------------------------------------------------------------------------------------
// GetREG_MAP Get the map's REG
//
// Returns    REG Object
//
// Notes      If the map has no REG, an empty REG will be created.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] REG GetREG_MAP(MAP);  // MAP object


  
//-----------------------------------------------------------------------------------------------------------
// GroupList_MAP Get a list of all views/groups in this map.
//
// Notes         Returns all groups in the form "ViewName\GroupName"
//               To get a LST of groups in a specific map view, use
//               the iListGroups_MVIEW function.
//
// See also      LST class.
//               iListGroups_MVIEW
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GroupList_MAP(MAP,   // MAP Handle
                             LST);  // List to hold the view/groups.  Names may be up to 2080 characters in length.


  
//-----------------------------------------------------------------------------------------------------------
// GroupListEx_MAP Get a list of views/groups in this map for this mode
//
// See also        LST class.
//
// Available       5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void GroupListEx_MAP(MAP,   // MAP Handle
                               LST,   // List to hold the views.  View names may be up to 2080 characters in length.
                               int);  // MAP_LIST_MODE


  
//-----------------------------------------------------------------------------------------------------------
// IDuplicateView_MAP Duplicate an entire view
//
// Available          5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void IDuplicateView_MAP(MAP,          // MAP object
                                  string,       // Name of view to duplicate
                                  var string,   // Name of new view created (pass in "" and the new name is returned)
                                  int,          // Length of view name buffer
                                  int);         // Copy all groups
#define DuplicateView_MAP(map, view, n_view, copy) IDuplicateView_MAP(map, view, n_view, sizeof(n_view), copy)


  
//-----------------------------------------------------------------------------------------------------------
// iExistView_MAP Checks to see if a view exists.
//
// Returns        0 view does not exist.
//                1 view exists.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iExistView_MAP(MAP,      // MAP handle
                             string);  // View name


  
//-----------------------------------------------------------------------------------------------------------
// IGetClassName_MAP Get a class name.
//
// Notes             Map class names are intended to be used to record the
//                   names of certain view classes in the map, such as the
//                   "Data", "Base" and "Section" views.
//                   
//                   There can only be one name for each class, but it can
//                   be changed.  This lets the "Data" class name change,
//                   for example, so plotting can select which class to plot
//                   to.
//                   
//                   If a name is not set, the class name is set and
//                   returned.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetClassName_MAP(MAP,          // MAP handle
                                 string,       // Class
                                 var string,   // Name
                                 int);         // Maximum name length
#define GetClassName_MAP(map, cl, name) IGetClassName_MAP(map, cl, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// IGetFileName_MAP Get the name of the map.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetFileName_MAP(MAP,          // MAP Handle
                                var string,   // Returned map file name
                                int);         // Size of map name string
#define GetFileName_MAP(map, name) IGetFileName_MAP(map, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// IGetMapName_MAP Get the Map Name of the Map.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetMapName_MAP(MAP,          // MAP Handle
                               var string,   // Returned map name
                               int);         // Size of map name string
#define GetMapName_MAP(map, name) IGetMapName_MAP(map, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// iPackedFiles_MAP The number of packed files in the current map.
//
// Returns          The number of packed files in map.
//
// Available        6.4
//-----------------------------------------------------------------------------------------------------------

[_public] int iPackedFiles_MAP(MAP);  // MAP object


  
//-----------------------------------------------------------------------------------------------------------
// IUnPackFilesEx_MAP UnPack all files from map to workspace.
//
// Notes              The option to force will simply overwrite the files.
//                    When the non-force option is in effect the method will
//                    stop if any files are going to be overwritting. These
//                    file names will end up in the Errors string.
//
// Available          6.4
//-----------------------------------------------------------------------------------------------------------

[_public] void IUnPackFilesEx_MAP(MAP,          // MAP object
                                  int,          // (0 - Produce errors, 1 - Force overwrites)
                                  var string,   // List of files that are problematic returned
                                  int);         // Length of Error name buffer
#define UnPackFilesEx_MAP(map, force, errors) IUnPackFilesEx_MAP(map, force, errors, sizeof(errors))


  
//-----------------------------------------------------------------------------------------------------------
// IUnPackFilesToFolder_MAP UnPack all files from map to workspace.
//
// Available                7.3
//-----------------------------------------------------------------------------------------------------------

[_public] void IUnPackFilesToFolder_MAP(MAP,          // MAP object
                                        int,          // (0 - Produce errors, 1 - Force overwrites)
                                        string,       // Directory to place unpacked files in.
                                        var string,   // List of files that are problematic returned
                                        int);         // Length of Error name buffer
#define UnPackFilesToFolder_MAP(map, force, dir, errors) IUnPackFilesToFolder_MAP(map, force, dir, errors, sizeof(errors))


  
//-----------------------------------------------------------------------------------------------------------
// PackFiles_MAP Pack all files in the map so that it can be mailed.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void PackFiles_MAP(MAP);  // MAP object


  
//-----------------------------------------------------------------------------------------------------------
// Render_MAP Render a map to file/device.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Render_MAP(MAP,      // MAP Handle
                          string);  // Plot file/device


  
//-----------------------------------------------------------------------------------------------------------
// ResizeAll_MAP Resize a map to the extents of all views.
//
// Notes         This is the same as ResizeAllEx_MAP with
//               MVIEW_EXTENT_CLIP.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ResizeAll_MAP(MAP);  // MAP Handle


  
//-----------------------------------------------------------------------------------------------------------
// ResizeAllEx_MAP ResizeAll_MAP with selection of view extent type selection.
//
// Notes           MVIEW_EXTENT_VISIBLE gives a more "reasonable" map size, and won't
//                 clip off labels outside a graph window.
//
// Available       6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void ResizeAllEx_MAP(MAP,   // MAP Handle
                               int);  // MVIEW_EXTENT


  
//-----------------------------------------------------------------------------------------------------------
// rGetMapScale_MAP Get the current map scale
//
// Returns          The current map scale
//
// Notes            If there is a "Data" view, the scale is derived from
//                  this view.
//                  
//                  If their is no data view, the scale is derived
//                  from the first view that is not scaled in mm.
//                  otherwise, the scale is 1000 (mm).
//                  
//                  All views must be closed, or open read-only.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetMapScale_MAP(MAP);  // MAP Handle


  
//-----------------------------------------------------------------------------------------------------------
// SaveAsMXD_MAP Save as ArcGIS MXD
//
// Available     7.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SaveAsMXD_MAP(MAP,      // MAP Handle
                               string);  // Geosoft map file name


  
//-----------------------------------------------------------------------------------------------------------
// SetClassName_MAP Set a class name.
//
// Notes            Map class names are intended to be used to record the
//                  names of certain view classes in the map, such as the
//                  "Data", "Base" and "Section" views.
//                  
//                  There can only be one name for each class, but it can
//                  be changed.  This lets the "Data" class name change,
//                  for example, so plotting can select which class to plot
//                  to.
//                  
//                  If a name is not set, the class name is set and
//                  returned.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetClassName_MAP(MAP,      // MAP handle
                                string,   // Class
                                string);  // Name


  
//-----------------------------------------------------------------------------------------------------------
// SetCurrent_MAP Sets the current map to this map.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetCurrent_MAP(MAP);  // MAP object


  
//-----------------------------------------------------------------------------------------------------------
// SetMapName_MAP Set the Map Name of the Map.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetMapName_MAP(MAP,      // MAP Handle
                              string);  // Map Name


  
//-----------------------------------------------------------------------------------------------------------
// SetMapScale_MAP Set the current map scale
//
// Notes           All views in the map will be resized for the new
//                 map scale.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetMapScale_MAP(MAP,    // MAP object
                               real);  // New map scale (must be > 0).


  
//-----------------------------------------------------------------------------------------------------------
// SetMapSize_MAP Set the size of the Map.
//
// Notes          The map size is area on the MAP that contains graphics
//                to be plotted.  The area can be bigger or smaller that
//                the current views.  In the absense of any other information
//                only the area defined by the map size is plotted.
//
// See also       SetSizeViews_MAP
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetMapSize_MAP(MAP,    // MAP Handle
                              real,   // X minimum in mm
                              real,   // Y minimun in mm
                              real,   // X maximum in mm
                              real);  // Y maximum in mm


  
//-----------------------------------------------------------------------------------------------------------
// SetMETA_MAP Write a META to a map.
//
// Available   5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] void SetMETA_MAP(MAP,    // MAP object
                           META);  // META to write to map


  
//-----------------------------------------------------------------------------------------------------------
// SetREG_MAP Write a REG to a map.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetREG_MAP(MAP,   // MAP object
                          REG);  // REG to write to map


  
//-----------------------------------------------------------------------------------------------------------
// Sync_MAP Syncronize the Metadata
//
// Available 7.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Sync_MAP(string);  // Geosoft map file name


  
//-----------------------------------------------------------------------------------------------------------
// UnPackFiles_MAP UnPack all files from map to workspace.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void UnPackFiles_MAP(MAP);  // MAP object


  
//-----------------------------------------------------------------------------------------------------------
// ViewList_MAP Get a list of all views in this map.
//
// See also     LST class.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ViewList_MAP(MAP,   // MAP Handle
                            LST);  // List to hold the views.  View names may be up to 2080 characters in length.


  
//-----------------------------------------------------------------------------------------------------------
// ViewListEx_MAP Get a list of views of certain types in this map
//
// Available      5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ViewListEx_MAP(MAP,   // MAP Handle
                              LST,   // List to hold the views.  View names may be up to 2080 characters in length.
                              int);  // MAP_LIST_MODE


  
//-----------------------------------------------------------------------------------------------------------
// GetDataProj_MAP Get the projection type of the Data view of a map.
//
// Returns         Project type as an integer
//
// Available       8.3
//-----------------------------------------------------------------------------------------------------------

[_public] int GetDataProj_MAP(MAP);  // MAP Handle


  
//-----------------------------------------------------------------------------------------------------------
// DatasetFilePathList_MAP Get a list of all dataset file paths in this map.
//
// See also                LST class.
//
// Available               2022.1
//-----------------------------------------------------------------------------------------------------------

[_public] void DatasetFilePathList_MAP(MAP,   // MAP Handle
                                       LST);  // List to hold the paths.  Paths may be up to 2080 characters in length.





//*** endblock Generated


#endif
