//*** extends 'class_empty.gxh'

#ifndef HLST_GXH_DEFINED
#define HLST_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class LST
//
//-----------------------------------------------------------------------------------------------------------
//
// The LST class is used to create and retrieve lists,
// and to perform specific actions on lists, including
// retrieving list items, sorting lists and adding or
// removing list items.
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// LST_ITEM Definitions
//
// LST data access
//
// LST_ITEM_NAME
// Access the "Name" part of the LST item.
//
// LST_ITEM_VALUE
// Access the "Value" part of the LST item.
//
//===========================================================================================================


#define LST_ITEM_NAME 0
#define LST_ITEM_VALUE 1





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// AddItem_LST Adds an item to the end of the list.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void AddItem_LST(LST,      // LST Handle
                           string,   // Name of the Item
                           string);  // Value of the Item


  
//-----------------------------------------------------------------------------------------------------------
// AddSymbItem_LST Adds a channel/line/blob name and symbol to a list.
//
// Notes           A number of DB functions return LSTs with the channel
//                 or line name in the "Name" part of a LST, and the
//                 handle (DB_SYMB) in the value part. This function lets
//                 you quickly add a new item without the need of coverting
//                 the handle into a string value.
//
// Available       6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void AddSymbItem_LST(LST,       // LST Handle
                               string,    // Name of the channel, line or blob symbol
                               DB_SYMB);  // Symbol handle


  
//-----------------------------------------------------------------------------------------------------------
// AddUniqueItem_LST Adds a unique item to the end of the list.
//
// Notes             Existing items that match the name are first removed.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void AddUniqueItem_LST(LST,      // LST Handle
                                 string,   // Name of the Item
                                 string);  // Value of the Item


  
//-----------------------------------------------------------------------------------------------------------
// Append_LST Add the items in one list to another list.
//
// Notes      Item names and values are added using "AddUniqueItem_LST",
//            so that existing items with the same name are replaced, and if
//            items are duplicated in the appended LST, the last one will be
//            the one to remain after the process is complete.
//
// Available  6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void Append_LST(LST,   // List to modify
                          LST);  // List to append to the above LST.


  
//-----------------------------------------------------------------------------------------------------------
// AssayChannel_LST Create a LST of assay channel mask strings from file.
//
// Returns          LST Object
//
// Notes            Searches the local directory, then user\etc, then \etc to see
//                  if the file "assaylist.csv" exists.
//                  The file contains strings of those channel names which are
//                  to be interpreted as assay channels for geochemical processes.
//                  Items can be on the same line, separated by commas, or on
//                  separate lines (and combinations of both).
//                  If this function is used in combination with the lFindItemMask_LST
//                  function, then you can use mask-strings such as "*ppm"
//                  The following is a sample file:
//                  
//                  *ppm, *(ppm), *PPM, *(PPM), FeCl, MnO2
//                  "Fe %"
//                  FeO
//                  
//                  If the file is not found, or if no items are parsed, the list
//                  is returned with zero size.
//                  
//                  See the "assaylist.csv" file in the oasismontaj\etc directory
//                  for more details.
//
// See also         iFindItemMask_LST
//
// Available        5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] LST AssayChannel_LST();


  
//-----------------------------------------------------------------------------------------------------------
// Clear_LST Clear a list object.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Clear_LST(LST);  // LST Handle


  
//-----------------------------------------------------------------------------------------------------------
// ConvertFromCSVString_LST Load a LST with items from a string.
//
// Notes                    Items in the input buffer must be separated with
//                          commas.
//                          Both the Name and Value in the list are set to the
//                          item.
//
// Available                5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] void ConvertFromCSVString_LST(LST,      // LST to add items to
                                        string);  // Comma separated items


  
//-----------------------------------------------------------------------------------------------------------
// Copy_LST Copy one LST object to another.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Copy_LST(LST,   // Destination List to copy to
                        LST);  // Source List to Copy from


  
//-----------------------------------------------------------------------------------------------------------
// Create_LST creates a user controllable list. The list
//            is empty when created.
//
// Returns    Handle to the List Object.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] LST Create_LST(int);  // Width of the list to make. This number should be large enough for both the item name and the item value.  Must be > 2 and <= 4096.


  
//-----------------------------------------------------------------------------------------------------------
// CreateS_LST Create LST from serialized source.
//
// Returns     LST object
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] LST CreateS_LST(BF);  //


  
//-----------------------------------------------------------------------------------------------------------
// DelItem_LST Removes an item from the list. All items below
//             it are shifted up one.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DelItem_LST(LST,   // LST Handle
                           int);  // Item Number to Delete


  
//-----------------------------------------------------------------------------------------------------------
// Destroy_LST Destroys a list object.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Destroy_LST(LST);  // LST Handle


  
//-----------------------------------------------------------------------------------------------------------
// FindItems_LST Searches a LST for items in a second LST, returns indices of those found.
//
// Notes         This is a much more efficient way of determining if items in
//               one LST are found in a second, than by calling iFindItem_LST
//               repeatedly in a loop.
//               The returned INT VV contains the same number of items as
//               the "search items" LST, and contains -1 for items where the
//               value is not found, and the index of items that are found.
//               Comparisons are case-tolerant.
//
// Available     6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void FindItems_LST(LST,   // LST in which to search
                             int,   // LST_ITEM data to do the search on
                             LST,   // Items to search for
                             VV);   // GS_LONG VV of returned indices into the first LST.


  
//-----------------------------------------------------------------------------------------------------------
// GtItem_LST This places the specified item into the buffer provided.
//
// Notes      If item number is not in the list, the buffer will be "".
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GtItem_LST(LST,          // List object
                          int,          // LST_ITEM data to retrieve
                          int,          // Item Number to Get
                          var string,   // Buffer to Place Item Into
                          int);         // Size of the Buffer
#define GetItem_LST(lst, type, item, buff) GtItem_LST(lst, type, item, buff, sizeof(buff))


  
//-----------------------------------------------------------------------------------------------------------
// GtSymbItem_LST Returns a channel/line/blob name and symbol from a list.
//
// Notes          A number of DB functions return LSTs with the channel
//                or line name in the "Name" part of a LST, and the
//                handle (DB_SYMB) in the value part. This function lets
//                you quickly retrieve both the name and symbol handle
//                for a given item, which needing to convert between types.
//
// Available      6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void GtSymbItem_LST(LST,           // LST Handle
                              int,           // Item number to get
                              var string,    // Buffer to Place Symbol name into
                              int,           // Size of the buffer
                              var DB_SYMB);  // Symbol handle
#define GetSymbItem_LST(lst, item, name, symb) GtSymbItem_LST(lst, item, name, sizeof(name), symb)


  
//-----------------------------------------------------------------------------------------------------------
// IConvertToCSVString_LST Load a string with names from a LST.
//
// Notes                   The list name values are put into a string,
//                         items separated by commas.
//
// Available               5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] void IConvertToCSVString_LST(LST,          // LST to get items from
                                       var string,   // Buffer to add items to
                                       int);         // Size of buffer
#define ConvertToCSVString_LST(lst, buff) IConvertToCSVString_LST(lst, buff, sizeof(buff))


  
//-----------------------------------------------------------------------------------------------------------
// iFindItem_LST Searches the list for a specified item.
//
// Returns       x  - Item Number
//               -1 - Not Found
//
// Notes         Comparisons are case-tolerant.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iFindItem_LST(LST,      // LST Handle
                            int,      // LST_ITEM data to do the search on
                            string);  // String to Search For


  
//-----------------------------------------------------------------------------------------------------------
// iFindItemMask_LST Searches the list for a specified item, list contains masks.
//
// Returns           x  - Item Number
//                   -1 - Not Found
//
// Notes             Comparsions are case-intolerant (unlike iFindItem_LST).
//                   This means items in the list such as "*(ppm)" will be
//                   found if the input search string is "Ni (ppm)" or "Ni(ppm)",
//                   but not if it is "Ni (PPM)", so you should include
//                   both "*ppm*" and "*PPM*".
//                   
//                   It is NOT the input string that should be the mask, but
//                   the LST items themselves
//                   
//                   This function was designed originally for geochemical
//                   processes in order to identify if a given channel name
//                   indicates that the channel should be given the "Assay" class.
//
// See also          AssayChannel_LST
//
// Available         5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] int iFindItemMask_LST(LST,      // LST Handle
                                int,      // LST_ITEM data to search
                                string);  // String to try LST mask items on Search For


  
//-----------------------------------------------------------------------------------------------------------
// iGetInt_LST Get an integer item.
//
// Returns     Integer, iDUMMY if conversion fails or string is empty.
//
// Available   5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetInt_LST(LST,   // List object
                          int,   // LST_ITEM data to retrieve
                          int);  // Item Number to Get


  
//-----------------------------------------------------------------------------------------------------------
// InsertItem_LST Adds an item at a given location in the list.
//
// Notes          Index must be 0 >= index >= list size.
//                Items above the list index are shifted up one index value.
//
// Available      5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void InsertItem_LST(LST,      // LST Handle
                              int,      // Item index
                              string,   // Name of the Item
                              string);  // Value of the Item


  
//-----------------------------------------------------------------------------------------------------------
// iSize_LST Get the number of items in the list.
//
// Returns   x - Number of items in the list.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iSize_LST(LST);  // LST Handle


  
//-----------------------------------------------------------------------------------------------------------
// LoadCSV_LST Load a list with data from a CSV file
//
// Notes       Both the Item and Value fields must be specified.
//             The CSV file must be comma delimited, and have
//             a header line with the field names.
//             Leading and trailing spaces are removed in the names and values.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LoadCSV_LST(LST,      // LST Handle
                           string,   // The CSV file
                           string,   // Column label for the item name
                           string);  // Column label for the item value


  
//-----------------------------------------------------------------------------------------------------------
// LoadFile_LST Set up a list from a list file.
//
// Notes        A list file is an ASCII file that contains list entries.
//              Each line for the file contains a list item name and an
//              optional list item value.  The name and value must be
//              delimited by a space, tab or comma.
//              If the item name or value contains spaces, tabs or commas,
//              it must be contined in quotes.
//              blank lines and lines that begin with a '/' character are
//              ignored.
//              
//              The default extension is .lst.  If the file cannot
//              be found in the local directory, the GEOSOFT\etc directory
//              is searched.
//              If it cannot be found, the list will be
//              empty.  Not finding a file is not an error.
//
// Available    6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void LoadFile_LST(LST,      // LST Handle
                            string);  // Name of the file


  
//-----------------------------------------------------------------------------------------------------------
// Resource_LST Load a GX List Resource into this list object.  The
//              entries are placed at the end of the list and are not
//              sorted.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Resource_LST(LST,      // LST Object
                            string);  // Name of the Resource


  
//-----------------------------------------------------------------------------------------------------------
// rGetReal_LST Get a real item.
//
// Returns      Real, rDUMMY if conversion fails or string is empty.
//
// Available    5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetReal_LST(LST,   // List object
                            int,   // LST_ITEM data to retrieve
                            int);  // Item Number to Get


  
//-----------------------------------------------------------------------------------------------------------
// SaveFile_LST Save a list to a file.
//
// Notes        A list file is an ASCII file that contains list entries.
//              Each line for the file contains a list item name and an
//              optional list item value.  The name and value must be
//              delimited by a space, tab or comma.
//              If the item name or value contains spaces, tabs or commas,
//              it must be contined in quotes.
//              blank lines and lines that begin with a '/' character are
//              ignored.
//              
//              The default extension is .lst.  If the file has a full path
//              it will be created as specified.  Otherwise we look for the
//              file in the local then the GEOSOFT\etc directory.  If the file
//              does not exist it will be created in the GEOSOFT\etc directory.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SaveFile_LST(LST,      // LST Handle
                            string);  // Name of the file


  
//-----------------------------------------------------------------------------------------------------------
// SelectCSVStringItems_LST Load a LST with items from a second LST found in a CSV string.
//
// Notes                    Items in the input string must be separated with
//                          commas. Parsing uses the sCommaTokens_GS function.
//                          Both the name and value of the input LST items whose
//                          name matches an item in the input string are
//                          copied to the output LST.
//                          Items are copied in the same order they appear in the
//                          input string. Items in the string not found in the input LST
//                          are ignored, and no error is registered.
//                          Item matches are case-tolerant.
//
// Available                5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] void SelectCSVStringItems_LST(LST,      // LST with items to select from
                                        string,   // Comma separated item names
                                        LST);     // LST to add selected items to


  
//-----------------------------------------------------------------------------------------------------------
// Serial_LST Serialize LST to a BF.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Serial_LST(LST,   //
                          BF);   //


  
//-----------------------------------------------------------------------------------------------------------
// SetItem_LST Place an item at a specified point in the LST.
//
// Notes       The existing item at the given index will be replaced.
//
// Available   5.1.5
//-----------------------------------------------------------------------------------------------------------

[_public] void SetItem_LST(LST,      // List object
                           int,      // LST_ITEM data to insert
                           int,      // Item Number to Set
                           string);  // Item to Set


  
//-----------------------------------------------------------------------------------------------------------
// Sort_LST Sorts a list.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Sort_LST(LST,   // LST Handle
                        int,   // LST_ITEM data to sort on
                        int);  // 0 - Ascending, 1 - Decending



//===========================================================================================================
//
// Deprecated Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// iLoadProj_LST Sets up a list with datum codes and their associated
//               descriptions read from a projection datum file.
//
// Returns       0 - Ok
//               1 - Error
//
// Notes         Was based on the old Mapproj.dtm file. Superseded by the current
//               projection engine.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iLoadProj_LST(LST,      // LST Handle
                            string);  // Name of the projection datum file (*.DTM file)


  
//-----------------------------------------------------------------------------------------------------------
// iLoadProjCodes_LST Sets up a list with datum codes read from a projection
//                    datum file.
//
// Returns            0 - Ok
//                    1 - Error
//
// Notes              Was based on the old Mapproj.dtm file. Superseded by the current
//                    projection engine.
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iLoadProjCodes_LST(LST,      // LST Handle
                                 string);  // Name of the projection datum file (*.DTM file)


  
//-----------------------------------------------------------------------------------------------------------
// MakeREG_LST Make an LST from a REG.
//
// Notes       Was not correctly implemented or used
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void MakeREG_LST(LST,      // LST Handle
                           string,   // Group name in the reg
                           REG);     //





//*** endblock Generated


#endif
