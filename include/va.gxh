//*** extends 'class_empty.gxh'

#ifndef HVA_GXH_DEFINED
#define HVA_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class VA
//
//-----------------------------------------------------------------------------------------------------------
//
// The VA class is the 2-Dimensional analogue to the VV class.
// When displayed in a database, VA objects are displayed graphically
// as profiles, one to a cell, and can also be displayed one column of
// data at a time by specifying an index; e.g. CH[0]. A VA object is
// declared with a fixed number of columns, which cannot be altered.
// The number of rows, however can be changed, in the same way that
// the length of a VV can be changed. Data can be added or extracted
// using VVs, either by row or column.
// 
// A VA is used to store an array of data in which each element may have
// multiple elements.  For example, 256-channel radiometric data can
// be stored in a VA that is 256 elements wide.
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block

#define SetLen_VA(A,B) SetLn_VA(A,B)

//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// VA_AVERAGE Definitions
//
// VA Object to average
//
// VA_AVERAGE_ROWS
// Average the Rows
//
// VA_AVERAGE_COLUMNS
// Average the Columns
//
//===========================================================================================================


#define VA_AVERAGE_ROWS 0
#define VA_AVERAGE_COLUMNS 1


//===========================================================================================================
//
// VA_OBJECT Definitions
//
// VA Object to select
//
// VA_ROW
// Row
//
// VA_COL
// Column
//
//===========================================================================================================


#define VA_ROW 0
#define VA_COL 1





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// AddElevationsVVToDepths_VA Add one VV value to each row of the VA, output true elevation.
//
// Notes                      Adds each value in an input elevation VV to all the values at
//                            the same fid in a depths VA. Includes an option for negative depths down
//                            (e.g. a relative level).
//
// Available                  7.2
//-----------------------------------------------------------------------------------------------------------

[_licensed] void AddElevationsVVToDepths_VA(VA,    // VA handle (modified)
                                            VV,    // Elevations to add
                                            int);  // Use negative VA depths (0:No, 1:Yes)?


  
//-----------------------------------------------------------------------------------------------------------
// Append_VA Appends VAs
//
// Notes     If the VAs have different numbers of columns, the smaller number
//           is used in the copy operation.
//
// Available 5.1.3
//-----------------------------------------------------------------------------------------------------------

[_public] void Append_VA(VA,   //
                         VA);  // VA to append


  
//-----------------------------------------------------------------------------------------------------------
// Average_VA Average elements in a VA by row or column
//
// Notes      The output VV will be dimensioned by the number of
//            rows or columns in the input VV depending on the
//            VA_AVERAGE setting.
//            
//            Dummies are not included in the average.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Average_VA(VA,    // VA to window
                          VV,    // VV in which to place average results
                          int);  // VA_AVERAGE


  
//-----------------------------------------------------------------------------------------------------------
// Copy_VA Copy one VA to another.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Copy_VA(VA,   // destination
                       VA);  // source


  
//-----------------------------------------------------------------------------------------------------------
// Copy2_VA Copy part of a vector into part of another vector.
//
// Notes    1. Unlike Copy_VA destination VA is not reallocated, nor are
//          the dimensions changed. The caller must make any desired changes.
//          
//          2. All VA types are supported and will be converted using
//          Convert_GS if necessary.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Copy2_VA(VA,    // Destination VA
                        int,   // Destination start row
                        int,   // Destination start column
                        VA,    // Source VA (can be the same as Destination)
                        int,   // Source start row
                        int,   // Source start column
                        int,   // Number of rows
                        int);  // Number of columns


  
//-----------------------------------------------------------------------------------------------------------
// Create_VA Create a VA.
//
// Returns   VA Object
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] VA Create_VA(int,   // GEO_VAR
                       int,   // Maximum number of rows in the VA, >= 0
                       int);  // Number of columns in the VA, > 0


  
//-----------------------------------------------------------------------------------------------------------
// CreateExt_VA Create a VA, using one of the GS_TYPES special data types.
//
// Returns      VA, aborts if creation fails
//
// Notes        See Create_VV
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] VA CreateExt_VA(int,   // GS_TYPES
                          int,   // Maximum number of rows in the VA, >= 0
                          int);  // Number of columns in the VA, > 0


  
//-----------------------------------------------------------------------------------------------------------
// CreateVV_VA Create a VA using the data in a VV.
//
// Returns     VA, aborts if creation fails
//
// Notes       See Create_VV
//
// Available   7.2.1
//-----------------------------------------------------------------------------------------------------------

[_public] VA CreateVV_VA(VV,    // VV with the data
                         int,   // # of rows
                         int);  // # of columns


  
//-----------------------------------------------------------------------------------------------------------
// Destroy_VA Destroy a VA.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Destroy_VA(VA);  // VA to destroy.


  
//-----------------------------------------------------------------------------------------------------------
// GetFullVV_VA Get the full VV from the VA.
//
// Returns      VV Object
//
// Notes        No data is copied, this is the handle to the data VV in the VA.
//              The fid start/increment of the VA is passed to the VV at the time
//              of the call.  If a new VA is read, you must call GetFull_VV_VA
//              to get the new fid in the VV.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] VV GetFullVV_VA(VA);  // VA object


  
//-----------------------------------------------------------------------------------------------------------
// GetVV_VA Get a row or column of data as a VV from an array.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetVV_VA(VA,    // VA handle
                        int,   // Row or Column # (0 is first)
                        int,   // VA_OBJECT
                        VV);   // VV in which to place data


  
//-----------------------------------------------------------------------------------------------------------
// iCol_VA Return number of columns in VA
//
// Returns Columns in VA
//
// Notes   iLen_VA returns the number of rows.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iCol_VA(VA);  // VA object


  
//-----------------------------------------------------------------------------------------------------------
// iGetInt_VA Get an integer element from a VA.
//
// Returns    Element wanted, rDUMMY, iDUMMY or blank string
//            if the value is dummy or outside of the range of data.
//
// Notes      Type conversions are performed if necessary.  Dummy values
//            are converted to "*" string.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetInt_VA(VA,    // VA, element want
                         int,   // Row
                         int);  // Column


  
//-----------------------------------------------------------------------------------------------------------
// IGetString_VA Get a string element from a VA.
//
// Notes         Returns element wanted, rDUMMY, iDUMMY or blank string
//               if the value is dummy or outside of the range of data.
//               
//               Type conversions are performed if necessary.  Dummy values
//               are converted to "*" string.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetString_VA(VA,           // VA, element wanted
                             int,          // Row
                             int,          // Column
                             var string,   // String in which to place element
                             int);         // Maximum length of the string
#define GetString_VA(va, row, col, str_val) IGetString_VA(va, row, col, str_val, sizeof(str_val))


  
//-----------------------------------------------------------------------------------------------------------
// iLen_VA Return length (number of rows) in a VA.
//
// Returns Length of VA
//
// Notes   iCol_VA returns the number of columns.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iLen_VA(VA);  // VA object


  
//-----------------------------------------------------------------------------------------------------------
// IndexOrder_VA Reorder a VA based on an index VV
//
// Notes         Given a row index VV (of type INT), this method reorders a
//               VA. Please make sure that the index holds valid information.
//
// Available     5.1
//-----------------------------------------------------------------------------------------------------------

[_public] void IndexOrder_VA(VV,   // Index VV of type INT
                             VA);  // VA to order


  
//-----------------------------------------------------------------------------------------------------------
// LookupIndex_VA Lookup a VA from another VA using an index VV.
//
// Notes          Fractional values in the VV will interpolate between the value
//                at the whole integer value and the next whole integer, dummy
//                if outside the VA.
//
// Available      6.4.2
//-----------------------------------------------------------------------------------------------------------

[_licensed] void LookupIndex_VA(VA,   // Original Data VA (numeric)
                                VV,   // Index VV of REAL
                                VA);  // VA to output results (same type as Data VA)


  
//-----------------------------------------------------------------------------------------------------------
// Range_VA Computes the minimum and maximum range of the data, in doubles,
//          in a vector while ignoring dummies, for a range of columns and rows.
//
// Available 9.6
//-----------------------------------------------------------------------------------------------------------

[_public] void Range_VA(VA,         // VA object
                        int,        // Starting row (0 to nRows-1)
                        int,        // Starting column (0 to nColumns-1
                        int,        // Number of rows (-1 for all from start)
                        int,        // Number of columns (-1 for all from start)
                        var real,   // Minimum value - returned
                        var real);  // Maximum value - returned


  
//-----------------------------------------------------------------------------------------------------------
// RangeDouble_VA Computes the minimum and maximum range of the data, in doubles,
//                in a vector while ignoring dummies.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void RangeDouble_VA(VA,         // VA object
                              var real,   // Minimum value - returned
                              var real);  // Maximum value - returned


  
//-----------------------------------------------------------------------------------------------------------
// RangeColumns_VA Computes the minimum and maximum range of the data for individual columns, in doubles,
//                 for a range of columns and rows.
//
// Available       9.6
//-----------------------------------------------------------------------------------------------------------

[_public] void RangeColumns_VA(VA,    // VA object
                               int,   // Starting row (0 to nRows-1)
                               int,   // Starting column (0 to nColumns-1
                               int,   // Number of rows (-1 for all from start)
                               int,   // Number of columns (-1 for all from start)
                               VV,    // Minimum values returned:`VV` object - GS_REAL
                               VV);   // Maximum values returned:`VV` object - GS_REAL


  
//-----------------------------------------------------------------------------------------------------------
// ReFid_VA Re-sample a VA to a new fid start/icrement
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ReFid_VA(VA,     // VV to resample
                        real,   // New fid start
                        real,   // New fid increment
                        int);   // New length


  
//-----------------------------------------------------------------------------------------------------------
// Reverse_VA Reverses the order of the rows in a VA.
//
// Available  5.1.5
//-----------------------------------------------------------------------------------------------------------

[_public] void Reverse_VA(VA);  // VA to reverse


  
//-----------------------------------------------------------------------------------------------------------
// rGetFidIncr_VA Gets the Fiducial increment from a VA
//
// Returns        Fiducial increment of the VA.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetFidIncr_VA(VA);  //


  
//-----------------------------------------------------------------------------------------------------------
// rGetFidStart_VA Gets the Fiducial start from a VA
//
// Returns         Fiducial start of the VA.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetFidStart_VA(VA);  //


  
//-----------------------------------------------------------------------------------------------------------
// rGetReal_VA Get a real element from a VA.
//
// Returns     Element wanted, rDUMMY, iDUMMY or blank string
//             if the value is dummy or outside of the range of data.
//
// Notes       Type conversions are performed if necessary.  Dummy values
//             are converted to "*" string.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetReal_VA(VA,    // VA, element want
                           int,   // Row
                           int);  // Column


  
//-----------------------------------------------------------------------------------------------------------
// SetFidIncr_VA Sets the Fiducial increment of a VA
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetFidIncr_VA(VA,     // VA to set fiducial increment of
                             real);  // New increment


  
//-----------------------------------------------------------------------------------------------------------
// SetFidStart_VA Sets the Fiducial start of a VA
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetFidStart_VA(VA,     // VA to set fiducial start of
                              real);  // New start


  
//-----------------------------------------------------------------------------------------------------------
// SetInt_VA Set an integer element in a VA.
//
// Notes     Element being set cannot be < 0.
//           If the element is > current VA length, the VA length is
//           increased.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetInt_VA(VA,    // VA, element want
                         int,   // Row
                         int,   // Column
                         int);  // Value to set


  
//-----------------------------------------------------------------------------------------------------------
// SetIntN_VA Set N rows of integer elements in a VA.
//
// Notes      Element row starting index being set cannot be < 0.
//            If the element row index is >= current VA length, the VA length is
//            increased.
//
// Available  2023.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetIntN_VA(VA,    //
                          int,   // Start row index (>= 0)
                          int,   // # of rows to set (-1 sets all rows to end)
                          int);  // Value to set


  
//-----------------------------------------------------------------------------------------------------------
// SetLn_VA Set the length (number of rows) of the VA
//
// Notes    The number of columns in a VA is fixed, and cannot be
//          altered once the VA is created.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetLn_VA(VA,    //
                        int);  // Length


  
//-----------------------------------------------------------------------------------------------------------
// SetReal_VA Set a real element in a VA.
//
// Notes      Element being set cannot be < 0.
//            If the element is > current VA length, the VA length is
//            increased.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetReal_VA(VA,     // VA, element want
                          int,    // Row
                          int,    // Column
                          real);  // Value to set


  
//-----------------------------------------------------------------------------------------------------------
// SetString_VA Set a string element in a VA.
//
// Notes        Element being set cannot be < 0.
//              If the element is > current VA length, the VA length is
//              increased.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetString_VA(VA,       // VA, element wanted
                            int,      // Row
                            int,      // Column
                            string);  // String to set


  
//-----------------------------------------------------------------------------------------------------------
// SetVV_VA Set a row or column of data in an array from a VV.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetVV_VA(VA,    // VA handle
                        int,   // Row or Column # (0 is first)
                        int,   // VA_OBJECT
                        VV);   // VV from which to get data


  
//-----------------------------------------------------------------------------------------------------------
// Trans_VA Translate (VA + base ) * mult
//
// Notes    Supports all VA types using an internal double VV.
//
// Available 7.2
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Trans_VA(VA,     // VA handle
                          real,   // Base value
                          real);  // Mult value


  
//-----------------------------------------------------------------------------------------------------------
// Window_VA Window a VA to a VV based in intergral frame
//
// Notes     The defined window must be within the VA element dimensions.
//           The windowed result will be the simple sum of all
//           values in the window.
//           If any values are dummy, the result will be dummy.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Window_VA(VA,    // VA to window
                         int,   // First element in the window
                         int,   // Number of elements in the window
                         VV);   // VV in which to place results


  
//-----------------------------------------------------------------------------------------------------------
// Window2_VA Window a VA to a VV based on fractional frame
//
// Notes      The defined window must be within the VA element dimensions.
//            The windowed result will be the simple sum of all
//            values in the window.
//            If any values are dummy, the result will be dummy.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Window2_VA(VA,     // VA to window
                          real,   // Start point (from 0.0)
                          real,   // End point (< VA elements - 1.0)
                          VV);    // VV in which to place results


  
//-----------------------------------------------------------------------------------------------------------
// iCheckForRepeating_VA Window a VA to a VV based on fractional frame
//
// Returns               1 if rows repeat, 0 if not.
//
// Notes                 Returns 1 if all rows contain values which match the input values.
//                       Optionally, row values can be offset by amounts specified with a secondary VV.
//                       This function was designed to detect "depth" array channels, including those which might
//                       have been offset with topography on each row.
//                       An absolute tolerance can be specified to ignore numerical noise.
//
// Available             8.2
//-----------------------------------------------------------------------------------------------------------

[_licensed] int iCheckForRepeating_VA(VA,     // VA to check
                                      VV,     // Items to test for repeats (length equal to the number of columns in the VA)
                                      int,    // If set to 1, subtract single values in the following VV from every array row item before testing (e.g. an elevation value)
                                      VV,     // Values to subtract from each row before doing the comparison test (length equal to the length of the VA). Can be VV_NULL (-1) if above subtraction parameter is zero
                                      real);  // Comparison tolerance - set to zero or dummy for exact match


  
//-----------------------------------------------------------------------------------------------------------
// iCheckForRepeating2_VA Window a VA to a VV based on fractional frame
//
// Returns                1 if rows repeat, 0 if not.
//
// Notes                  Returns 1 if all rows contain values which match the input values.
//                        Optionally, row values can be offset by amounts specified with a secondary VV.
//                        This function was designed to detect "depth" array channels, including those which might
//                        have been offset with topography on each row.
//                        An absolute tolerance can be specified to ignore numerical noise.
//                        This version returns the row and column index of first mismatch.
//
// Available              8.2
//-----------------------------------------------------------------------------------------------------------

[_licensed] int iCheckForRepeating2_VA(VA,        // VA to check
                                       VV,        // Items to test for repeats (length equal to the number of columns in the VA)
                                       int,       // If set to 1, subtract single values in the following VV from every array row item before testing (e.g. an elevation value)
                                       VV,        // Values to subtract from each row before doing the comparison test (length equal to the length of the VA). Can be VV_NULL (-1) if above subtraction parameter is zero
                                       real,      // Comparison tolerance - set to zero or dummy for exact match
                                       var int,   // Row index of first mismatch
                                       var int);  // Column index of first mismatch





//*** endblock Generated


#endif
