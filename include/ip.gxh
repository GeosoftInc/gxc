//*** extends 'class_empty.gxh'

#ifndef HIP_GXH_DEFINED
#define HIP_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class IP
//
//-----------------------------------------------------------------------------------------------------------
//
// This class is used in the IP System for the import, export
// and processing of Induced Polarization data.
//
//-----------------------------------------------------------------------------------------------------------
// Notes
//
// The following defines are used in GX code but are not
// part of any functions:
// 
// IP_ARRAY
// IP_CHANNELS
// IP_LINES
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// IP_ARRAY Definitions
//
// IP Array options
//
// IP_ARRAY_DPDP
// 
//
// IP_ARRAY_PLDP
// 
//
// IP_ARRAY_PLPL
// 
//
// IP_ARRAY_GRAD
// 
//
// IP_ARRAY_WENNER
// 
//
// IP_ARRAY_SCHLUMBERGER
// 
//
// IP_ARRAY_UNKNOWN
// 
//
// IP_ARRAY_3D
// 
//
// IP_ARRAY_3D_PLDP
// 
//
// IP_ARRAY_3D_PLPL
// 
//
//===========================================================================================================


#define IP_ARRAY_DPDP 0
#define IP_ARRAY_PLDP 1
#define IP_ARRAY_PLPL 2
#define IP_ARRAY_GRAD 3
#define IP_ARRAY_WENNER 5
#define IP_ARRAY_SCHLUMBERGER 6
#define IP_ARRAY_UNKNOWN 7
#define IP_ARRAY_3D 9
#define IP_ARRAY_3D_PLDP 10
#define IP_ARRAY_3D_PLPL 11


//===========================================================================================================
//
// IP_CHANNELS Definitions
//
// Channels to display
//
// IP_CHANNELS_DISPLAYED
// 
//
// IP_CHANNELS_SELECTED
// 
//
// IP_CHANNELS_ALL
// 
//
//===========================================================================================================


#define IP_CHANNELS_DISPLAYED 0
#define IP_CHANNELS_SELECTED 1
#define IP_CHANNELS_ALL 2


//===========================================================================================================
//
// IP_DOMAIN Definitions
//
// Types of Domains
//
// IP_DOMAIN_NONE
// 
//
// IP_DOMAIN_TIME
// 
//
// IP_DOMAIN_FREQUENCY
// 
//
// IP_DOMAIN_BOTH
// 
//
//===========================================================================================================


#define IP_DOMAIN_NONE -1
#define IP_DOMAIN_TIME 0
#define IP_DOMAIN_FREQUENCY 1
#define IP_DOMAIN_BOTH 2


//===========================================================================================================
//
// IP_DUPLICATE Definitions
//
// How to handle duplicates
//
// IP_DUPLICATE_APPEND
// 
//
// IP_DUPLICATE_OVERWRITE
// 
//
//===========================================================================================================


#define IP_DUPLICATE_APPEND 0
#define IP_DUPLICATE_OVERWRITE 1


//===========================================================================================================
//
// IP_FILTER Definitions
//
// Fraser Filters
//
// IP_FILTER_PANTLEG
// Regular pant-leg filter::
// 
//        _!_    
//       /*_*\   n1
//      /*/ \*\  n2`
//     /*/   \*\ n3
//        :  :
//
// IP_FILTER_PANTLEGP
// Regular pant-leg filter with top at first point::
// 
//        !  nscp:
//       /*\   n1
//      /*_*\  n2
//     /*/ \*\ n3
//       :  :
//
// IP_FILTER_PYRIAMID
// Regular pyramid filter::
// 
//        _!_  maxn:
//       /* *\   n1
//      /* * *\  n2
//     /* * * *\ n3
//        :  :
//
// IP_FILTER_PYRIAMIDP
// Regular pyramid filter with peak on a point::
// 
//        !  maxn:
//       /*\   n1
//      /* *\  n2
//     /* * *\ n3
//       :  :
//
//===========================================================================================================


#define IP_FILTER_PANTLEG 1
#define IP_FILTER_PANTLEGP 2
#define IP_FILTER_PYRIAMID 3
#define IP_FILTER_PYRIAMIDP 4


//===========================================================================================================
//
// IP_I2XIMPMODE Definitions
//
// Interpext Import Mode
//
// IP_I2XIMPMODE_REPLACE
// Recreates the line from scratch.
//
// IP_I2XIMPMODE_MERGE
// Looks for matching Tx1 and N values and
// replaces data in matching lines only.
//
//===========================================================================================================


#define IP_I2XIMPMODE_REPLACE 0
#define IP_I2XIMPMODE_MERGE 1


//===========================================================================================================
//
// IP_I2XINV Definitions
//
// Type of Inversion
//
// IP_I2XINV_IMAGE
// 
//
// IP_I2XINV_ZONGE
// 
//
//===========================================================================================================


#define IP_I2XINV_IMAGE 0
#define IP_I2XINV_ZONGE 1


//===========================================================================================================
//
// IP_LINES Definitions
//
// Lines to display
//
// IP_LINES_DISPLAYED
// 
//
// IP_LINES_SELECTED
// 
//
// IP_LINES_ALL
// 
//
//===========================================================================================================


#define IP_LINES_DISPLAYED 0
#define IP_LINES_SELECTED 1
#define IP_LINES_ALL 2


//===========================================================================================================
//
// IP_PLOT Definitions
//
// Type of Plot
//
// IP_PLOT_PSEUDOSECTION
// 
//
// IP_PLOT_STACKEDSECTION
// 
//
//===========================================================================================================


#define IP_PLOT_PSEUDOSECTION 0
#define IP_PLOT_STACKEDSECTION 1


//===========================================================================================================
//
// IP_QCTYPE Definitions
//
// Type of Measurement
//
// IP_QCTYPE_RESISTIVITY
// Resistivity
//
// IP_QCTYPE_IP
// IP
//
//===========================================================================================================


#define IP_QCTYPE_RESISTIVITY 0
#define IP_QCTYPE_IP 1


//===========================================================================================================
//
// IP_STACK_TYPE Definitions
//
// Spacing Types
//
// IP_STACK_TYPE_MAP
// Use map-based spacing, and preserve the directions of the
// original lines by rotating the sections as desired to their true
// locations. (At present only N-S and E-W sections are supported).
//
// IP_STACK_TYPE_EQUAL
// Spaces the sections equally, with enough room to
// guarantee no overlap with high N-values or closely spaced lines.
//
// IP_STACK_TYPE_GEOGRAPHIC
// Now the same as IP_STACK_MAP
//
//===========================================================================================================


#define IP_STACK_TYPE_MAP 0
#define IP_STACK_TYPE_EQUAL 1
#define IP_STACK_TYPE_GEOGRAPHIC 2


//===========================================================================================================
//
// IP_STNSCALE Definitions
//
// Station Scaling
//
// IP_STNSCALE_NONE
// Station numbers become X or Y locations
//
// IP_STNSCALE_ASPACE
// Multiply station numbers by the A spacing
//
// IP_STNSCALE_VALUE
// Multiply by an input value.
//
// IP_STNSCALE_FILE
// Look up locations from a CSV Line/Station/X/Y file
//
//===========================================================================================================


#define IP_STNSCALE_NONE 0
#define IP_STNSCALE_ASPACE 1
#define IP_STNSCALE_VALUE 2
#define IP_STNSCALE_FILE 3


//===========================================================================================================
//
// IP_SYS Definitions
//
// Instrument
//
// IP_SYS_IPDATA
// 
//
// IP_SYS_IP2
// 
//
// IP_SYS_IP6
// 
//
// IP_SYS_IP10
// 
//
// IP_SYS_SYSCALR2
// 
//
// IP_SYS_IPR11
// 
//
// IP_SYS_IPR12
// 
//
// IP_SYS_PHOENIX
// 
//
// IP_SYS_PHOENIX_V2
// 
//
// IP_SYS_ELREC_PRO
// 
//
// IP_SYS_PROSYS_II
// 
//
//===========================================================================================================


#define IP_SYS_IPDATA 0
#define IP_SYS_IP2 1
#define IP_SYS_IP6 2
#define IP_SYS_IP10 3
#define IP_SYS_SYSCALR2 4
#define IP_SYS_IPR11 5
#define IP_SYS_IPR12 6
#define IP_SYS_PHOENIX 7
#define IP_SYS_PHOENIX_V2 8
#define IP_SYS_ELREC_PRO 9
#define IP_SYS_PROSYS_II 10


//===========================================================================================================
//
// IP_UBC_CONTROL Definitions
//
// Types of Domains
//
// IP_UBC_CONTROL_NONE
// 
//
// IP_UBC_CONTROL_DEFAULT
// 
//
// IP_UBC_CONTROL_FILE
// 
//
// IP_UBC_CONTROL_VALUE
// 
//
// IP_UBC_CONTROL_LENGTH
// 
//
//===========================================================================================================


#define IP_UBC_CONTROL_NONE -1
#define IP_UBC_CONTROL_DEFAULT 0
#define IP_UBC_CONTROL_FILE 1
#define IP_UBC_CONTROL_VALUE 2
#define IP_UBC_CONTROL_LENGTH 3


//===========================================================================================================
//
// IP_PLDP_CONV Definitions
//
// Types of Domains
//
// IP_PLDP_CONV_CLOSE_RX
// 
//
// IP_PLDP_CONV_MID_RX
// 
//
// IP_PLDP_CONV_DISTANT_RX
// 
//
//===========================================================================================================


#define IP_PLDP_CONV_CLOSE_RX 0
#define IP_PLDP_CONV_MID_RX 1
#define IP_PLDP_CONV_DISTANT_RX 2





//===========================================================================================================
//
// Plot Jobs Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// ConvertUBCIP2DToGrid_IP Convert a UBC 2D model to a regular grid.
//
// Notes                   Uses TIN gridding to sample the model.
//                         By setting the final value, a resistivity grid can be
//                         created from conductivity data.
//
// Available               7.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void ConvertUBCIP2DToGrid_IP(string,   // Output grid file name
                                         PG,       // Model data
                                         VV,       // Model cells sizes (input)
                                         VV,       // Model cells sizes (input)
                                         real,     // Top-left corner X
                                         real,     // Top-left corner Z
                                         real,     // Output grid cell size in X
                                         real,     // Output grid cell size in Z
                                         int);     // Output reciprocal of values (0:No, 1:Yes) for resistivity?


  
//-----------------------------------------------------------------------------------------------------------
// CreateDefaultJob_IP Create a default job from scratch.
//
// Available           6.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void CreateDefaultJob_IP(IP,       // IP object.
                                     string,   // File name of the INI file to create (forces correct suffix)
                                     int);     // IP_PLOT


  
//-----------------------------------------------------------------------------------------------------------
// ExportUBCIP3_IP Export of IP data to UBC format.
//
// Notes           Outputs a *.DAT file of the survey data for use in the
//                 UBC 2D inversion program IPINV2D.
//                 Include error channel output and version-specific formatting.
//
// Available       8.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportUBCIP3_IP(IP,       // IP object.
                                 DB,       // DB object
                                 string,   // Output line name
                                 string,   // Output IP channel name
                                 string,   // Output error channel name ("" for none)
                                 string,   // Output OBS file name
                                 string,   // Output TOPO file name
                                 real);    // Version number (3 or 5)


  
//-----------------------------------------------------------------------------------------------------------
// ExportUBCIPControl_IP Export a control file for using in the UBC IPINV2D program.
//
// Notes                 UBC Version 3 Control file.
//                       Outputs a control file for use in the
//                       UBC 2D IP inversion program IPINV2D.
//
// Available             6.4
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportUBCIPControl_IP(string,   // Output control file name
                                       int,      // niter
                                       int,      // irest
                                       real,     // chifact
                                       string,   // IP obs file
                                       string,   // Conductivity file
                                       string,   // Mesh file
                                       string,   // Topography file
                                       string,   // Initial model file
                                       string,   // Reference model
                                       string,   // Alphas
                                       string);  // Weights file


  
//-----------------------------------------------------------------------------------------------------------
// ExportUBCIPControlV5_IP Export a control file for using in the UBC IPINV2D program.
//
// Notes                   UBC Version 5 Control file.
//
// Available               8.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportUBCIPControlV5_IP(string,   // Output control file name
                                         int,      // niter
                                         real,     // chifact
                                         string,   // RES obs file
                                         string,   // Topography file (required)
                                         int,      // Conductivity type IP_UBC_CONTROL FILE or VALUE
                                         string,   // Conductivity file (can be "") or value
                                         int,      // Mesh type IP_UBC_CONTROL FILE, VALUE or DEFAULT
                                         string,   // Mesh file (can be "") or value
                                         int,      // Initial model type IP_UBC_CONTROL FILE, VALUE or DEFAULT
                                         string,   // Initial model file (can be "") or value
                                         int,      // Reference model type IP_UBC_CONTROL FILE, VALUE or DEFAULT
                                         string,   // Reference model file (can be "") or value(
                                         int,      // Alphas type IP_UBC_CONTROL FILE, VALUE, LENGTH or DEFAULT
                                         string,   // Alphas  file (can be ""), value or length
                                         string);  // Weights file


  
//-----------------------------------------------------------------------------------------------------------
// ExportUBCRes3_IP Export of IP Resistivity data to UBC format.
//
// Notes            Outputs a *.DAT file of the survey data for use in the
//                  UBC 2D inversion program DCINV2D.
//                  Voltage and current channels should be in units such that
//                  V/I gives volts/amp (or mV/mA).
//
// Available        8.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportUBCRes3_IP(IP,       // IP object.
                                  DB,       // DB object
                                  string,   // Output line name
                                  string,   // Output voltage channel name
                                  string,   // Output current channel name
                                  string,   // Output error channel name ("" for none)
                                  string,   // Output OBS file name
                                  string,   // Output TOPO file name
                                  real);    // Version number (3 or 5)


  
//-----------------------------------------------------------------------------------------------------------
// ExportUBCResControl_IP Export a control file for using in the UBC DCINV2D program.
//
// Notes                  UBC Version 3.
//                        Outputs a control file for use in the
//                        UBC 2D resistivity inversion program DCINV2D.
//
// Available              6.4
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportUBCResControl_IP(string,   // Output control file name
                                        int,      // niter
                                        int,      // irest
                                        real,     // chifact
                                        string,   // RES obs file
                                        string,   // Mesh file
                                        string,   // Topography file (required)
                                        string,   // Initial model file (can be "" or "NULL")
                                        real,     // Reference model conductivity
                                        string,   // Alphas
                                        string);  // Weights file


  
//-----------------------------------------------------------------------------------------------------------
// ExportUBCResControlV5_IP Export a control file for using in the UBC DCINV2D program.
//
// Notes                    UBC Version 5.
//                          Outputs a control file for use in the
//                          UBC 2D resistivity inversion program DCINV2D.
//
// Available                8.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportUBCResControlV5_IP(string,   // Output control file name
                                          int,      // niter
                                          real,     // chifact
                                          string,   // RES obs file
                                          string,   // Topography file (required)
                                          int,      // Mesh type IP_UBC_CONTROL FILE, VALUE or DEFAULT
                                          string,   // Mesh file (can be "") or value
                                          int,      // Initial model type IP_UBC_CONTROL FILE, VALUE or DEFAULT
                                          string,   // Initial model file (can be "") or value
                                          int,      // Reference model type IP_UBC_CONTROL FILE, VALUE or DEFAULT
                                          string,   // Reference model file (can be "") or value(
                                          int,      // Alphas type IP_UBC_CONTROL FILE, VALUE, LENGTH or DEFAULT
                                          string,   // Alphas  file (can be ""), value or length
                                          string);  // Weights file


  
//-----------------------------------------------------------------------------------------------------------
// ExportDataToUBC3D_IP Export of IP data to UBC 3D IP format.
//
// Notes                Outputs a *.DAT file of the survey data for use in the
//                      UBC IP 3D inversion programs.
//
// Available            9.2
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportDataToUBC3D_IP(IP,       // IP object.
                                      DB,       // DB object
                                      LST,      // Lines to export (Name, Symbol)
                                      int,      // Locations only (0: No, 1: Yes)?
                                      int,      // Include Z values (0: No, 1: Yes)?
                                      string,   // IP channel name (can be "" if exporting locations only)
                                      string,   // Error channel name (can be "" if exporting locations only)
                                      string,   // Mask channel name (can be "")
                                      int,      // IPTYPE (1: Vp, 2: Chargeability)
                                      string,   // Comments (can be "")
                                      string);  // Output OBS file name


  
//-----------------------------------------------------------------------------------------------------------
// ImportUBC2DMOD_IP Import a MOD file from the UBC IPINV2D program.
//
// Returns           PG Object
//
// Notes             Imports the MOD file values to a PG object.
//                   The CON/CHG selection is necessary because the import sets
//                   padding values to dummies based on the type of file.
//
// Available         7.1
//-----------------------------------------------------------------------------------------------------------

[_extended] PG ImportUBC2DMOD_IP(string,   // UBC MOD file name to import
                                 int);     // 0 - CON, 1 - CHG


  
//-----------------------------------------------------------------------------------------------------------
// ImportUBC2DMSH_IP Import a MSH file from the UBC IPINV2D program.
//
// Notes             Imports the MSH file geometry.
//
// Available         7.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void ImportUBC2DMSH_IP(string,     // UBC MSH file to import
                                   var real,   // Returned origin X (top left corner)
                                   var real,   // Returned origin Z (top left corner)
                                   VV,         // Cell widths  (left to right) (real)
                                   VV);        // Cell heights (top down) (real)


  
//-----------------------------------------------------------------------------------------------------------
// ImportUBC2DTopo_IP Import a Topography file from the UBC IPINV2D program.
//
// Notes              Imports the maximum elevation (top of mesh)
//                    as well as the topo (X, Z) values.
//
// Available          7.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void ImportUBC2DTopo_IP(string,     // UBC Topo file to import
                                    var real,   // Returned top of mesh elevation
                                    VV,         // Topography X values
                                    VV);        // Topography Z values (elevations)


  
//-----------------------------------------------------------------------------------------------------------
// OpenJob_IP Open a IP plotting job
//
// Available  6.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void OpenJob_IP(IP,       // IP object
                            string,   // Job file name
                            int);     // Job type IP_PLOT


  
//-----------------------------------------------------------------------------------------------------------
// SaveJob_IP Save a IP plotting job
//
// Available  6.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void SaveJob_IP(IP,       // IP object
                            string,   // Job file name
                            int);     // Job type  IP_PLOT


  
//-----------------------------------------------------------------------------------------------------------
// TrimUBC2DModel_IP Trim the padding cells from the UBC IPINV2D Model.
//
// Returns           PG Object
//
// Notes             The cells are removed from the left, right and bottom.
//                   The returned PG is the trimmed version.
//                   The input cell size VVs are also trimmed to match,
//                   and the origin is updated (still upper left corner).
//
// Available         7.1
//-----------------------------------------------------------------------------------------------------------

[_extended] PG TrimUBC2DModel_IP(PG,         // Input model (unchanged)
                                 int,        // Cells to remove on left
                                 int,        // Cells to remove on right
                                 int,        // Cells to remove on the bottom
                                 VV,         // Column widths (modified)
                                 VV,         // Row heights (modified)
                                 var real);  // Top left corner X (modified)


  
//-----------------------------------------------------------------------------------------------------------
// WriteDistantElectrodes_IP Write distant electrode locations to channels
//
// Notes                     Writes values for ALL lines.
//
// Available                 6.3
//-----------------------------------------------------------------------------------------------------------

[_extended] void WriteDistantElectrodes_IP(IP,   // IP object.
                                           DB);  // DB object


  
//-----------------------------------------------------------------------------------------------------------
// WriteDistantElectrodesLST_IP Write distant electrode locations to channels for a LST of lines
//
// Notes                        Writes values for lines in the input LST.
//
// Available                    6.4.2
//-----------------------------------------------------------------------------------------------------------

[_extended] void WriteDistantElectrodesLST_IP(IP,    // IP object.
                                              DB,    // DB object
                                              LST);  // Lines to write out



//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// AverageDuplicatesQC_IP Average duplicate samples in a database.
//
// Notes                  Averages all values with shared station and N values,
//                        as long as the mask channel is defined at that FID.
//                        Previous averaged values (IP_DATA_AVG) are overwritten according to the
//                        overwrite flag.
//                        If the QC channel is selected, only those rows of data where the QC channel
//                        value is "1" will be included in the average.
//
// Available              7.3
//-----------------------------------------------------------------------------------------------------------

[_extended] void AverageDuplicatesQC_IP(IP,       // IP object
                                        DB,       // Database to export from
                                        string,   // Mask or reference channel (required)
                                        string,   // QC channel (can be left blank)
                                        int);     // IP_DUPLICATE


  
//-----------------------------------------------------------------------------------------------------------
// Create_IP Create IP.
//
// Returns   IP Object
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] IP Create_IP();


  
//-----------------------------------------------------------------------------------------------------------
// Destroy_IP Destroy a IP handle.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Destroy_IP(IP);  // IP Handle


  
//-----------------------------------------------------------------------------------------------------------
// ExportI2X_IP Export line(s) to an Interpex RESIX I2X format file.
//
// Notes        Exports a line to an ".I2X" file.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportI2X_IP(IP,       // IP object
                              DB,       // Database to export from
                              string,   // Name of the file
                              string,   // Name of the line
                              string,   // Resistivity (data) channel
                              string,   // IP (data) channel (can be "")
                              string,   // Image model resistivity channel (can be "")
                              string,   // Image model IP channel (can be "")
                              string,   // Image model synthetic resistivity channel (can be "")
                              string,   // Image model synthetic IP channel (can be "")
                              string,   // Resistivity (polygon) channel (can be "")
                              string);  // IP (polygon) channel (can be "")


  
//-----------------------------------------------------------------------------------------------------------
// ExportIPDATA_IP Exports data in the Geosoft IPDATA format.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportIPDATA_IP(IP,       // IP object
                                 DB,       // Database to export from
                                 string,   // Channel to export
                                 string);  // Title for IPDATA files


  
//-----------------------------------------------------------------------------------------------------------
// ExportIPDATADir_IP Exports data in the Geosoft IPDATA format in the specified directory
//
// Available          6.4
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportIPDATADir_IP(IP,       // IP object
                                    DB,       // Database to export from
                                    string,   // Channel to export
                                    string,   // Title for IPDATA files
                                    string);  // Directory for IPDATA files


  
//-----------------------------------------------------------------------------------------------------------
// ExportIPRED_IP Exports pseudo-section in the Geosoft IPRED format.
//
// Notes          The Fraser Filter weights apply to each N expansion above,
//                and are listed as w1,w2,w3,...   Unspecified values beyond
//                the list's end are set to 1.0.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportIPRED_IP(IP,       // IP object
                                DB,       // Database to export from
                                string,   // Title for first line of file
                                string,   // Channel to process
                                string,   // File suffix (type)
                                int,      // IP_FILTER
                                string,   // The Fraser Filter weights
                                real,     // First Station position (rDUMMY for default)
                                real,     // Last Station position  (rDUMMY for default)
                                int);     // Maximum n spacing


  
//-----------------------------------------------------------------------------------------------------------
// ExportIPREDDir_IP Exports pseudo-section in the Geosoft IPRED format in the specified directory
//
// Notes             The Fraser Filter weights apply to each N expansion above,
//                   and are listed as w1,w2,w3,...   Unspecified values beyond
//                   the list's end are set to 1.0.
//
// Available         6.4
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportIPREDDir_IP(IP,       // IP object
                                   DB,       // Database to export from
                                   string,   // Title for first line of file
                                   string,   // Channel to process
                                   string,   // File suffix (type)
                                   int,      // IP_FILTER
                                   string,   // The Fraser Filter weights
                                   real,     // First Station position (rDUMMY for default)
                                   real,     // Last Station position  (rDUMMY for default)
                                   int,      // Maximum n spacing
                                   string);  // Directory to export to


  
//-----------------------------------------------------------------------------------------------------------
// ExportLineIPDATA_IP Exports one line of data in the Geosoft IPDATA format.
//
// Available           5.1.8
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportLineIPDATA_IP(IP,       // IP object
                                     DB,       // Database to export from
                                     string,   // Line to export
                                     string,   // Channel to export
                                     string);  // Title for IPDATA files


  
//-----------------------------------------------------------------------------------------------------------
// ExportSGDF_IP Exports data to a Scintrex Geophysical Data Format file.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportSGDF_IP(IP,       // IP object
                               DB,       // Database to export from
                               string,   // SGDF file to create
                               string,   // Time Domain channel or Frequency Amplitude Channel
                               string);  // Frequency Domain Phase channel (optional)


  
//-----------------------------------------------------------------------------------------------------------
// GetNValueLST_IP Fill a list with unique N values in selected lines.
//
// Available       6.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void GetNValueLST_IP(IP,    // IP Object
                                 DB,    // Database
                                 LST);  // LST object


  
//-----------------------------------------------------------------------------------------------------------
// GetTopoLine_IP Get topography values for a line.
//
// Notes          If topography info is available, returns values calculated for
//                the input line. If no topography is available, returned values
//                will be dummies. Values between actual data are interpolated using
//                the Akima spline. Ends are extrapolated using the end data points.
//
// Available      6.4.2
//-----------------------------------------------------------------------------------------------------------

[_extended] void GetTopoLine_IP(IP,       // IP object
                                DB,       // Database to import data to
                                string,   // Line name
                                real,     // Starting "X" (station) value (rDUMMY for default)
                                real,     // Ending "X" (station) value (rDUMMY for default)
                                real,     // "X" increment along the line (rDUMMY for default = half "A" separation)
                                VV);      // Returned topography values


  
//-----------------------------------------------------------------------------------------------------------
// iGetChanDomain_IP Is this channel registered as a Time or Frequency domain channel?
//
// Returns           IP_DOMAIN
//
// Available         5.1.8
//-----------------------------------------------------------------------------------------------------------

[_extended] int iGetChanDomain_IP(IP,       // IP Object
                                  DB,       // Database
                                  string);  // Channel to check


  
//-----------------------------------------------------------------------------------------------------------
// IGetChanLabel_IP Get the default label and units for a given channel.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void IGetChanLabel_IP(string,       // Input channel
                                  var string,   // Returned label
                                  int,          // Label length
                                  var string,   // Returned units
                                  int);         // Units label length
#define GetChanLabel_IP(chan, label, units) IGetChanLabel_IP(chan, label, sizeof(label), units, sizeof(units))


  
//-----------------------------------------------------------------------------------------------------------
// GetChannelInfo_IP Time Windows or Frequency info from a channel.
//
// Available         8.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void GetChannelInfo_IP(IP,         // IP Object
                                   DB,         // Database
                                   string,     // Channel to check
                                   var int,    // IP_DOMAIN
                                   var real,   // Delay or Base Frequency
                                   var int,    // Number of time windows or frequencies
                                   VV);        // Time windows or frequencies


  
//-----------------------------------------------------------------------------------------------------------
// SetChannelInfo_IP Set Time Windows or Frequency info for a channel.
//
// Available         8.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void SetChannelInfo_IP(IP,       // IP Object
                                   DB,       // Database
                                   string,   // Channel to check
                                   int,      // IP_DOMAIN
                                   real,     // Delay or Base Frequency
                                   int,      // Number of time windows or frequencies
                                   VV);      // Time windows or frequencies


  
//-----------------------------------------------------------------------------------------------------------
// ImportDump_IP Imports data from an IP instrument dump file.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void ImportDump_IP(IP,       // IP Handle
                               int,      // IP_SYS
                               DB,       // DB Handle
                               string);  // Dump file name


  
//-----------------------------------------------------------------------------------------------------------
// ImportGrid_IP Imports data from a grid
//
// Notes         Data is imported to the specified channel.
//               The values are interpolated at each row's X and Y
//               positions.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void ImportGrid_IP(IP,       // IP object
                               DB,       // Database to import data to
                               string,   // The name of the grid file, with decorations
                               string);  // The name of the channel to import to


  
//-----------------------------------------------------------------------------------------------------------
// ImportI2X_IP Imports an Interpex RESIX I2X format file to a line.
//
// Notes        Imports a single ".I2X" file to a specified line.
//              If the line does not exist, it will be created.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void ImportI2X_IP(IP,       // IP object
                              DB,       // Database to import to
                              string,   // Name of file to import
                              string,   // Line to import to
                              string,   // Resistivity (data) channel
                              string,   // IP (data) channel (can be "")
                              string,   // Image model resistivity channel (can be "")
                              string,   // Image model IP channel (can be "")
                              string,   // Image model synthetic resistivity channel (can be "")
                              string,   // Image model synthetic IP channel (can be "")
                              string,   // Resistivity (polygon) channel (can be "")
                              string,   // IP (polygon) channel (can be "")
                              int);     // IP_I2XIMPMODE


  
//-----------------------------------------------------------------------------------------------------------
// ImportI2XEx_IP Same as ImportI2X_IP, with Zonge data imported as well.
//
// Notes          Imports a single ".I2X" file to a specified line.
//                If the line does not exist, it will be created.
//
// Available      6.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void ImportI2XEx_IP(IP,       // IP object
                                DB,       // Database to import to
                                string,   // Name of file to import
                                string,   // Line to import to
                                string,   // Resistivity (data) channel
                                string,   // IP (data) channel (can be "")
                                string,   // Image model resistivity channel (can be "")
                                string,   // Image model IP channel (can be "")
                                string,   // Image model synthetic resistivity channel (can be "")
                                string,   // Image model synthetic IP channel (can be "")
                                string,   // Resistivity (polygon) channel (can be "")
                                string,   // IP (polygon) channel (can be "")
                                string,   // Zonge Resistivity channel (can be "")
                                string,   // Zonge IP channel (can be "")
                                int);     // IP_I2XIMPMODE


  
//-----------------------------------------------------------------------------------------------------------
// ImportInstrumentationGDD_IP Imports an Instrumentation GDD format file.
//
// Available                   8.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void ImportInstrumentationGDD_IP(IP,       // IP object
                                             DB,       // Database to import to
                                             string);  // GDD file name


  
//-----------------------------------------------------------------------------------------------------------
// ImportIPDATA_IP Imports data in the Geosoft IPDATA format.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void ImportIPDATA_IP(IP,       // IP object
                                 DB,       // Database to import to
                                 string,   // IPDATA file name
                                 string);  // Channel to import to


  
//-----------------------------------------------------------------------------------------------------------
// ImportIPDATA2_IP Imports data in the Geosoft IPDATA format - up to two arrays.
//
// Notes            The second channel may be specified for frequency domain data sets
//                  with two array channels; e.g. amplitude and phase, or real and
//                  imaginary parts. If the second channel is specified, and no
//                  time or frequncy information is specified in the header (using
//                  the T= or F= fields) then the import is assumed to be frequency
//                  domain.
//
// Available        5.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void ImportIPDATA2_IP(IP,       // IP object
                                  DB,       // Database to import to
                                  string,   // IPDATA file name
                                  string,   // Channel to import to (default is "IP")
                                  string);  // (optional) Second channel to import to


  
//-----------------------------------------------------------------------------------------------------------
// ImportIPRED_IP Imports data from the Geosoft IPRED format.
//
// Notes          This import produces a limited IP data set with no Current "I",
//                Voltage "Vp" or Apparent Resistivity "ResApp" values.
//
// Available      5.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void ImportIPRED_IP(IP,       // IP object
                                DB,       // Database to import to
                                string,   // File to import from
                                string);  // Channel to import


  
//-----------------------------------------------------------------------------------------------------------
// ImportMergeIPRED_IP Imports IPRED data to an existing line.
//
// Notes               Exits with error if the line does not exist.
//                     Data is merged on basis of Stn and N value.
//
// Available           5.1.8
//-----------------------------------------------------------------------------------------------------------

[_extended] void ImportMergeIPRED_IP(IP,       // IP object
                                     DB,       // Database to import to
                                     string,   // File to import from
                                     string);  // Channel to import


  
//-----------------------------------------------------------------------------------------------------------
// ImportSGDF_IP Imports data from a Scintrex Geophysical Data Format file.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void ImportSGDF_IP(IP,       // IP object
                               DB,       // Database to import to
                               string);  // SGDF file name


  
//-----------------------------------------------------------------------------------------------------------
// ImportTopoCSV_IP Imports topography data from a CSV line-station file
//
// Notes            The elevation of each point in the current database
//                  is interpolated from the input topography values.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void ImportTopoCSV_IP(IP,       // IP object
                                  DB,       // Database to calculate topography for
                                  string);  // The name of CSV file


  
//-----------------------------------------------------------------------------------------------------------
// ImportTopoGrid_IP Imports topography data from a grid
//
// Notes             The elevation of each point in the current database
//                   is interpolated from the input topography grid.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void ImportTopoGrid_IP(IP,       // IP object
                                   DB,       // Database to calculate topography for
                                   string);  // The name of the grid file, with decorations


  
//-----------------------------------------------------------------------------------------------------------
// ImportZongeAVG_IP Imports a Zonge AVG format file.
//
// Notes             See ImportZongeFLD_IP
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void ImportZongeAVG_IP(IP,       // IP object
                                   DB,       // Database to import to
                                   string,   // FLD file name
                                   real,     // Line number (will be scaled if applicable)
                                   int,      // IP_STNSCALE
                                   real);    // Line, station multiplier (for IP_STNSCALE_VALUE)


  
//-----------------------------------------------------------------------------------------------------------
// ImportZongeFLD_IP Imports a Zonge FLD format file.
//
// Notes             The Zonge Line and Station numbers may not be the X or Y position
//                   values, and a conversion is required.
//                   The line direction is taken from the IP setup values.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void ImportZongeFLD_IP(IP,       // IP object
                                   DB,       // Database to import to
                                   string,   // FLD file name
                                   int,      // IP_STNSCALE
                                   real);    // Line, station multiplier (for IP_STNSCALE_VALUE)


  
//-----------------------------------------------------------------------------------------------------------
// NewXYDatabase_IP Create a subset database using a mask channel, "N" value
//
// Notes            A mask channel can be used to select a subset of the data.
//                  A single N value can also be selected (Dummy for all).
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void NewXYDatabase_IP(IP,       // IP object
                                  DB,       // DB object
                                  DB,       // New DB object
                                  VV,       // Channel list
                                  string,   // Mask channel
                                  real);    // "N" Value


  
//-----------------------------------------------------------------------------------------------------------
// PseudoPlot_IP Create pseudo-sections of a single line using a control file.
//
// Notes         The control file is created using the IPPLTCON GX. It may then
//               be modified by hand as required.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void PseudoPlot_IP(IP,       // IP object
                               DB,       // Database
                               string,   // "IPPLOT" INI file name
                               string,   // Current line name
                               string);  // Map name to create


  
//-----------------------------------------------------------------------------------------------------------
// PseudoPlot2_IP Same as PseudoPlot_IP, but specify a tag for grids created.
//
// Notes          The control file is created using the IPPLTCON GX. It may then
//                be modified by hand as required.
//
// Available      5.1.8
//-----------------------------------------------------------------------------------------------------------

[_extended] void PseudoPlot2_IP(IP,       // IP object
                                DB,       // Database
                                string,   // "IPPLOT" INI file name
                                string,   // Current line name
                                string,   // Tag for created grids
                                string);  // Map name to create


  
//-----------------------------------------------------------------------------------------------------------
// PseudoPlot2Dir_IP Same as PseudoPlot2_IP, but with directory specified.
//
// Notes             The control file is created using the IPPLTCON GX. It may then
//                   be modified by hand as required.
//
// Available         6.4
//-----------------------------------------------------------------------------------------------------------

[_extended] void PseudoPlot2Dir_IP(IP,       // IP object
                                   DB,       // Database
                                   string,   // "IPPLOT" INI file name
                                   string,   // Current line name
                                   string,   // Tag for created grids
                                   string,   // Map name to create
                                   string);  // Directory to create files


  
//-----------------------------------------------------------------------------------------------------------
// PSStack_IP Create a stacked pseudo-section plot using a control file.
//
// Notes      The control file is created using the IPSTAKCON GX. It may then
//            be modified by hand as required.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void PSStack_IP(IP,       // IP object
                            DB,       // DB object
                            string,   // Channel to plot
                            string,   // "IPPLOT" INI file name
                            string);  // Map name to create


  
//-----------------------------------------------------------------------------------------------------------
// PSStack2_IP As PSStack_IP, but select section spacing option.
//
// Available   5.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void PSStack2_IP(IP,       // IP object
                             DB,       // DB object
                             string,   // Channel to plot
                             string,   // "IPPLOT" INI file name
                             int,      // IP_STACK_TYPE
                             string);  // Map name to create


  
//-----------------------------------------------------------------------------------------------------------
// PSStack2Dir_IP Same as PseudoPlot2_IP, but with directory specified.
//
// Available      6.4
//-----------------------------------------------------------------------------------------------------------

[_extended] void PSStack2Dir_IP(IP,       // IP object
                                DB,       // DB object
                                string,   // Channel to plot
                                string,   // "IPPLOT" INI file name
                                int,      // IP_STACK_TYPE
                                string,   // Map name to create
                                string);  // Directory to create files


  
//-----------------------------------------------------------------------------------------------------------
// QCChanLST_IP Fill a list with QC channels.
//
// Notes        Searches for the following QC channels existing in a database:
//              QC, QC_RES.
//
// Available    7.3
//-----------------------------------------------------------------------------------------------------------

[_extended] void QCChanLST_IP(IP,    // IP Object
                              DB,    // Database
                              LST);  // LST object


  
//-----------------------------------------------------------------------------------------------------------
// Recalculate_IP Recalculate derived channel values.
//
// Notes          This function recalculates "derived" channel values from
//                "core" data.
//                
//                    1. Recalculates the "STN" and "N" channels, using the TX1,
//                       TX2, RX1 and RX2 channels (depending on the system).
//                    2. Recalculates the apparent resistivity "ResCalc",
//                       average "IP_Avg" and metal factor "MF" channels
//                    3. Recalculates the "X" and "Y" channels. One of these will
//                       be equal to "STN", the other to the internally stored
//                       line number for the current line.
//                    4. Recalculate the "Z" channel, based on the current "Topo"
//                       channel, and the "N" values.
//                
//                Warning: If you make a change to an electrode location, you
//                would have to call Recalculate_IP, then recalculate "Topo"
//                (since the X and Y values would have changed), then call
//                RecalculateZ_IP, since "Z" values are based on "Topo" values.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void Recalculate_IP(IP,   // IP object
                                DB);  // Database


  
//-----------------------------------------------------------------------------------------------------------
// RecalculateEx_IP Recalculate derived channel values, with option for including/excluding location calculations.
//
// Notes            See Recalculate_IP. This version allows you to suppress the recalculation of the
//                  current X, Y and Z channel values from the station locations.
//
// Available        8.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void RecalculateEx_IP(IP,    // IP object
                                  DB,    // Database
                                  int);  // Recalculate XYZ locations (TRUE or FALSE)?


  
//-----------------------------------------------------------------------------------------------------------
// RecalculateDerivedData_IP Recalculate derived channel values.
//
// Notes                     This function recalculates "derived" channel values from
//                           "core" data. It duplicates and extends the functionality
//                           of RecalateEx_IP by allowing for the input/output channel
//                           names to be overridden, with extra control on what is calculated.
//                           
//                               1. Recalculates the "STN" and "N" channels (depending on the system).
//                               2. Recalculates the apparent resistivity "ResCalc",
//                                  average "IP_Avg" and metal factor "MF" channels
//                               3. Recalculates the "X" and "Y" channels. One of these will
//                                  be equal to "STN", the other to the internally stored
//                                  line number for the current line.
//                               4. Recalculate the "Z" channel, based on the current "Topo"
//                                  channel, and the "N" values.
//                           
//                           Channel overrides are passed via a LST object, with the channel key (type)
//                           passed in the LST_ITEM_NAME part, and the channel name passed in the 
//                           LST_ITEM_VALUE part.
//                           
//                           The following channel overrides supported 
//                           (NOTE: Different behaviours for 2D and 3D arrays)
//                           
//                           3D Electrode location channels (IP_ARRAY_3D_XXX):
//                               "R1X", "R1Y", "R1Z", "R2X", "R2Y", "R2Z",
//                               "T1X", "T1Y", "T1Z", "T2X", "T2Y", "T2Z" 
//                               (electrodes not included or set to "" are not read)
//                           
//                           or IN-LINE arrays (DPDP, PLDP, PLPL, GRAD)
//                               "R1X", "R2X", "T1X", "T2X"  (In-line locations)
//                               "R1Y", "R2Y", "T1Y", "T2Y"  (Across-line locations)
//                               "R1Z", "R2Z", "T1Z", "T2Z"  (Z)
//                               (for any electrode not include or set to "" the default channel name For
//                               the array line direction, or the defined distant electrode location
//                               is used)
//                           
//                           Other input channels overridden if defined:
//                               "Vp" (primary voltage - must be in mV)
//                               "I" (current - must be in A)
//                           
//                           Other output channels overridden if defined (if you DON'T want the various output channels modified, then set the override values to ""):
//                               "MF" (metal factor) - formulation defined in settings, 
//                               "AvgIP" (average IP)
//                               "AppRes" (apparent resistivity)
//                               "N" (Pseudo-section pseudo-depth)
//                               "Stn" (Station value)
//                               "X" (Station "X" value)
//                               "Y" (Station "Y" value)
//                               "Z" (Station "Z" value)
//                               "Topo" (Ground elevation at station location)
//                           
//                            Recalculating XYZ will result in any channel grid makers from the IPIMPGRID.GX
//                            being re-run, then if a maker exists for the Topo channel it is re-run, and
//                            finally the Z channel is recalculated (see "RecalculateZ_IP").
//
// Available                 9.10
//-----------------------------------------------------------------------------------------------------------

[_extended] void RecalculateDerivedData_IP(IP,        // IP object
                                           DB,        // Database
                                           DB_SYMB,   // line handle  [DB_LOCK_READWRITE]
                                           LST,       // LST object - channel name overrides
                                           int);      // Recalculate XYZ locations (TRUE or FALSE)?


  
//-----------------------------------------------------------------------------------------------------------
// RecalculateZ_IP Recalculate Z channel values.
//
// Notes           The "Z" channel values are calculated as follows:
//                 If the "Topo" value is defined, then
//                 Z = Topo - 0.5*N*A, where "N" is the N-spacing, and
//                 A is the A-spacing. If the Topography is not defined, then
//                 it is assumed to be equal to 0.
//
// See also        Recalculate_IP
//
// Available       5.1.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void RecalculateZ_IP(IP,   // IP object
                                 DB);  // Database


  
//-----------------------------------------------------------------------------------------------------------
// RESIX_Zonge_IP Runs the Interpex RESIX Zonge inversion on selected lines.
//
// Notes          The IP2DI program is run in batch mode, and the
//                input file is overwritten with the new results, ready to
//                be imported using ImportI2X_IP.
//                The three IP channels are required only if joint Res/IP inversion
//                is selected.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void RESIX_Zonge_IP(IP,       // IP object
                                DB,       // Database object
                                string,   // Name of the line
                                string,   // Apparent resistivity channel
                                string,   // Synthetic Apparent resistivity channel
                                string,   // Inverted Apparent resistivity channel
                                int,      // Invert IP data too? IP_I2XINV
                                string,   // IP channel
                                string,   // Synthetic IP channel
                                string);  // Inverted IP channel


  
//-----------------------------------------------------------------------------------------------------------
// SetImportLine_IP Set the line name for some imports.
//
// Notes            For some imports, no line name is derivable from the import itself.
//
// Available        9.3
//-----------------------------------------------------------------------------------------------------------

[_extended] void SetImportLine_IP(IP,       // IP object.
                                  string);  // Line name


  
//-----------------------------------------------------------------------------------------------------------
// SetImportMode_IP When importing data to a line, set append/overwrite mode.
//
// Notes            By default, importing data overwrites existing data.
//                  Call this function before doing the import in order
//                  to append imported data to existing data.
//                  "Short" data channels will be dummied to the existing
//                  data length before the new data is appended.
//
// Available        6.3
//-----------------------------------------------------------------------------------------------------------

[_extended] void SetImportMode_IP(IP,    // IP Handle
                                  int);  // 0: Overwrite, 1: Append


  
//-----------------------------------------------------------------------------------------------------------
// Window_IP Window an IP array channel to produce a normal channel.
//
// Notes     The array channels cannot be used directly to produce sections.
//           Window_IP allows the user to select one or more of the windows
//           and create a new channel. In time domain, if more than one channel
//           is selected a weighted sum is performed, according to window widths.
//           In frequency domain a simple sum is performed.
//           Window List Syntax:
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void Window_IP(IP,       // IP object
                           DB,       // DB object
                           string,   // VA channel to use
                           string,   // New channel
                           string);  // Window list


  
//-----------------------------------------------------------------------------------------------------------
// WinnowChanList_IP Removes obviously non-pseudo-section type channels from list.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void WinnowChanList_IP(LST);  // List of channels


  
//-----------------------------------------------------------------------------------------------------------
// WinnowChanList2_IP Same as WinnowChanList_IP, but removes current X,Y,Z.
//
// Available          5.1.3
//-----------------------------------------------------------------------------------------------------------

[_extended] void WinnowChanList2_IP(LST,   // List of channels
                                    DB);   // Database


  
//-----------------------------------------------------------------------------------------------------------
// isValidLine_IP See if a given database line is registered for the IP system
//
// Returns        1 if the line is a valid IP line, 0 if not
//
// Available      8.1
//-----------------------------------------------------------------------------------------------------------

[_extended] int isValidLine_IP(IP,       // IP Object
                               DB,       // Database
                               string);  // Line name


  
//-----------------------------------------------------------------------------------------------------------
// iLineArrayType_IP Return the type of IP array for the input line. If necessary, first imports the specified line into the IP object
//
// Returns           IP_ARRAY
//
// Available         8.1
//-----------------------------------------------------------------------------------------------------------

[_extended] int iLineArrayType_IP(IP,       // IP Object
                                  DB,       // Database
                                  string);  // Line name


  
//-----------------------------------------------------------------------------------------------------------
// rASpacing_IP Return the A-Spacing for the input line. If necessary, first imports the specified line into the IP object.
//
// Returns      The A-Spacing value. If there are multiple A-Spacings, the base or smallest value.
//              				 This value could be rDUMMY for some arrays (such as 3D) where no A-Spacing is explicitly defined.
//
// Available    8.1
//-----------------------------------------------------------------------------------------------------------

[_extended] real rASpacing_IP(IP,       // IP Object
                              DB,       // Database
                              string);  // Line name


  
//-----------------------------------------------------------------------------------------------------------
// iPLDPConvention_IP Return the user's plot point convention for pole-dipole arrays.
//
// Returns            The user's PLDP plot point convention IP_PLDP_CONV
//
// Available          8.1
//-----------------------------------------------------------------------------------------------------------

[_extended] int iPLDPConvention_IP(IP);  // IP Object


  
//-----------------------------------------------------------------------------------------------------------
// GetElectrodeLocationsAndMaskValues_IP Get unique electrodes, along with current mask info.
//
// Notes                                 The mask values are determined from the first row where a given electrode is found.
//                                       Values returned for all currently selected lines.
//
// Available                             9.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void GetElectrodeLocationsAndMaskValues_IP(IP,       // IP object.
                                                       DB,       // DB object
                                                       string,   // Line name ("" for all selected lines)
                                                       int,      // Electrode type. 0:Tx, 1:Rx
                                                       VV,       // X locations
                                                       VV,       // Y locations
                                                       VV,       // IP QC channel values ("QC" or "QC_IP")
                                                       VV);      // Resistivity QC channel values ("QC_RES")


  
//-----------------------------------------------------------------------------------------------------------
// GetElectrodeLocationsAndMaskValues2_IP Get unique electrodes, along with current mask info.
//
// Notes                                  The mask values are determined from the first row where a given electrode is found.
//                                        Values returned for all currently selected lines.
//
// Available                              9.2
//-----------------------------------------------------------------------------------------------------------

[_extended] void GetElectrodeLocationsAndMaskValues2_IP(IP,       // IP object.
                                                        DB,       // DB object
                                                        string,   // Line name ("" for all selected lines)
                                                        int,      // Electrode type. 0:Tx, 1:Rx
                                                        VV,       // X locations
                                                        VV,       // Y locations
                                                        VV,       // IP QC channel values ("QC" or "QC_IP")
                                                        VV,       // Resistivity QC channel values ("QC_RES")
                                                        VV);      // Line symbol values (GS_INT)


  
//-----------------------------------------------------------------------------------------------------------
// SetElectrodeMaskValues_IP Set unique electrodes, along with current mask info.
//
// Notes                     Mask values are set for all included electrode locations, currently selected lines.
//
// Available                 9.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void SetElectrodeMaskValues_IP(IP,       // IP object.
                                           DB,       // DB object
                                           string,   // Line name ("" for all selected lines)
                                           int,      // Electrode type. 0:Tx, 1:Rx
                                           VV,       // X locations
                                           VV,       // Y locations
                                           VV,       // IP QC channel values ("QC" or "QC_IP")
                                           VV);      // Resistivity QC channel values ("QC_RES")


  
//-----------------------------------------------------------------------------------------------------------
// SetElectrodeMaskValuesSingleQCChannel_IP Set unique electrodes, along with current mask info.
//
// Notes                                    Mask values are set for all included electrode locations, currently selected lines.
//
// Available                                9.2
//-----------------------------------------------------------------------------------------------------------

[_extended] void SetElectrodeMaskValuesSingleQCChannel_IP(IP,       // IP object.
                                                          DB,       // DB object
                                                          string,   // Line name ("" for all selected lines)
                                                          int,      // Electrode type. 0:Tx, 1:Rx
                                                          int,      // QC channel type.  IP_QCTYPE
                                                          VV,       // X locations
                                                          VV,       // Y locations
                                                          VV);      // QC channel values ("QC")


  
//-----------------------------------------------------------------------------------------------------------
// GetQCChannel_IP Get the QC channel handle, if it exists.
//
// Returns         Channel handle,  NULLSYMB if not found
//
// Notes           For IP, looks for "QC_IP", then "QC_OffTime", then "QC".
//                 For Resistivity, looks for "QC_Res", then "QC_OnTime" (case insensitive).
//
// Available       9.2
//-----------------------------------------------------------------------------------------------------------

[_extended] DB_SYMB GetQCChannel_IP(DB,           // DB object
                                    int,          // QC channel type.  IP_QCTYPE
                                    var string,   // String to place name into
                                    int);         // Maximum length of string, should be DB_SYMB_NAME_SIZE to hold all possible channel names.
#define _GetQCChannel_IP(db, qc_type, chan) GetQCChannel_IP(db, qc_type, chan, sizeof(chan))


  
//-----------------------------------------------------------------------------------------------------------
// LocateContributingElectrodes_IP Locate on a map electrodes selected in a database row.
//
// Notes                           Sets up an EXT object in the database that captures row/line change events and plots the
//                                 electrodes for the selected row on an accompanying map.
//                                 The EXT object is removed by running LaunchRemoveContributingElectrodesEXTTool_IPGUI.
//                                 This EXT is not serialized, so it is also removed if the database is closed (since
//                                 this is not the normal behaviour expected from a database).
//
// Available                       9.4
//-----------------------------------------------------------------------------------------------------------

[_extended] void LocateContributingElectrodes_IP(DB,       // DB object
                                                 string,   // The current map
                                                 string,   // Rx1 X channel
                                                 string,   // Rx1 Y channel
                                                 string,   // Rx2 X channel
                                                 string,   // Rx2 Y channel
                                                 string,   // Tx1 X channel
                                                 string,   // Tx1 Y channel
                                                 string,   // Tx2 X channel
                                                 string,   // Tx2 Y channel
                                                 real);    // Symbol size (mm)


  
//-----------------------------------------------------------------------------------------------------------
// LocateContributingElectrodes3D_IP Locate on a 3D view electrodes selected in a database row.
//
// Notes                             Sets up an EXT object in the database that captures row/line change events and plots the
//                                   electrodes for the selected row on an accompanying 3D view.
//                                   The EXT object is removed by running LaunchRemoveContributingElectrodesEXTTool_IPGUI.
//                                   This EXT is not serialized, so it is also removed if the database is closed (since
//                                   this is not the normal behaviour expected from a database).
//
// Available                         9.7
//-----------------------------------------------------------------------------------------------------------

[_extended] void LocateContributingElectrodes3D_IP(DB,       // DB object
                                                   string,   // The current map
                                                   string,   // Rx1 X channel (required)
                                                   string,   // Rx1 Y channel (required)
                                                   string,   // Rx1 Z channel (assume zero elevation if not specified)
                                                   string,   // Rx2 X channel
                                                   string,   // Rx2 Y channel
                                                   string,   // Rx2 Z channel (assume zero elevation if not specified)
                                                   string,   // Tx1 X channel
                                                   string,   // Tx1 Y channel
                                                   string,   // Tx1 Z channel (assume zero elevation if not specified)
                                                   string,   // Tx2 X channel
                                                   string,   // Tx2 Y channel
                                                   string,   // Tx2 Z channel (assume zero elevation if not specified)
                                                   real);    // Symbol size (ground units)


  
//-----------------------------------------------------------------------------------------------------------
// GetGridsVV_IP Get a VV populated with grids created making pseudosections by this IP object
//
// Returns       VV Object
//
// Notes         You can use this list (for instance) to add the created grids to the project list.
//
// Available     9.7
//-----------------------------------------------------------------------------------------------------------

[_extended] VV GetGridsVV_IP(IP);  // IP object.


  
//-----------------------------------------------------------------------------------------------------------
// GetLineData_IP Get electrodes, data and mask values for a single line.
//
// Notes          True XY locations are returned for 2D arrays. Distant Electrode locations may be dummies.
//
// Available      9.10
//-----------------------------------------------------------------------------------------------------------

[_extended] void GetLineData_IP(IP,       // IP object.
                                DB,       // DB object
                                string,   // Line name ("" for all selected lines)
                                VV,       // RX1 x locations (returned)
                                VV,       // RX1 y locations (returned)
                                VV,       // RX2 x locations (returned)
                                VV,       // RX2 y locations (returned)
                                VV,       // TX1 x locations (returned)
                                VV,       // TX1 y locations (returned)
                                VV,       // TX2 x locations (returned)
                                VV,       // TX2 y locations (returned)
                                VV,       // IP QC channel values ("QC" or "QC_IP") (returned)
                                VV,       // Resistivity QC channel values ("QC_RES") (returned)
                                string,   // data channel (optional)
                                VV);      // data channel values (returned)



//===========================================================================================================
//
// Deprecated Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// AverageDuplicates_IP Average duplicate samples in a database.
//
// Notes                Averages all values with shared station and N values,
//                      as long as the mask channel is defined at that FID.
//                      Previous averaged values (IP_DATA_AVG) are overwritten according to the
//                      overwrite flag.
//                      REPLACED BY: AverageDuplicatesQC_IP.
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void AverageDuplicates_IP(IP,       // IP object
                                      DB,       // Database to export from
                                      string,   // Mask or reference channel
                                      int);     // IP_DUPLICATE


  
//-----------------------------------------------------------------------------------------------------------
// ExportUBCIP_IP Export an IP OBS file to use in the UBC IPINV2D program.
//
// Notes          Outputs a *.DAT file of the survey data for use in the
//                UBC 2D inversion program IPINV2D.
//
// Available      6.4
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportUBCIP_IP(IP,       // IP object.
                                DB,       // DB object
                                string,   // Output line name
                                string,   // Output IP channel name
                                string,   // Output OBS file name
                                string);  // Output TOPO file name


  
//-----------------------------------------------------------------------------------------------------------
// ExportUBCIP2_IP Same as ExportUBCIP_IP, with error channel output.
//
// Notes           Outputs a *.DAT file of the survey data for use in the
//                 UBC 2D inversion program IPINV2D.
//
// Available       6.4.2
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportUBCIP2_IP(IP,       // IP object.
                                 DB,       // DB object
                                 string,   // Output line name
                                 string,   // Output IP channel name
                                 string,   // Output error channel name ("" for none)
                                 string,   // Output OBS file name
                                 string);  // Output TOPO file name


  
//-----------------------------------------------------------------------------------------------------------
// ExportUBCRes_IP Export a RES OBS file to use in the UBC DCINV2D program.
//
// Notes           Outputs a *.DAT file of the survey data for use in the
//                 UBC 2D inversion program DCINV2D.
//                 Voltage and current channels should be in units such that
//                 V/I gives volts/amp (or mV/mA).
//
// Available       6.4
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportUBCRes_IP(IP,       // IP object.
                                 DB,       // DB object
                                 string,   // Output line name
                                 string,   // Output voltage channel name
                                 string,   // Output current channel name
                                 string,   // Output OBS file name
                                 string);  // Output TOPO file name


  
//-----------------------------------------------------------------------------------------------------------
// ExportUBCRes2_IP Same as ExportUBCRes_IP, with error channel output.
//
// Notes            Outputs a *.DAT file of the survey data for use in the
//                  UBC 2D inversion program DCINV2D.
//                  Voltage and current channels should be in units such that
//                  V/I gives volts/amp (or mV/mA).
//
// Available        6.4.2
//-----------------------------------------------------------------------------------------------------------

[_extended] void ExportUBCRes2_IP(IP,       // IP object.
                                  DB,       // DB object
                                  string,   // Output line name
                                  string,   // Output voltage channel name
                                  string,   // Output current channel name
                                  string,   // Output error channel name ("" for none)
                                  string,   // Output OBS file name
                                  string);  // Output TOPO file name





//*** endblock Generated


#endif
