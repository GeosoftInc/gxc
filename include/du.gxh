//*** extends 'class_empty.gxh'

#ifndef HDU_GXH_DEFINED
#define HDU_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class DU
//
//-----------------------------------------------------------------------------------------------------------
//
// DU functions provide a variety of common utilities that can be applied
// efficiently to the contents of a database. Most DU library functions take
// as their first argument a DB object, and apply standard processes to data
// stored in an OASIS database, including import and export functions.
//
//-----------------------------------------------------------------------------------------------------------
// Notes
//
// The following defines are used by GX functions but are not required
// for any methods:
// 
// DU_LINES
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// DB_DUP Definitions
//
// Duplicate Types
//
// DB_DUP_FIRST
// 
//
// DB_DUP_AVERAGE
// 
//
// DB_DUP_MINIMUM
// 
//
// DB_DUP_MAXIMUM
// 
//
// DB_DUP_MEDIAN
// 
//
// DB_DUP_LAST
// 
//
//===========================================================================================================


#define DB_DUP_FIRST 1
#define DB_DUP_AVERAGE 2
#define DB_DUP_MINIMUM 3
#define DB_DUP_MAXIMUM 4
#define DB_DUP_MEDIAN 5
#define DB_DUP_LAST 6


//===========================================================================================================
//
// DB_DUPEDIT Definitions
//
// Duplicate Edit Flags
//
// DB_DUPEDIT_SINGLE
// 
//
// DB_DUPEDIT_ALL
// 
//
//===========================================================================================================


#define DB_DUPEDIT_SINGLE 0
#define DB_DUPEDIT_ALL 1


//===========================================================================================================
//
// DU_CHANNELS Definitions
//
// Channels to Display
//
// DU_CHANNELS_DISPLAYED
// 
//
// DU_CHANNELS_ALL
// 
//
//===========================================================================================================


#define DU_CHANNELS_DISPLAYED 0
#define DU_CHANNELS_ALL 1


//===========================================================================================================
//
// DU_EXPORT Definitions
//
// Export Type
//
// DU_EXPORT_CSV
// 
//
// DU_EXPORT_ODDF
// 
//
// DU_EXPORT_POST_PC
// 
//
// DU_EXPORT_POST_UNIX
// 
//
//===========================================================================================================


#define DU_EXPORT_CSV 0
#define DU_EXPORT_ODDF 1
#define DU_EXPORT_POST_PC 2
#define DU_EXPORT_POST_UNIX 3


//===========================================================================================================
//
// DU_FILL Definitions
//
// Filling Options
//
// DU_FILL_INSIDE
// 
//
// DU_FILL_OUTSIDE
// 
//
//===========================================================================================================


#define DU_FILL_INSIDE 0
#define DU_FILL_OUTSIDE 1


//===========================================================================================================
//
// DU_IMPORT Definitions
//
// Import Mode
//
// DU_IMPORT_APPEND
// 
//
// DU_IMPORT_REPLACE
// 
//
// DU_IMPORT_MERGE
// 
//
// DU_IMPORT_MERGE_APPEND
// 
//
//===========================================================================================================


#define DU_IMPORT_APPEND 0
#define DU_IMPORT_REPLACE 1
#define DU_IMPORT_MERGE 2
#define DU_IMPORT_MERGE_APPEND 3


//===========================================================================================================
//
// DU_INTERP Definitions
//
// Inside Interpolation Method
//
// DU_INTERP_NEAREST
// 
//
// DU_INTERP_LINEAR
// 
//
// DU_INTERP_CUBIC
// 
//
// DU_INTERP_AKIMA
// 
//
// DU_INTERP_PREDICT
// 
//
//===========================================================================================================


#define DU_INTERP_NEAREST 1
#define DU_INTERP_LINEAR 2
#define DU_INTERP_CUBIC 3
#define DU_INTERP_AKIMA 4
#define DU_INTERP_PREDICT 5


//===========================================================================================================
//
// DU_INTERP_EDGE Definitions
//
// Edge Interpolation Method
//
// DU_INTERP_EDGE_NONE
// 
//
// DU_INTERP_EDGE_SAME
// 
//
// DU_INTERP_EDGE_NEAREST
// 
//
// DU_INTERP_EDGE_LINEAR
// 
//
//===========================================================================================================


#define DU_INTERP_EDGE_NONE 0
#define DU_INTERP_EDGE_SAME 1
#define DU_INTERP_EDGE_NEAREST 2
#define DU_INTERP_EDGE_LINEAR 3


//===========================================================================================================
//
// DU_LAB_TYPE Definitions
//
// File Types
//
// DU_LAB_TYPE_FREE
// The delimiter string identifies
// characters to be used as delimiters.  Use C style escape
// sequences to identify non-printable characters.  The
// default delimiters for FREE format files are " \t,".
//
// DU_LAB_TYPE_COMMA
// For COMMA type files, the delimiter string identifies
// characters to be removed before comma delimiting.  The
// default for COMMA delimited files is " \t".
//
//===========================================================================================================


#define DU_LAB_TYPE_FREE 1
#define DU_LAB_TYPE_COMMA 2


//===========================================================================================================
//
// DU_LEVEL Definitions
//
// Leveling Options
//
// DU_LEVEL_LINES
// Extract line corrections
//
// DU_LEVEL_TIES
// Extract tie corrections
//
// DU_LEVEL_ALL
// Extract all corrections
//
//===========================================================================================================


#define DU_LEVEL_LINES 0
#define DU_LEVEL_TIES 1
#define DU_LEVEL_ALL 2


//===========================================================================================================
//
// DU_LINEOUT Definitions
//
// Lineout Options (du.h)
//
// DU_LINEOUT_SINGLE
// 
//
// DU_LINEOUT_MULTIPLE
// 
//
//===========================================================================================================


#define DU_LINEOUT_SINGLE 0
#define DU_LINEOUT_MULTIPLE 1


//===========================================================================================================
//
// DU_FEATURE_TYPE_OUTPUT Definitions
//
// Export to geodatabase feature type (du.h)
//
// DU_FEATURE_TYPE_OUTPUT_POINT
// 
//
// DU_FEATURE_TYPE_OUTPUT_LINE
// 
//
//===========================================================================================================


#define DU_FEATURE_TYPE_OUTPUT_POINT 0
#define DU_FEATURE_TYPE_OUTPUT_LINE 1


//===========================================================================================================
//
// DU_GEODATABASE_EXPORT_TYPE Definitions
//
// Export to geodatabase overwrite mode(du.h)
//
// DU_GEODATABASE_EXPORT_TYPE_OVERWRITE_GEODATABASE
// 
//
// DU_GEODATABASE_EXPORT_TYPE_OVERWRITE_FEATURECLASS
// 
//
// DU_GEODATABASE_EXPORT_TYPE_APPEND
// 
//
//===========================================================================================================


#define DU_GEODATABASE_EXPORT_TYPE_OVERWRITE_GEODATABASE 0
#define DU_GEODATABASE_EXPORT_TYPE_OVERWRITE_FEATURECLASS 1
#define DU_GEODATABASE_EXPORT_TYPE_APPEND 2


//===========================================================================================================
//
// DU_LINES Definitions
//
// Lines to display
//
// DU_LINES_DISPLAYED
// 
//
// DU_LINES_SELECTED
// 
//
// DU_LINES_ALL
// 
//
//===========================================================================================================


#define DU_LINES_DISPLAYED 0
#define DU_LINES_SELECTED 1
#define DU_LINES_ALL 2


//===========================================================================================================
//
// DU_LOADLTB Definitions
//
// Load table options
//
// DU_LOADLTB_REPLACE
// 
//
// DU_LOADLTB_APPEND
// 
//
//===========================================================================================================


#define DU_LOADLTB_REPLACE 0
#define DU_LOADLTB_APPEND 1


//===========================================================================================================
//
// DU_LOOKUP Definitions
//
// Lookup Mode
//
// DU_LOOKUP_EXACT
// Requires an exact match in all indexes.
// Results will dummy if Indexes are not found.
//
// DU_LOOKUP_NEAREST
// Requires that the first index match exactly.
// The nearest second index will be used for the finding
// the lookup value.
// The results will be dummy only if the first index
// does not have a match.
//
// DU_LOOKUP_INTERPOLATE
// The same as _NEAREST, except that the value will
// be interpolated between the two nearest
// framing values in the table.
//
// DU_LOOKUP_NEARESTCLOSE
// Same as _NEAREST mode except that the target
// value must be within the CLOSE distance to a
// table value.
// a) the primary index channel for single index
// lookups;
// b) the secondary index channel for
// double index lookups.
// Values not in data spacing are dummy.
//
// DU_LOOKUP_INTERPCLOSE
// Same as _INTERPOLATE mode except that the target
// value must be within the CLOSE distance to a
// table value.
// a) the primary index channel for single index
// lookups;
// b) the secondary index channel for
// double index lookups.
// Values not in data spacing are dummy.
//
// DU_LOOKUP_INTERPOLATE_DUMMYOUTSIDE
// Interpolate between values, dummy beyond two ends
//
// DU_LOOKUP_INTERPOLATE_CONSTOUTSIDE
// Interpolate between values, constant end values beyond two ends
//
// DU_LOOKUP_INTERPOLATE_EXTPLOUTSIDE
// Interpolate between values, extrapolate beyond two ends
//
// DU_LOOKUP_MAXOPTION
// Maximum option value
//
//===========================================================================================================


#define DU_LOOKUP_EXACT 0
#define DU_LOOKUP_NEAREST 1
#define DU_LOOKUP_INTERPOLATE 2
#define DU_LOOKUP_NEARESTCLOSE 3
#define DU_LOOKUP_INTERPCLOSE 4
#define DU_LOOKUP_INTERPOLATE_DUMMYOUTSIDE 5
#define DU_LOOKUP_INTERPOLATE_CONSTOUTSIDE 6
#define DU_LOOKUP_INTERPOLATE_EXTPLOUTSIDE 7
#define DU_LOOKUP_MAXOPTION 8


//===========================================================================================================
//
// DU_MASK Definitions
//
// Masking Options
//
// DU_MASK_INSIDE
// 
//
// DU_MASK_OUTSIDE
// 
//
//===========================================================================================================


#define DU_MASK_INSIDE 0
#define DU_MASK_OUTSIDE 1


//===========================================================================================================
//
// DU_MERGE Definitions
//
// Merge flags
//
// DU_MERGE_APPEND
// 
//
//===========================================================================================================


#define DU_MERGE_APPEND 0


//===========================================================================================================
//
// DU_MODFID Definitions
//
// Fid Update Options
//
// DU_MODFID_INSERT
// Will insert fid range by moving data.  Inserted
// range will always be dummied out.  If the insertion point
// is before start of data, the fid start is changed.
//
// DU_MODFID_DELETE
// Will delete the range of fids.
//
// DU_MODFID_APPEND
// Is like INSERT, except that it is only used to
// add fids to the start or end of the existing data.  The
// data is not moved with repect to the current fid locations.
//
//===========================================================================================================


#define DU_MODFID_INSERT 0
#define DU_MODFID_DELETE 1
#define DU_MODFID_APPEND 2


//===========================================================================================================
//
// DU_MOVE Definitions
//
// Move Style
//
// DU_MOVE_ABSOLUTE
// Move input to absolute value in control channel
//
// DU_MOVE_MINUS
// Subtract control channel from input channel
//
// DU_MOVE_PLUS
// Add control channel to input channel
//
// DU_MOVE_INTERP
// data is NOT moved, but dummies in the input are interpolated
// based on the control channel, assuming both the input and control
// vary linearly inside the gaps
//
//===========================================================================================================


#define DU_MOVE_ABSOLUTE 0
#define DU_MOVE_MINUS 1
#define DU_MOVE_PLUS 2
#define DU_MOVE_INTERP 3


//===========================================================================================================
//
// DU_REFID Definitions
//
// Interpolation mode
//
// DU_REFID_LINEAR
// 0
//
// DU_REFID_MINCUR
// 1
//
// DU_REFID_AKIMA
// 2
//
// DU_REFID_NEAREST
// 3
//
//===========================================================================================================


#define DU_REFID_LINEAR 0
#define DU_REFID_MINCUR 1
#define DU_REFID_AKIMA 2
#define DU_REFID_NEAREST 3


//===========================================================================================================
//
// DU_SORT Definitions
//
// Sort Direction
//
// DU_SORT_ASCENDING
// 
//
// DU_SORT_DESCENDING
// 
//
//===========================================================================================================


#define DU_SORT_ASCENDING 0
#define DU_SORT_DESCENDING 1


//===========================================================================================================
//
// DU_SPLITLINE Definitions
//
// Sort Direction
//
// DU_SPLITLINE_XYPOSITION
// 
//
// DU_SPLITLINE_SEQUENTIAL
// 
//
// DU_SPLITLINE_TOVERSIONS
// 
//
//===========================================================================================================


#define DU_SPLITLINE_XYPOSITION 0
#define DU_SPLITLINE_SEQUENTIAL 1
#define DU_SPLITLINE_TOVERSIONS 2


//===========================================================================================================
//
// DU_STORAGE Definitions
//
// Storage Type
//
// DU_STORAGE_LINE
// 
//
// DU_STORAGE_GROUP
// 
//
//===========================================================================================================


#define DU_STORAGE_LINE 0
#define DU_STORAGE_GROUP 1


//===========================================================================================================
//
// QC_PLAN_TYPE Definitions
//
// Type Plan
//
// QC_PLAN_SURVEYLINE
// 
//
// QC_PLAN_TIELINE
// 
//
// QC_PLAN_BOTHLINES
// 
//
//===========================================================================================================


#define QC_PLAN_SURVEYLINE 0
#define QC_PLAN_TIELINE 1
#define QC_PLAN_BOTHLINES 2


//===========================================================================================================
//
// DU_DISTANCE_CHANNEL_TYPE Definitions
//
// Distance channel direction type
//
// DU_DISTANCE_CHANNEL_MAINTAIN_DIRECTION
// Zero distance is always at the start of the line.
//
// DU_DISTANCE_CHANNEL_CARTESIAN_COORDINATES
// Put zero at the end of the line with min X if X changes most, or min Y if Y changes most
//
//===========================================================================================================


#define DU_DISTANCE_CHANNEL_MAINTAIN_DIRECTION 0
#define DU_DISTANCE_CHANNEL_CARTESIAN_COORDINATES 1


//===========================================================================================================
//
// DU_DIRECTGRID_METHOD Definitions
//
// How to calculate the cell values for direct gridding.
//
// DU_DIRECTGRID_MIN
// 
//
// DU_DIRECTGRID_MAX
// 
//
// DU_DIRECTGRID_MEAN
// 
//
//===========================================================================================================


#define DU_DIRECTGRID_MIN 0
#define DU_DIRECTGRID_MAX 1
#define DU_DIRECTGRID_MEAN 2





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// _TableLook1_DU Create a new channel using a single reference table
//
// Notes          Fails if table does not contain requested fields.
//                The nominal data sample spacing for the CLOSE options is
//                calculated by finding the fiducial increment the
//                - primary index channel for Lookup1C_DU;
//                - secondary index channel for Lookup2C_DU, LookupIValC_DU
//                and LookupRValC_DU
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void _TableLook1_DU(DB,        // Database
                                DB_SYMB,   // Line Handle
                                DB_SYMB,   // Lookup reference channel [DB_LOCK_READONLY]
                                DB_SYMB,   // Output Channel Token     [DB_LOCK_READWRITE]
                                string,    // Reference field name in table
                                string,    // Lookup output name in table
                                int,       // DU_LOOKUP
                                real,      // CLOSE lookup distance. If 0.0, distance is calculated from lookup reference channel.
                                TB);       // TB table Object
#define TableLook1_DU _TableLook1_DU


  
//-----------------------------------------------------------------------------------------------------------
// _TableLook2_DU Create a new channel using a double reference  table.
//
// Notes          Fails if table does not contain requested fields.
//                The nominal data sample spacing for the CLOSE options is
//                calculated by finding the fiducial increment the
//                - primary index channel for Lookup1C_DU;
//                - secondary index channel for Lookup2C_DU, LookupIValC_DU
//                and LookupRValC_DU
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void _TableLook2_DU(DB,        // Database
                                DB_SYMB,   // Line Handle
                                DB_SYMB,   // Primary reference channel [DB_LOCK_READONLY]
                                DB_SYMB,   // Secondary reference channel [DB_LOCK_READONLY]
                                DB_SYMB,   // Output channel [DB_LOCK_READWRITE]
                                string,    // Primary reference field name in table
                                string,    // Secondary reference field name in table
                                string,    // Lookup result field name in table
                                int,       // DU_LOOKUP
                                real,      // CLOSE lookup distance.  If 0.0, distance is calculated from secondary reference channel.
                                TB);       // Table Object
#define TableLook2_DU _TableLook2_DU


  
//-----------------------------------------------------------------------------------------------------------
// _TableLookI2_DU Create a new channel using constant integer primary
//                 reference and a secondary reference table.
//
// Notes           Fails if table does not contain requested fields.
//                 The nominal data sample spacing for the CLOSE options is
//                 calculated by finding the fiducial increment the
//                 - primary index channel for Lookup1C_DU;
//                 - secondary index channel for Lookup2C_DU, LookupIValC_DU
//                 and LookupRValC_DU
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void _TableLookI2_DU(DB,        // Database
                                 DB_SYMB,   // Line Handle
                                 int,       // Lookup primary reference value
                                 DB_SYMB,   // Lookup secondary reference channel [DB_LOCK_READONLY]
                                 DB_SYMB,   // Output Channel Token [DB_LOCK_READWRITE]
                                 string,    // Primary reference field name in table
                                 string,    // Secondary reference field name in table
                                 string,    // Lookup result field name in table
                                 int,       // DU_LOOKUP
                                 real,      // CLOSE lookup distance.  If 0.0, distance calculated from secondary reference channel.
                                 TB);       // Table Object
#define TableLookI2_DU _TableLookI2_DU


  
//-----------------------------------------------------------------------------------------------------------
// _TableLookR2_DU Create a new channel using a constant real primary
//                 reference and a secondary reference table.
//
// Notes           Fails if table does not contain requested fields.
//                 The nominal data sample spacing for the CLOSE options is
//                 calculated by finding the fiducial increment the
//                 - primary index channel for Lookup1C_DU;
//                 - secondary index channel for Lookup2C_DU, LookupIValC_DU
//                 and LookupRValC_DU
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void _TableLookR2_DU(DB,        // Database
                                 DB_SYMB,   // Line Handle
                                 real,      // Primary reference value
                                 DB_SYMB,   // Secondary reference value [DB_LOCK_READONLY]
                                 DB_SYMB,   // Output Channel Token [DB_LOCK_READWRITE]
                                 string,    // Primary reference field name in table
                                 string,    // Secondary reference field name in table
                                 string,    // Lookup result field name in table
                                 int,       // DU_LOOKUP
                                 real,      // CLOSE lookup distance.  If 0.0, distance calculated from secondary reference channel.
                                 TB);       // Table Object
#define TableLookR2_DU _TableLookR2_DU


  
//-----------------------------------------------------------------------------------------------------------
// ADOTableNames_DU Scans a ADO-compliant database and returns the table names in a VV
//
// Notes            The VV must be created to hold strings of length
//                  STR_DB_SYMBOL; i.e. use
//                  Creat_VV(-STR_DB_SYMBOL, 0), or it will assert.
//
// Available        5.0.8
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ADOTableNames_DU(string,   // Database connection string
                                  VV);      // VV to return names in


  
//-----------------------------------------------------------------------------------------------------------
// AnSig_DU Calculate the Analytic Signal of a channel.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void AnSig_DU(DB,        // Database
                          DB_SYMB,   // Line handle
                          DB_SYMB,   // Input channel [DB_LOCK_READONLY]
                          DB_SYMB);  // Output Analytic Signal channel [DB_LOCK_READWRITE]


  
//-----------------------------------------------------------------------------------------------------------
// Append_DU Append a source database onto a destination database.
//
// Notes     If the source database and destination database have channels
//           with the same name, then data is appended onto the end
//           of the channel in lines which have the same number.
//           
//           If a channel in the destination database is not also in the source
//           database, it is ignored.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Append_DU(DB,    // Source Database
                           DB,    // Destination Database
                           int);  // Ignore write protection on channels? (TRUE or FALSE)


  
//-----------------------------------------------------------------------------------------------------------
// AvgAzimuth_DU Returns average azimuth of selected lines.
//
// Notes         Direction in degrees azimuth (clockwise relative
//               the +Y direction). The result is in the range
//               -90 < azimuth <= 90. The method handles lines going
//               in opposite directions (they do not average to 0!)
//               The method takes a precision, which is used to generate
//               a series of "test" angles.
//               The dot product of the line directions is taken
//               with each of the test angles, and the absolute values summed.
//               The maximum value occurs at the angle which most closely
//               approximates the trend direction of the lines.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void AvgAzimuth_DU(DB,         // Database Object
                               real,       // Precision in degrees (1 to 45)
                               var real);  // Azimuth value returned


  
//-----------------------------------------------------------------------------------------------------------
// AvgAzimuth2_DU Returns average azimuth of selected lines.
//
// Notes          Same as AvgAzimuth, but input the X and Y channels to use.
//
// Available      2023.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] void AvgAzimuth2_DU(DB,         // Database Object
                                string,     // X channel name
                                string,     // Y channel name
                                real,       // Precision in degrees (1 to 45)
                                var real);  // Azimuth value returned


  
//-----------------------------------------------------------------------------------------------------------
// rAverageSpacing_DU Returns the average spacing along a line.
//                    This is a simple average of the individual point separations after dummies are removed.
//                    Returns DUMMY if there are fewer than two valid locations.
//
// Available          2022.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] real rAverageSpacing_DU(DB,        // Database
                                    DB_SYMB,   // Line handle
                                    DB_SYMB,   // X channel [DB_LOCK_READONLY]
                                    DB_SYMB);  // Y channel [DB_LOCK_READONLY]


  
//-----------------------------------------------------------------------------------------------------------
// BaseData_DU This method corrects an entire database line using a
//             time-based correction table. It is given 2 input channel
//             tokens and 1 output channel token as well as the table
//             object to use.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void BaseData_DU(DB,        // Database
                             DB_SYMB,   // Line Handle to apply correction to
                             DB_SYMB,   // Input Channel Token  [DB_LOCK_READONLY]
                             DB_SYMB,   // Time Channel Token   [DB_LOCK_READONLY]
                             DB_SYMB,   // Output Channel Token [DB_LOCK_READWRITE]
                             TB);       // Table Object (a Date/Time/Correction Table)


  
//-----------------------------------------------------------------------------------------------------------
// BaseDataEx_DU This method corrects an entire database line using a
//               time-based correction table. It is given 2 input channel
//               tokens and 1 output channel token as well as the table
//               object to use (table sort flag=1 for sort, =0 for no sort).
//
// Available     5.1.8
//-----------------------------------------------------------------------------------------------------------

[_licensed] void BaseDataEx_DU(DB,        // Database
                               DB_SYMB,   // Line Handle to apply correction to
                               DB_SYMB,   // Input Channel Token  [DB_LOCK_READONLY]
                               DB_SYMB,   // Time Channel Token   [DB_LOCK_READONLY]
                               DB_SYMB,   // Output Channel Token [DB_LOCK_READWRITE]
                               TB,        // Table Object (a Date/Time/Correction Table)
                               int);      // Table sort flag: 0 - do not sort, 1 - do sort.


  
//-----------------------------------------------------------------------------------------------------------
// BoundLine_DU Set map boundary clip limits.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void BoundLine_DU(DB,        // Database
                              DB_SYMB,   // Line Handle [DB_LOCK_READWRITE]
                              DB_SYMB,   // X Channel   [DB_LOCK_READONLY]
                              DB_SYMB,   // Y Channel   [DB_LOCK_READONLY]
                              PLY);      // Polygon Object to use


  
//-----------------------------------------------------------------------------------------------------------
// BPFilt_DU This method applies a band-pass filter to the specified
//           line/channel and places the output in the output channel.
//
// Notes     If the short and long wavelengths are <= 0, the input channel
//           is simply copied to the output channel without filtering.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void BPFilt_DU(DB,        // Database
                           DB_SYMB,   // Line handle
                           DB_SYMB,   // Input channel to filter [DB_LOCK_READONLY]
                           DB_SYMB,   // Output filtered channel [DB_LOCK_READWRITE]
                           real,      // Short wavelength cutoff, 0 for highpass
                           real,      // Long wavelength cutoff, 0 for lowpass
                           int);      // Filter Length, 0 for default length


  
//-----------------------------------------------------------------------------------------------------------
// BreakLine_DU Break up a line based on line numbers in a channel.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void BreakLine_DU(DB,        // Database
                              DB_SYMB,   // Line to be broken up [DB_LOCK_READONLY]
                              DB_SYMB);  // Channel containing line numbers [DB_LOCK_READONLY]


  
//-----------------------------------------------------------------------------------------------------------
// BreakLine2_DU Break up a line based on line numbers in a channel.
//
// Notes         The same as BreakLine, but with an option to reset each line's starting fiducial to zero.
//
// Available     8.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void BreakLine2_DU(DB,        // Database
                               DB_SYMB,   // Line to be broken up [DB_LOCK_READONLY]
                               DB_SYMB,   // Channel containing line numbers [DB_LOCK_READONLY]
                               int);      // Reset starting fiducials to zero (0: No, 1: Yes)


  
//-----------------------------------------------------------------------------------------------------------
// BreakLineToGroups_DU Break up a line into group-lines based on a channel.
//
// Notes                The original line will be deleted.
//                      This is similar to BreakLine_DU, but the output lines
//                      are "group" lines, without the line type letters at the
//                      start. (See db.gxh for information of Group Lines).
//                      All channels are associated with each group line, and the
//                      input class name is assigned to each group.
//                      Class names for
//                      groups ensure that (for instance) if you add a new channel to
//                      one group of a given class, it will get added to all other
//                      groups in the same class. If the class name is left empty, then
//                      this will NOT be true. (Groups without class names are treated
//                      as isolated entities for the purposes of channel loading).
//
// Available            5.1.8
//-----------------------------------------------------------------------------------------------------------

[_licensed] void BreakLineToGroups_DU(DB,        // Database
                                      DB_SYMB,   // Line to be broken up [DB_LOCK_READONLY]
                                      DB_SYMB,   // Channel containing line numbers [DB_LOCK_READONLY]
                                      string);   // Class name for new group lines (can be "")


  
//-----------------------------------------------------------------------------------------------------------
// BreakLineToGroups2_DU Break up a line into group-lines based on a channel.
//
// Notes                 The same as BreakLineToGroups, but with an option to reset each line's starting fiducial to zero.
//
// Available             8.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void BreakLineToGroups2_DU(DB,        // Database
                                       DB_SYMB,   // Line to be broken up [DB_LOCK_READONLY]
                                       DB_SYMB,   // Channel containing line numbers [DB_LOCK_READONLY]
                                       string,    // Class name for new group lines (can be "")
                                       int);      // Reset starting fiducials to zero (0: No, 1: Yes)


  
//-----------------------------------------------------------------------------------------------------------
// BSpline_DU B-spline Interpolate a Channel.
//
// See also   Trend_DU
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void BSpline_DU(DB,        // Database
                            DB_SYMB,   // Line handle
                            DB_SYMB,   // Channel to interpolate [DB_LOCK_READONLY]
                            DB_SYMB,   // Output interpolated channel [DB_LOCK_READWRITE]
                            real,      // Data error (Std Dev > 0.0)
                            real,      // Roughness (Rou > 0.0)
                            real);     // Tension (0.<= Tension <=1.)


  
//-----------------------------------------------------------------------------------------------------------
// ClosestPoint_DU Return closest data point to input location.
//
// Notes           Selected lines are scanned for the (X, Y) location
//                 which is closest to the input location.
//                 The line and fiducial of the point are returned.
//                 
//                 Will register an error if no valid (X, Y) locations
//                 are found.
//
// Available       6.2
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ClosestPoint_DU(DB,         //
                                 real,       // X location
                                 real,       // Y location
                                 var real,   // Located X location
                                 var real,   // Located Y location
                                 var int,    // Line for located point
                                 var real);  // Fiducial of located point


  
//-----------------------------------------------------------------------------------------------------------
// CopyLine_DU Copy a line.
//
// Notes       Existing channels in the output line will be replaced
//             by copied channels.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void CopyLine_DU(DB,        // Database
                             DB_SYMB,   // Input Line  [DB_LOCK_READONLY]
                             DB_SYMB);  // Output Line [DB_LOCK_READWRITE]


  
//-----------------------------------------------------------------------------------------------------------
// CopyLineAcross_DU Copy a line from one database to another.
//
// Notes             Existing channels in the output line will be replaced
//                   by copied channels.
//
// See also          CopyLineChanAcross_DU function
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void CopyLineAcross_DU(DB,        // Input Database
                                 DB_SYMB,   // Input Line  [DB_LOCK_READONLY]
                                 DB,        // Output Database
                                 DB_SYMB);  // Output Line [DB_LOCK_READWRITE]


  
//-----------------------------------------------------------------------------------------------------------
// CopyLineChanAcross_DU Copy a list of channels in a line from one database to another.
//
// Notes                 Existing channels in the output line will be replaced
//                       by copied channels.
//
// See also              CopyLineAcross_DU function
//
// Available             5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void CopyLineChanAcross_DU(DB,        // Input Database
                                     DB_SYMB,   // Input Line   [DB_LOCK_READONLY]
                                     VV,        // VV containing a list of channel symbols, must be of INT
                                     DB,        // Output Database
                                     DB_SYMB);  // Output Line  [DB_LOCK_READWRITE]


  
//-----------------------------------------------------------------------------------------------------------
// CopyLineMasked_DU Copy a line, prune items based on a mask channel
//
// Notes             The input line's channel data is ReFidded to the mask
//                   channel, and then pruned from the output line data,
//                   based on the value of the VVU_PRUNE_XXX variable.
//                   For VVU_PRUNE_DUMMY, only those items where the mask channel
//                   value is not a dummy are retained, while the complement
//                   is retained for VV_PRUNE_VALID.
//
// Available         5.0.8
//-----------------------------------------------------------------------------------------------------------

[_public] void CopyLineMasked_DU(DB,        // Database Object
                                 DB_SYMB,   // Input  Line Symbol [DB_LOCK_READONLY]
                                 DB_SYMB,   // Mask Channel Symbol [DB_LOCK_READONLY]
                                 int,       // VVU_PRUNE
                                 DB_SYMB);  // Output Line Symbol [DB_LOCK_READWRITE]


  
//-----------------------------------------------------------------------------------------------------------
// DAOTableNames_DU Scans a DAO-compliant database and returns the table names in a VV
//
// Notes            The VV must be created to hold strings of length
//                  STR_DB_SYMBOL; i.e. use
//                  Creat_VV(-STR_DB_SYMBOL, 0), or it will assert.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void DAOTableNames_DU(string,   // Database file name
                                  string,   // Database Type
                                  VV);      // VV to return names in


  
//-----------------------------------------------------------------------------------------------------------
// Decimate_DU Copy and decimate a channel
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Decimate_DU(DB,        // Database
                             DB_SYMB,   // Line handle
                             DB_SYMB,   // Origin Channel [DB_LOCK_READONLY]
                             DB_SYMB,   // Destination Channel [DB_LOCK_READWRITE]
                             int);      // Decimation factor


  
//-----------------------------------------------------------------------------------------------------------
// Diff_DU Calculate differences within a channel.
//
// Notes   Differences with dummies result in dummies.
//         An even number of differences locates data accurately.
//         An odd number of differences locates result 1/2 element lower
//         in the VV.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Diff_DU(DB,        // Database
                         DB_SYMB,   // Line handle
                         DB_SYMB,   // Origin Channel [DB_LOCK_READONLY]
                         DB_SYMB,   // Destination Channel [DB_LOCK_READWRITE]
                         int);      // Number of differences


  
//-----------------------------------------------------------------------------------------------------------
// Distance_DU Create a distance channel from X and Y.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Distance_DU(DB,        // Database
                             DB_SYMB,   // Line symbol
                             DB_SYMB,   // X channel [DB_LOCK_READONLY]
                             DB_SYMB,   // Y channel [DB_LOCK_READONLY]
                             DB_SYMB);  // Output Distance channel [DB_LOCK_READWRITE]


  
//-----------------------------------------------------------------------------------------------------------
// Distance3D_DU Create a distance channel from XY or XYZ with direction options.
//
// Available     8.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Distance3D_DU(DB,        // Database
                               DB_SYMB,   // Line symbol
                               DB_SYMB,   // X channel [DB_LOCK_READONLY]
                               DB_SYMB,   // Y channel [DB_LOCK_READONLY]
                               DB_SYMB,   // Z channel [DB_LOCK_READONLY] (can be NULLSYMB)
                               int,       // DU_DISTANCE_CHANNEL_TYPE
                               DB_SYMB);  // Output Distance channel [DB_LOCK_READWRITE]


  
//-----------------------------------------------------------------------------------------------------------
// Distline_DU Calculate cummulative distance for a line.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Distline_DU(DB,         // Database
                             DB_SYMB,    // Line symbol
                             DB_SYMB,    // X channel [DB_LOCK_READONLY]
                             DB_SYMB,    // Y channel [DB_LOCK_READONLY]
                             var real);  // Cummulative distance (retruned)


  
//-----------------------------------------------------------------------------------------------------------
// DupChanLocks_DU Duplicate all channels protect-info from input DB.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DupChanLocks_DU(DB,   // Input Database handle
                               DB);  // Output Database handle.


  
//-----------------------------------------------------------------------------------------------------------
// DupChans_DU Duplicate all channels from input DB.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DupChans_DU(DB,   // Input Database handle
                           DB);  // Output Database handle.


  
//-----------------------------------------------------------------------------------------------------------
// EditDuplicates_DU Edit duplicate readings at individual location
//
// Notes             All the channels must be of the same fid incr/start and length.
//                   Protected channels are modified automatically.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void EditDuplicates_DU(DB,        // Database
                                   DB_SYMB,   // Line
                                   DB_SYMB,   // Channel X, unlocked
                                   DB_SYMB,   // Channel Y, unlocked
                                   int,       // DB_DUP
                                   int,       // DB_DUPEDIT
                                   real);     // Fiducial number (required if DB_DUPEDIT_SINGLE)


  
//-----------------------------------------------------------------------------------------------------------
// Export_DU Export to a specific format.
//
// Notes     For databases with both groups and lines:
//           If both lines and groups are selected, save only the lines.
//           If no lines are selected, (only groups), save the current line
//           if it is (1) a group and (2) selected, else save the first selected
//           group. ---
//           Option to filter out data where one of the channels has a dummy in it.
//           Option to allow a header with the channel names.
//           
//           The DU_CHANNELS_DISPLAYED option can be used to export any selection of
//           channels, listed by the symbols (DB_SYMB) values, cast to int values and
//           stored in a VV.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Export_DU(DB,       // Database
                         int,      // DU_EXPORT
                         string,   // Current line
                         VV,       // List of channels - channel symbols stored as INT
                         int,      // DU_CHANNELS
                         string,   // Data file name
                         int,      // Write out dummies?
                         int);     // Include a header with channel names?


  
//-----------------------------------------------------------------------------------------------------------
// Export2_DU Like Export_DU, but include line names as data.
//
// Notes      See Export_DU.
//            The line names are printed as the first column of data exported.
//
// Available  5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void Export2_DU(DB,       // Database
                          int,      // DU_EXPORT
                          string,   // Current line
                          VV,       // List of channels - channel symbols stored as INT
                          int,      // DU_CHANNELS
                          string,   // Data file name
                          int,      // Write out dummies?
                          int,      // Include a header with channel names?
                          int);     // Include line names as data?


  
//-----------------------------------------------------------------------------------------------------------
// ExportAMIRA_DU Export to database an AMIRA data file.
//
// Notes          Other defined FIELDS stored in the database (see ImportAMIRA_DU function)
//                will be automatically included in the export
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportAMIRA_DU(DB,       // Database
                              WA,       // AMIRA data file handle
                              string,   // Single column channel names, supporting comma (,) separated names of multiple channels, maximum 32 channels
                              string,   // VA channel name, required
                              string,   // Optional Time   channel name (must be VA channel and same array size as above VA channel)
                              string,   // Optional Errors channel name (must be VA channel and same array size as above VA channel)
                              string,   // Mandatory fields: DATATYPE
                              string,   // UNITS
                              string,   // CONFIG
                              string,   // INSTRUMENT
                              string);  // FREQUENCY


  
//-----------------------------------------------------------------------------------------------------------
// ExportAseg_DU Export to ASEG-GDF format file(s).
//
// Notes         At least one of the header file
//               or data file names must be set. (Unset names will get the
//               same file name, but with the extensions .dfn (header) or
//               .dat (data).
//               For databases with both groups and lines:
//               If both lines and groups are selected, save only the lines.
//               If no lines are selected, (only groups), save the current line
//               if it is (1) a group and (2) selected, else save the first selected
//               group. ---
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportAseg_DU(DB,       // Database
                             string,   // Current line
                             VV,       // Displayed channels
                             int,      // DU_CHANNELS
                             string,   // Header file name
                             string);  // Data file name


  
//-----------------------------------------------------------------------------------------------------------
// ExportAsegProj_DU Export to ASEG-GDF format file(s) (supports projections).
//
// Notes             At least one of the header file
//                   or data file names must be set. (Unset names will get the
//                   same file name, but with the extensions .dfn (header) or
//                   .dat (data).
//                   For databases with both groups and lines:
//                   If both lines and groups are selected, save only the lines.
//                   If no lines are selected, (only groups), save the current line
//                   if it is (1) a group and (2) selected, else save the first selected
//                   group. ---
//                   
//                   This version supports projections
//
// Available         5.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportAsegProj_DU(DB,       // Database
                                 string,   // Current line
                                 VV,       // Displayed channels
                                 int,      // DU_CHANNELS
                                 string,   // Export header file name
                                 string,   // Export data file name
                                 string,   // Export projection file name
                                 IPJ);     // Projection handle


  
//-----------------------------------------------------------------------------------------------------------
// ExportChanCRC_DU Export a channel as XML and compute a CRC value.
//
// Notes            The output file is an XML describing the channel. The
//                  CRC is of the channel data ONLY. To compute a CRC of the
//                  full channel (include metadata) do a CRC of the generated
//                  file.
//
// Available        6.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExportChanCRC_DU(DB,        // Database
                                  DB_SYMB,   // Channel
                                  var int,   // CRC Value returned
                                  string);   // File name to generate with XML


  
//-----------------------------------------------------------------------------------------------------------
// ExportCSV_DU Export to a CSV file.
//
// Notes        For databases with both groups and lines:
//              If both lines and groups are selected, save only the lines.
//              If no lines are selected, (only groups), save the current line
//              if it is (1) a group and (2) selected, else save the first selected
//              group. ---
//              Option to filter out data where one of the channels has a dummy in it.
//              Option to allow a header with the channel names.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExportCSV_DU(DB,       // Database
                              string,   // Current line
                              VV,       // Displayed channels
                              int,      // DU_CHANNELS
                              string,   // Data file name
                              int,      // Write out dummies?
                              int);     // Include a header with channel names?


  
//-----------------------------------------------------------------------------------------------------------
// ExportDatabaseCRC_DU Export a channel as XML and compute a CRC value.
//
// Notes                The output file is an XML describing the channel. The
//                      CRC is of the channel data ONLY. To compute a CRC of the
//                      full channel (include metadata) do a CRC of the generated
//                      file.
//
// Available            6.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExportDatabaseCRC_DU(DB,        // Database
                                      var int,   // CRC Value returned
                                      string);   // File name to generate with XML


  
//-----------------------------------------------------------------------------------------------------------
// ExportGBN_DU Export to a GBN data file.
//
// Notes        The iDispChanList_DBE or iSymbList_DB methods can be
//              used to obtain a list of channels.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportGBN_DU(DB,       // Database
                            VV,       // List of channels to export
                            string);  // Export data file name


  
//-----------------------------------------------------------------------------------------------------------
// ExportMDB_DU Export to a Microsoft Access Database (MDB) file.
//
// Notes        Similar to ExportGBN_DU, with the addition that
//              Groups go to individual tables, and lines go to
//              a single table, or individual tables, based on the
//              value of DU_LINEOUT
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportMDB_DU(DB,       // Database
                            string,   // Current line
                            VV,       // Displayed channels
                            int,      // DU_CHANNELS
                            int,      // DU_LINEOUT
                            string);  // Export data file name


  
//-----------------------------------------------------------------------------------------------------------
// ExportGeodatabase_DU Export to a ESRI Geodatabase file.
//
// Notes                Similar to ExportGBN_DU, with the addition that
//                      Groups go to individual tables, and lines go to
//                      a single table, or individual tables, based on the
//                      value of DU_LINEOUT
//
// Available            8.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExportGeodatabase_DU(DB,       // Database
                                      string,   // Feature class name
                                      string,   // Current line
                                      VV,       // Displayed channels
                                      int,      // DU_CHANNELS
                                      int,      // DU_FEATURE_TYPE_OUTPUT
                                      int,      // DU_LINEOUT
                                      string);  // Export data file name


  
//-----------------------------------------------------------------------------------------------------------
// GetExistingFeatureClassesInGeodatabase_DU Searches the geodatabases for an existing Feature class.
//
// Returns                                   0 - Feature class does not exist
//                                           1 - Feature class exists
//
// Notes                                     Searches the geodatabases for an existing Feature class
//
// Available                                 8.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] int GetExistingFeatureClassesInGeodatabase_DU(DB,       // Database
                                                          string,   // File geodatabase
                                                          LST,      // Feature class names to verify
                                                          VV);      // Output list of existing feature class names


  
//-----------------------------------------------------------------------------------------------------------
// ExportSHP_DU Export to a shape file or files.
//
// Notes        Similar to ExportMDB_DU, with the addition that groups go to indiviual files
//              with group name suffixes, and lines go to a single file, or multiple files
//              with line name suffixes, based on the value of DU_LINEOUT.
//
// Available    6.1
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportSHP_DU(DB,       // Database
                            string,   // Current line
                            VV,       // Displayed channels
                            int,      // DU_CHANNELS
                            int,      // DU_LINEOUT
                            string,   // Export shape file name or base filename (shp assumed if no extension given)
                            LST);     // LST object will be filled with shape files created


  
//-----------------------------------------------------------------------------------------------------------
// ExportXYZ_DU Export XYZdata from a database to an XYZ file.
//
// Notes        1. The export template can be in the local directory or the GEOSOFT
//              directory.  The import data file must include the path if it is not
//              in the local directory.
//              
//              2. Both the import template and data file must exist.
//              
//              3. Sample Template file
//              
//              [EXPORT XYZ]
//              EXPORT     CHAN {,FORMAT} {,WIDTH} {,DECIMAL}
//              WRITEDUMMY YES
//              CLIPMAP    YES
//              MAXPOINTS  1000
//              INCREMENT  .5
//              
//              4. This can be used to export a group, but the group must be the
//              currently displayed line, and only that group will be exported.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportXYZ_DU(DB,       // Database
                            string,   // Export data file name
                            string);  // Export template name


  
//-----------------------------------------------------------------------------------------------------------
// ExportXYZ2_DU Export XYZdata from a database to an XYZ file, using file handles.
//
// See also      ExportXYZ_DU
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportXYZ2_DU(DB,   // Database
                             WA,   // Export data file WA handle
                             RA);  // Export template file RA handle


  
//-----------------------------------------------------------------------------------------------------------
// FFT_DU Apply an FFT to space data.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void FFT_DU(DB,        // Database
                        DB_SYMB,   // Line handle
                        DB_SYMB,   // Space Channel [DB_LOCK_READONLY]
                        DB_SYMB,   // Real Channel  [DB_LOCK_READWRITE]
                        DB_SYMB);  // Imaginary Channel [DB_LOCK_READWRITE]


  
//-----------------------------------------------------------------------------------------------------------
// Filter_DU Apply a convolution filter to a channel.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Filter_DU(DB,        // Database
                           DB_SYMB,   // Line handle
                           DB_SYMB,   // Input channel [DB_LOCK_READONLY]
                           DB_SYMB,   // Output filtered channel [DB_LOCK_READWRITE]
                           FILTER);   // Filter handle (FLT)


  
//-----------------------------------------------------------------------------------------------------------
// GenLev_DU Generate a Level table from an Intersection Table.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GenLev_DU(DB,       // Database
                           string,   // Input Table file Name
                           string,   // Output Table file Name
                           real,     // Max. gradient
                           int);     // DU_LEVEL


  
//-----------------------------------------------------------------------------------------------------------
// GenLevDB_DU Generate a Level table from an Intersection Database
//
// Notes       Requires channels with the following names:
//             
//             ine, TFid, TZ, TDZ
//             Line, LFid, LZ, LDZ
//             Mask
//
// Available   7.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GenLevDB_DU(DB,       // Input intersection database object
                             string,   // Output Table File Name
                             real,     // Max. gradient
                             int);     // DU_LEVEL


  
//-----------------------------------------------------------------------------------------------------------
// GenXYZTemp_DU Generate default XYZ template for a XYZ file.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GenXYZTemp_DU(string,   // Xyz file name
                             string);  // Template file name to create


  
//-----------------------------------------------------------------------------------------------------------
// GetXYZNumFields_DU Get the number of fields in the XYZ file.
//
// Available          9.1
//-----------------------------------------------------------------------------------------------------------

[_public] void GetXYZNumFields_DU(string,    // Xyz file name
                                  var int);  // Returned number of fields


  
//-----------------------------------------------------------------------------------------------------------
// GetChanDataLST_DU Populate a LST with unique items in a channel.
//
// Notes             Items from all selected lines are collected,
//                   sorted, and duplicates removed. The output
//                   LST name and value are set to the item values.
//                   Non-string channels are converted internally to
//                   string values using Copy_VV,
//                   so results may differ from what
//                   you may expect given the current channel's display
//                   width and number of decimals.
//                   If a mask channel is selected, then only those items
//                   where the mask channel is not a dummy are collected.
//
// Available         6.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetChanDataLST_DU(DB,        // Database
                                   DB_SYMB,   // Data Channel
                                   DB_SYMB,   // Mask Channel  (can be NULLSYMB)
                                   LST);      // LST object to populate


  
//-----------------------------------------------------------------------------------------------------------
// GetChanDataVV_DU Populate a VV with unique items in a channel.
//
// Notes            Items from all selected lines are collected,
//                  sorted, and duplicates removed.
//                  The data is collected in the channel's data type,
//                  so normal Sort_VV rules apply.
//                  If the output VV and channel type are not the
//                  same, then the data is converted using the
//                  Copy_VV function, so see that for conversion rules.
//                  If a mask channel is selected, then only those items
//                  where the mask channel is not a dummy are collected.
//
// Available        6.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetChanDataVV_DU(DB,        // Database
                                  DB_SYMB,   // Channel
                                  DB_SYMB,   // Mask Channel  (can be NULLSYMB)
                                  VV);       // VV object to populate


  
//-----------------------------------------------------------------------------------------------------------
// rGetGriddingAzimuthToMinimizePadding_DU Return the gridding azimuth (degrees CW from north) that minimizes padding.
//
// Notes                                   Especially if the survey lines do not run N-S or E-W, gridding parallel to the XY axes
//                                         results in up to half the gridding area being dummies (padding), which is not only
//                                         inefficient, but affects processes like filtering. This algorithm determines the data
//                                         rotation required such that the gridding extents rectangle fit around the data minimizes the
//                                         amount of padding. The result is good to the nearest degree.
//                                         
//                                         The corner points are returned and include a buffer around the edge equal to 1% of the maximum height/width.
//                                         
//                                         The returned azimuth will be in the range 0 to 89.
//                                         
//                                         Operates on all selected lines.
//
// Available                               2023.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] real rGetGriddingAzimuthToMinimizePadding_DU(DB,         // Database
                                                         DB_SYMB,    // X channel [DB_LOCK_READONLY]
                                                         DB_SYMB,    // Y channel [DB_LOCK_READONLY]
                                                         DB_SYMB,    // Data or mask channel [DB_LOCK_READONLY]
                                                         var real,   // Returned Corner 1 - X
                                                         var real,   // Returned Corner 1 - Y
                                                         var real,   // Returned Corner 2 - X
                                                         var real,   // Returned Corner 2 - Y
                                                         var real,   // Returned Corner 3 - X
                                                         var real,   // Returned Corner 3 - Y
                                                         var real,   // Returned Corner 4 - X
                                                         var real);  // Returned Corner 4 - Y


  
//-----------------------------------------------------------------------------------------------------------
// GetAngledBoundingRectangle_DU Return the angled bounding rectangle for data to be gridded on an angle.
//
// Notes                         Especially if the survey lines do not run N-S or E-W, gridding parallel to the XY axes
//                               results in up to half the gridding area being dummies (padding), which is not only
//                               inefficient, but affects processes like filtering.
//                               This routine returns the rotated extents rectangle for a given gridding azimuth.
//                               The data is rotated CCW by the input azimuth. The N-S and E-W extents of the rotated
//                               data are determined and the bounding points rotated back by the input azimuth to locate
//                               the angled bounding rectangle around the input data. As with GetGriddingAzimuthToMinimizePadding_DU
//                               the extents are padded in each direction by 1% of the maximum height/width
//                               Operates on all selected lines.
//
// Available                     2023.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetAngledBoundingRectangle_DU(DB,         // Database
                                               DB_SYMB,    // X channel [DB_LOCK_READONLY]
                                               DB_SYMB,    // Y channel [DB_LOCK_READONLY]
                                               DB_SYMB,    // Data or mask channel [DB_LOCK_READONLY]
                                               real,       // Input Azimuth Angle - degrees CW from North
                                               var real,   // Returned Corner 1 - X
                                               var real,   // Returned Corner 1 - Y
                                               var real,   // Returned Corner 2 - X
                                               var real,   // Returned Corner 2 - Y
                                               var real,   // Returned Corner 3 - X
                                               var real,   // Returned Corner 3 - Y
                                               var real,   // Returned Corner 4 - X
                                               var real);  // Returned Corner 4 - Y


  
//-----------------------------------------------------------------------------------------------------------
// Gradient_DU This method takes 4 channels from input database and
//             duplicats each line twice to output database)
//             (input and Output can be the same channel).
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Gradient_DU(DB,        // Database InPut
                             DB,        // DAtabase Output
                             DB_SYMB,   // X Input Channel  [DB_LOCK_READONLY]
                             DB_SYMB,   // Y Input Channel  [DB_LOCK_READONLY]
                             DB_SYMB,   // Z Input Channel  [DB_LOCK_READONLY]
                             DB_SYMB,   // G Input Channel  [DB_LOCK_READONLY]
                             DB_SYMB,   // X Output Channel [DB_LOCK_READWRITE]
                             DB_SYMB,   // Y Output Channel [DB_LOCK_READWRITE]
                             DB_SYMB,   // Z Output Channel [DB_LOCK_READWRITE]
                             real,      // Angle
                             real);     // Width


  
//-----------------------------------------------------------------------------------------------------------
// GravDrift_DU Calculate base loop closure and correct for drift.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GravDrift_DU(DB,        // Database
                              DB_SYMB,   // Line                    [DB_LOCK_READONLY]
                              DB_SYMB,   // Date                    [DB_LOCK_READONLY]
                              DB_SYMB,   // Local time (on date)    [DB_LOCK_READONLY]
                              DB_SYMB,   // Reading                 [DB_LOCK_READONLY]
                              DB_SYMB,   // Base                    [DB_LOCK_READWRITE]
                              DB_SYMB);  // Closure error           [DB_LOCK_READWRITE]


  
//-----------------------------------------------------------------------------------------------------------
// GravDrift2_DU Calculate base loop closure, calculate drift correction and correct for drift.
//
// Available     9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GravDrift2_DU(DB,        // Database
                               DB_SYMB,   // Line                    [DB_LOCK_READONLY]
                               DB_SYMB,   // Date                    [DB_LOCK_READONLY]
                               DB_SYMB,   // Local time (on date)    [DB_LOCK_READONLY]
                               DB_SYMB,   // Reading                 [DB_LOCK_READONLY]
                               DB_SYMB,   // Base                    [DB_LOCK_READWRITE]
                               DB_SYMB,   // Closure error           [DB_LOCK_READWRITE]
                               DB_SYMB);  // Drift correction        [DB_LOCK_READWRITE]


  
//-----------------------------------------------------------------------------------------------------------
// GravTide_DU Calculate earth tide gravity correction.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GravTide_DU(DB,        // Database
                             DB_SYMB,   // Line
                             DB_SYMB,   // Lat  [DB_LOCK_READONLY]
                             DB_SYMB,   // Long [DB_LOCK_READONLY]
                             DB_SYMB,   // Date [DB_LOCK_READONLY]
                             DB_SYMB,   // Local time (on date) [DB_LOCK_READONLY]
                             real,      // GMT difference (added to time to give GMT)
                             DB_SYMB);  // Calculated tide [DB_LOCK_READWRITE]


  
//-----------------------------------------------------------------------------------------------------------
// GridLoad_DU Load grid data to a database.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridLoad_DU(DB,    // Database
                             IMG,   // Grid img
                             int,   // X decimation factor
                             int,   // Y decimation factor
                             int,   // 0 trim leading/trailing dummies (default), 1 trim all dummies, 2 leave all dummies
                             int);  // Flag for creating index channel: 0 no (default), 1 yes.


  
//-----------------------------------------------------------------------------------------------------------
// GridLoadXYZ_DU Load grid data to a database using specified channels
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridLoadXYZ_DU(DB,        // Database
                                IMG,       // Grid img
                                DB_SYMB,   // X Channel
                                DB_SYMB,   // Y Channel
                                DB_SYMB,   // Z Channel
                                DB_SYMB,   // Data Channel
                                int,       // X decimation factor
                                int,       // Y decimation factor
                                int,       // 0 trim leading/trailing dummies (default), 1 trim all dummies, 2 leave all dummies
                                int);      // Flag for creating index channel: 0 no (default), 1 yes.


  
//-----------------------------------------------------------------------------------------------------------
// Head_DU Applies a heading correction.
//
// Notes   Updates channel with Direction in degrees azimuth (counter-clockwise
//         relative the +Y direction).
//         GS_R8DM if the line has no data, or if there is a
//         problem.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Head_DU(DB,        // Database object
                         DB_SYMB,   // Line Symbol
                         DB_SYMB,   // Channel to correct [DB_LOCK_READONLY]
                         DB_SYMB,   // Corrected channel  [DB_LOCK_READWRITE]
                         TB,        // Heading table
                         real);     // Line direction


  
//-----------------------------------------------------------------------------------------------------------
// IImportBIN3_DU Same as ImportBIN2_DU, but returns the name of the imported line.
//
// Notes          See ImportBIN2_DU. Because the name of the created line is
//                not necessarily the value passed in (and the value passed in
//                can be blank), this version returns the name of the line
//                to which the data is actually imported.
//
// See also       ImportBIN2_DU
//
// Available      6.1
//-----------------------------------------------------------------------------------------------------------

[_public] void IImportBIN3_DU(DB,           // Database
                              string,       // Import data file name
                              string,       // Import template name
                              var string,   // Optional Line name (on return, the actual line)
                              int,          // Buffer size for line name
                              int,          // Optional Flight number
                              real,         // Optional date
                              WA);          //
#define ImportBIN3_DU(db, data, templ, line, flight, date, wa) IImportBIN3_DU(db, data, templ, line, sizeof(line), flight, date, wa)


  
//-----------------------------------------------------------------------------------------------------------
// ImpCBPly_DU Import concession boundary polygon file into a database
//
// Notes       The polygon file is provided by Ana Christina in Brazil.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ImpCBPly_DU(DB,        // Database
                             PJ,        // Projection Files Object
                             string,    // Import data file name
                             DB_SYMB,   // X channel handle
                             DB_SYMB);  // Y channel handle


  
//-----------------------------------------------------------------------------------------------------------
// ImportADO_DU Import an external database table into a group using ADO.
//
// Notes        1. The import template can be in the local directory or the GEOSOFT
//              directory.
//              
//              2. Only the import template must be specified. The database connection string,
//              the database table and Oasis line name are normally taken from the template
//              file itself, but if these values are provided, they will override those found in the template.
//              
//              3. If the line already exists, the data will overwrite the existing data.
//
// Available    5.0.8
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportADO_DU(DB,       // Database
                            string,   // Import database connection string       (overrides template value)
                            string,   // Imported table in database file (overrides template value)
                            string,   // Import template name
                            string);  // Oasis montaj line name to create (overrides template value)


  
//-----------------------------------------------------------------------------------------------------------
// ImportAllADO_DU Import an entire external database using ADO.
//
// Notes           1. For group storage, the table names are imported "as is". For line storage,
//                 if the table names are valid Geosoft line names, they are used as is.
//                 Otherwise, line names will be created with type LINE_NORMAL, starting at
//                 L0 and incrementing by 10 (L10, L20 etc.)
//                 
//                 2. If the line exists, the data will overwrite the existing data.
//                 
//                 3. All tables and fields will be imported.
//                 
//                 4. If connection string is of type "FILENAME=..." the connection will attempt to resolve
//                 it as a file database. (see also ODBCFileConnect_GUI)
//
// Available       5.0.8
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportAllADO_DU(DB,       // Database
                               string,   // Import database connection string
                               int);     // DU_STORAGE


  
//-----------------------------------------------------------------------------------------------------------
// ImportAllDAO_DU Import an entire external database using DAO.
//
// Notes           1. The file is assumed to be a DAO compliant database.
//                 
//                 2. The import data file must include the path if it is not
//                 in the local directory.
//                 
//                 3. For group storage, the table names are imported "as is". For line storage,
//                 if the table names are valid Geosoft line names, they are used as is.
//                 Otherwise, line names will be created with type LINE_NORMAL, starting at
//                 L0 and incrementing by 10 (L10, L20 etc.)
//                 
//                 4. If the line exists, the data will overwrite the existing data.
//                 
//                 5. All tables and fields will be imported.
//                 
//                 6. The following are valid type strings for DAO:
//                 
//                 MSJET       : Microsoft Access
//                 ODBC        : ODBC source
//                 dBASE III
//                 dBASE IV
//                 dBASE 5
//                 FoxPro 2.0
//                 FoxPro 2.5
//                 FoxPro 2.6
//                 Paradox 3.x
//                 Paradox 4.x
//                 Paradox 5.x
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportAllDAO_DU(DB,       // Database
                               string,   // Import data file name
                               string,   // Database type
                               int);     // DU_STORAGE


  
//-----------------------------------------------------------------------------------------------------------
// ImportAMIRA_DU Import an AMIRA data file.
//
// Notes          All the constant declarations are stored within the database
//                under \TEM\CONSTANTS. The format is as follows:
//                
//                    1. Lines stored in the file beginning with "/" are comments
//                    2. Each constant occupies a line in the file. It uses the format: CONSTANT=VALUE
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportAMIRA_DU(DB,   // Database
                              RA,   // AMIRA data file handle
                              WA);  // Log file handle


  
//-----------------------------------------------------------------------------------------------------------
// ImportAseg_DU Import an ASEG-GDF data file.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportAseg_DU(DB,       // Database
                             string,   // Template file name
                             string,   // Header file name
                             string,   // Data file name
                             string,   // Flight Line Channel name
                             int);     // Number of channels to import at one time


  
//-----------------------------------------------------------------------------------------------------------
// ImportAsegProj_DU Import an ASEG-GDF data file (supports projections).
//
// Notes             This version supports projections
//
// Available         5.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportAsegProj_DU(DB,       // Database
                                 string,   // Template file name
                                 string,   // Header file name
                                 string,   // Data file name
                                 string,   // Flight Line Channel name
                                 int,      // Number of channels to import at one time
                                 string,   // Projection file name
                                 string,   // Channel pair to associate projection
                                 string);  // Channel pair to associate projection


  
//-----------------------------------------------------------------------------------------------------------
// ImportBIN_DU Import blocked binary or archive ASCII data
//
// Notes        1. Binary import templates have extension .I2 by convention.  See
//              BINARY.I2 for a description of the template format.
//              Archive import templates have extension .I3 by convention. See
//              ARCHIVE.I3 for a description of the template format.
//              
//              2. Both the import template and data file must exist.
//              
//              3. If a line already exists in the database, a new version is created
//              unless a line name is passed in.  In this case, the specified name
//              is used and the imported channels on the previous line will be
//              destroyed.
//
// See also     LabTemplate_DU
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportBIN_DU(DB,       // Database
                            string,   // Import data file name
                            string,   // Import template name
                            string,   // Optional Line name (see note 3.)
                            int,      // Optional Flight number
                            real);    // Optional date


  
//-----------------------------------------------------------------------------------------------------------
// ImportBIN2_DU Import blocked binary or archive ASCII data with data error display
//
// Notes         1. Binary import templates have extension .I2 by convention.  See
//               BINARY.I2 for a description of the template format.
//               Archive import templates have extension .I3 by convention. See
//               ARCHIVE.I3 for a description of the template format.
//               
//               2. Both the import template and data file must exist.
//               
//               3. If a line already exists in the database, a new version is created
//               unless a line name is passed in.  In this case, the specified name
//               is used and the imported channels on the previous line will be
//               destroyed.
//
// See also      LabTemplate_DU
//
// Available     5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportBIN2_DU(DB,       // Database
                             string,   // Import data file name
                             string,   // Import template name
                             string,   // Optional Line name (see note 3.)
                             int,      // Optional Flight number
                             real,     // Optional date
                             WA);      //


  
//-----------------------------------------------------------------------------------------------------------
// ImportBIN4_DU Same as ImportBIN2_DU but with an import mode
//
// Notes         Same as ImportBIN2_DU but with an import mode
//
// See also      ImportBIN2_DU
//
// Available     9.1
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportBIN4_DU(DB,       // Database
                             int,      // DU_IMPORT
                             string,   // Import data file name
                             string,   // Import template name
                             string,   // Optional Line name (see note 3.)
                             int,      // Optional Flight number
                             real,     // Optional date
                             WA);      //


  
//-----------------------------------------------------------------------------------------------------------
// ImportDAARC500Serial_DU Import Serial data from the RMS Instruments DAARC500.
//
// Notes                   Imports data stored in a serial channel recorded
//                         by the RMS Instruments DAARC500 instrument, and outputs the data to
//                         a line in the database. The channels created depend on the input data type
//
// Available               7.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportDAARC500Serial_DU(DB,        // Database object
                                       DB_SYMB,   // Output line (DB_LOCK_READWRITE)
                                       string,    // Name of file to import
                                       int,       // Channel to import, 1-8
                                       int);      // GU_DAARC500_DATATYPE


  
//-----------------------------------------------------------------------------------------------------------
// ImportDAARC500SerialGPS_DU Import Serial GPS data from the RMS Instruments DAARC500.
//
// Notes                      Imports GPS data stored in a serial channel recorded
//                            by the RMS Instruments DAARC500 instrument, and outputs the data to
//                            a line in the database. Makes the following channels:
//                            
//                            Fid, UTC_Time, Latitude, Longitude, Altitude, GPS_Quality,
//                            NumSat (Number of satellites), GPS_HDOP (Horizontal Dilution of Position),
//                            Undulation, GPS_DiffAge (Age of differential channel).
//
// Available                  7.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportDAARC500SerialGPS_DU(DB,        // Database object
                                          DB_SYMB,   // Output line (DB_LOCK_READWRITE)
                                          string,    // Name of file to import
                                          int);      // Channel to import, 1-8


  
//-----------------------------------------------------------------------------------------------------------
// ImportDAO_DU Import an external database table into a group using DAO.
//
// Notes        1. The import template can be in the local directory or the GEOSOFT
//              directory.  The import data file must include the path if it is not
//              in the local directory.
//              
//              2. Only the import template must be specified. The database file name,
//              file type, the database table and Oasis line name are normally
//              taken from the template file itself, but if these values are provided,
//              they will override those found in the template.
//              
//              3. If the line already exists, the data will overwrite the existing data.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportDAO_DU(DB,       // Database
                            string,   // Import database file name   (overrides template value)
                            string,   // Import data file type       (overrides template value)
                            string,   // Imported table in database file (overrides template value)
                            string,   // Import template name
                            string);  // Oasis Montaj line name to create (overrides template value)


  
//-----------------------------------------------------------------------------------------------------------
// ImportESRI_DU Import an ArcGIS Geodatabase table or feature class into a GDB group
//
// Notes         1. The import template can be in the local directory or the GEOSOFT
//               directory.
//               
//               2. Only the import template must be specified. The Geodatabase connection string
//               and Oasis line name are normally taken from the template file itself,
//               but if these values are provided, they will override those found in the template.
//               
//               3. If the line already exists, the data will overwrite the existing data.
//
// Available     7.1
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportESRI_DU(DB,       // Database
                             string,   // Import database connection string (e.g. "d:\Personal\test.mdb|Table" or "d:\File\test.gdb|FeatureClass, overrides template value)
                             string,   // Import template name
                             string);  // Oasis montaj line name to create (overrides template value)


  
//-----------------------------------------------------------------------------------------------------------
// ImportGBN_DU Import GBN data file.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportGBN_DU(DB,       // Database
                            string);  // File name of the GBN file to import


  
//-----------------------------------------------------------------------------------------------------------
// ImportODDF_DU Import ODDF data file.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportODDF_DU(DB,       // Database
                             string);  // File name of the ODDF file to import


  
//-----------------------------------------------------------------------------------------------------------
// ImportPico_DU Import a Picodas data file.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportPico_DU(DB,       // Database
                             string,   // Template file name
                             string,   // Data file name
                             int);     // Number of channels to import at one time


  
//-----------------------------------------------------------------------------------------------------------
// ImportUBCModMsh_DU Import UBC Mod and Msh files.
//
// Notes              Each slice in X,Y or Z is imported to its own line in the database
//                    beginning with L0.
//
// Available          6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportUBCModMsh_DU(DB,       // Database Object
                                  string,   // Mesh file
                                  string,   // 1-5 Mod files, delimited with "|"
                                  int,      // Import slice direction (0-2 for X,Y and Z)
                                  real);    // Value to interpret as dummy


  
//-----------------------------------------------------------------------------------------------------------
// ImportUSGSPost_DU Import USGS Post data file.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportUSGSPost_DU(DB,       // Database
                                 string);  // File name of the USGS post file to import


  
//-----------------------------------------------------------------------------------------------------------
// ImportXYZ_DU Import XYZ data into the database.
//
// Notes        1. The import template can be in the local directory or the GEOSOFT
//              directory.  The import data file must include the path if it is not
//              in the local directory.
//              
//              2. Both the import template and data file must exist.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportXYZ_DU(DB,       // Database
                            int,      // DU_IMPORT
                            string,   // Import data file name
                            string);  // Import template name


  
//-----------------------------------------------------------------------------------------------------------
// ImportXYZ2_DU Import XYZ data into the database.
//
// Notes         1. The import template can be in the local directory or the GEOSOFT
//               directory.  The import data file must include the path if it is not
//               in the local directory.
//               
//               2. Both the import template and data file must exist.
//
// Available     5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportXYZ2_DU(DB,       // Database
                             int,      // DU_IMPORT
                             string,   // Import data file name
                             string,   // Import template name
                             WA);      //


  
//-----------------------------------------------------------------------------------------------------------
// ImportIoGAS_DU Import data columns from an ioGAS data file.
//
// Notes          1. All columns in the speficied ioGAS data file will be imported.
//                2. If a line already exists, the data will overwrite the existing data.
//
// Available      8.5
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportIoGAS_DU(DB,       // Database
                              string,   // Input data.csv file name
                              string);  // Input template file name


  
//-----------------------------------------------------------------------------------------------------------
// IndexOrder_DU Change the order of a channel using an index channel.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void IndexOrder_DU(DB,        // Database
                               DB_SYMB,   // Line symbol
                               DB_SYMB,   // Ordered index channel (should be int) [DB_LOCK_READONLY]
                               DB_SYMB);  // Channel to reorder [DB_LOCK_READWRITE]


  
//-----------------------------------------------------------------------------------------------------------
// Interp_DU Replace all dummies by interpolating from valid data.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Interp_DU(DB,        // Database
                           DB_SYMB,   // Line handle
                           DB_SYMB,   // Channel to interpolate [DB_LOCK_READONLY]
                           DB_SYMB,   // Output interpolated channel [DB_LOCK_READWRITE]
                           int,       // DU_INTERP
                           int);      // DU_INTERP_EDGE


  
//-----------------------------------------------------------------------------------------------------------
// InterpGap_DU Replace all dummies by interpolating from valid data.
//
// Available    8.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void InterpGap_DU(DB,        // Database
                              DB_SYMB,   // Line handle
                              DB_SYMB,   // Channel to interpolate [DB_LOCK_READONLY]
                              DB_SYMB,   // Output interpolated channel [DB_LOCK_READWRITE]
                              int,       // DU_INTERP
                              int,       // DU_INTERP_EDGE
                              int,       // Maximum gap to interpolate (fiducials)
                              int);      // Maximum items to extend at ends.


  
//-----------------------------------------------------------------------------------------------------------
// InterpGapAndFill_DU Replace all dummies by interpolating from valid data.
//
// Available           2022.2
//-----------------------------------------------------------------------------------------------------------

[_licensed] void InterpGapAndFill_DU(DB,        // Database
                                     DB_SYMB,   // Line handle
                                     DB_SYMB,   // Channel to interpolate [DB_LOCK_READONLY]
                                     DB_SYMB,   // Output interpolated channel [DB_LOCK_READWRITE]
                                     int,       // DU_INTERP
                                     int,       // DU_INTERP_EDGE
                                     int,       // Maximum gap to interpolate (fiducials)
                                     int,       // Maximum items to extend at ends.
                                     real);     // Value used to fill dummy channels.


  
//-----------------------------------------------------------------------------------------------------------
// Intersect_DU Create Tie Line & Normal Line intersect table.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Intersect_DU(DB,        // Database
                              DB_SYMB,   // X Channel [DB_LOCK_READONLY]
                              DB_SYMB,   // Y Channel [DB_LOCK_READONLY]
                              DB_SYMB,   // Z Channel [DB_LOCK_READONLY]
                              real,      // Intersection tolerance
                              string);   // Output Table file Name


  
//-----------------------------------------------------------------------------------------------------------
// IntersectAll_DU Create line intersect table from all lines.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void IntersectAll_DU(DB,        // Database
                                 DB_SYMB,   // X Channel [DB_LOCK_READONLY]
                                 DB_SYMB,   // Y Channel [DB_LOCK_READONLY]
                                 DB_SYMB,   // Z Channel [DB_LOCK_READONLY]
                                 real,      // Intersection tolerance
                                 string);   // Output Table file Name


  
//-----------------------------------------------------------------------------------------------------------
// IntersectGDBtoTBL_DU Create a new intersection table from an intersection database.
//
// Notes                If the TBL exists, it is overwritten.
//
// Available            7.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] void IntersectGDBtoTBL_DU(string,   // Input Intersection Database name
                                      string);  // Output intersection TBL


  
//-----------------------------------------------------------------------------------------------------------
// IntersectOld_DU Use existing intersection table and re-calculate miss-ties.
//
// Notes           Reads intersection information from an existing intersect
//                 table and looks up the values at the intersections for the
//                 input Z channel. This makes it unnecessary to re-calculate
//                 the intersections every time if you want to determine
//                 miss-ties using different Z channels, or the same Z channel
//                 after processing levelling corrections. Existing intersections
//                 whose locations do not exist in the database are ignored.
//
// Available       5.1.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void IntersectOld_DU(DB,        // Database
                                 DB_SYMB,   // X Channel [DB_LOCK_READONLY]
                                 DB_SYMB,   // Y Channel [DB_LOCK_READONLY]
                                 DB_SYMB,   // Z Channel [DB_LOCK_READONLY]
                                 string,    // Input Table file name
                                 string);   // Output Table file Name


  
//-----------------------------------------------------------------------------------------------------------
// IntersectTBLtoGDB_DU Create a new intersection database from an intersection table.
//
// Notes                If the GDB exists, it is deleted, so it should not
//                      be loaded.
//                      The database is split by Tie lines (or whatever lines are found in column 3
//                      of the TBL file.
//
// Available            7.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] void IntersectTBLtoGDB_DU(string,   // Input intersection TBL
                                      string);  // Output Intersection Database name


  
//-----------------------------------------------------------------------------------------------------------
// LabTemplate_DU Makes a default template from a lab assay file.
//
// Notes          The template can be used to import the file using
//                sImportBIN_DU.
//                
//                The first column is assumed to be the sample number.
//                
//                If the unit label line is the same as the column label
//                line, column labels are assummed to be followed by
//                unit labels using the format "Au-ppm", "Au ppm" or
//                "Au(ppm)".
//                
//                The number of channels is determined from the number of
//                columns in the data channel.  If there are more column
//                labels or unit labels, the last labels are assumed to
//                be correct.  If there are fewer line labels, default
//                labels "Col_n", where n is the column number, will be
//                created and no unit labels will be defined.
//
// See also       ImportBIN_DU
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LabTemplate_DU(string,   // Data file name
                              string,   // New template name
                              int,      // DU_LAB_TYPE
                              string,   // Delimiter string
                              int,      // Offset to column labels line (0 for first line)
                              int,      // Offset to unit labels line, -1 if none
                              int,      // Offset to first line that contains data
                              int,      // Sample channel element type, recommend -10 for 10-character ASCII, or GS_LONG for numbers.
                              int);     // Default channel element type, recommend GS_FLOAT


  
//-----------------------------------------------------------------------------------------------------------
// LoadGravity_DU Load a gravity survey file
//
// Notes          See GRAVITY.DAT for a description of the file format.
//                
//                Existing data in the line will be replaced.
//                
//                The following REG parameters will be set if they appear
//                in the data file:
//                default
//                OPERATOR             ""
//                DATE                 none
//                INSTRUMENT           ""
//                INSTRUMENT_SCALE     "1.0"
//                BASE_GRAVITY         "0.0"
//                FORMULA              "1967"
//                GMT_DIFF             "0.0"
//                DISTANCE_UNITS       "m"
//                DENSITY_EARTH        "2.67"
//                DENSITY_WATER        "1.0"
//                DENSITY_ICE          "0.95"
//                MAP_PROJECTION       ""
//                
//                If the corresponding constant is not specified and the
//                REG already has the constant defined, it is not changed.
//                If the constant is not defined and it is not already in
//                the REG, the indicated default will be set.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void LoadGravity_DU(DB,        // Database
                                REG,       // REG to hold constant data
                                DB_SYMB,   // Line in which to load data
                                string);   // Gravity data file


  
//-----------------------------------------------------------------------------------------------------------
// LoadGravityCG6_DU Load a CG-6 gravity survey file.
//
// Notes             Has its own format - space-delimited columns of data
//
// Available         9.3.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] void LoadGravityCG6_DU(DB,       // Database
                                   string);  // Gravity data file


  
//-----------------------------------------------------------------------------------------------------------
// LoadGravityCG6ToLine_DU Load a CG-6 gravity survey file. Specify the name of the output line
//
// Notes                   Has its own format - space-delimited columns of data
//
// Available               9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void LoadGravityCG6ToLine_DU(DB,       // Database
                                         string,   // Gravity data file
                                         string);  // line name - can be empty in which case it will create a line name from the input file name


  
//-----------------------------------------------------------------------------------------------------------
// LoadGravityCG6Ex_DU Load a CG-6 gravity survey file. Specify the name of the output line
//
// Notes               Has its own format - space-delimited columns of data
//
// Available           2022.2
//-----------------------------------------------------------------------------------------------------------

[_licensed] void LoadGravityCG6Ex_DU(DB,       // Database
                                     string,   // Gravity data file
                                     string,   // line name - can be empty in which case it will create a line name from the input file name
                                     int);     // DATE_FORMAT


  
//-----------------------------------------------------------------------------------------------------------
// LoadLTB_DU Load LTB into a database line.
//
// Notes      A new channel will be created for all LTB fields
//            that do not already exist.
//            The LTB field type will be double if all entries can be
//            converted to double, otherwise it will be a string type
//            set to the larger of 16 characters or the longest string
//            in the field.
//            
//            For _APPEND, the LTB data is simply added the end of each
//            channel.  ReFidAllCh_DU can be used to re-fid data to
//            match a specifc channel and there-by case all channels to be
//            the same length before appending data.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void LoadLTB_DU(DB,        // Database
                            DB_SYMB,   // Line
                            LTB,       // Table
                            int);      // DU_LOADLTB


  
//-----------------------------------------------------------------------------------------------------------
// MakeFid_DU Make a fiducial channel based on an existing channel.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void MakeFid_DU(DB,        // Database object
                          DB_SYMB,   // Line Symbol
                          DB_SYMB,   // Base channel [DB_LOCK_READONLY]
                          DB_SYMB);  // New fiducial channel [DB_LOCK_READWRITE]


  
//-----------------------------------------------------------------------------------------------------------
// Mask_DU Mask dummies in one channel against another.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Mask_DU(DB,        // Database
                         DB_SYMB,   // Line handle
                         DB_SYMB,   // Channel to mask [DB_LOCK_READWRITE]
                         DB_SYMB);  // Mask channel [DB_LOCK_READONLY]


  
//-----------------------------------------------------------------------------------------------------------
// Math_DU Apply an expression to the database
//
// Notes   The MATH_DU method will READWRITE lock channels on the left
//         side of expressions and READONLY lock channels on the right
//         side of expressions.  Channels are unlocked before returning.
//         Therefore, channels on the left side of an expression cannot
//         be locked READONLY because the Math_DU attempt to lock the
//         channel READWRITE will fail.  Similarly, channels on the right
//         side of an expression cannot be locked READWRITE because
//         Math_DU's attempt to lock the channels READONLY will fail.
//         
//         If this is confusing, just make sure no channels used in the
//         expression are locked before calling Math_DU.
//
// See also EXP
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Math_DU(DB,        // Database
                         DB_SYMB,   // Line handle
                         EXP);      // Math expression object (EXP)


  
//-----------------------------------------------------------------------------------------------------------
// MergeLine_DU Merge a line a the fiducial and copies any data past
//              that fiducial into the new line.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void MergeLine_DU(DB,        // Database
                              DB_SYMB,   // Input Line1 [DB_LOCK_READONLY]
                              DB_SYMB,   // Input Line2 [DB_LOCK_READONLY]
                              DB_SYMB,   // Output Line [DB_LOCK_READWRITE]
                              int);      // DU_MERGE


  
//-----------------------------------------------------------------------------------------------------------
// ModFidRange_DU Insert/Append/Delete a range of fids.
//
// Notes          Channels that do not have the same fid start or fid
//                increment are not processed.
//                
//                Protected channels are modified automatically.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ModFidRange_DU(DB,        // Database
                                DB_SYMB,   // Line
                                real,      // Base fid start
                                real,      // Base fid increment
                                int,       // Start index (can be negative)
                                int,       // Number of fids
                                int);      // DU_MODFID


  
//-----------------------------------------------------------------------------------------------------------
// Move_DU Move/correct a channel to a control channel.
//
// Notes   The input channel is moved to the absolute location
//         of the control channel.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Move_DU(DB,        // Database
                         DB_SYMB,   // Line Handle to Apply this to
                         DB_SYMB,   // Input channel   [DB_LOCK_READONLY]
                         DB_SYMB,   // Control channel [DB_LOCK_READONLY]
                         DB_SYMB,   // Result channel  [DB_LOCK_READWRITE]
                         int);      // DU_MOVE


  
//-----------------------------------------------------------------------------------------------------------
// NLFilt_DU This method applies a non-linear filter to the specified
//           line/channel and places the output in the output channel.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void NLFilt_DU(DB,        // Database
                           DB_SYMB,   // Line handle
                           DB_SYMB,   // Channel to filter [DB_LOCK_READONLY]
                           DB_SYMB,   // Output filtered channel [DB_LOCK_READWRITE]
                           int,       // Filter Width
                           real);     // Filter Tolerance, 0 for 10% of Std. Dev.


  
//-----------------------------------------------------------------------------------------------------------
// Normal_DU Set fid of all channels to match a specified channel.
//
// See also  ReFidAllCh_DU
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Normal_DU(DB,        // Database handle
                         DB_SYMB,   // Base Channel for normalization.  [DB_LOCK_READONLY]
                         int);      // Ignore write protection on channels?


  
//-----------------------------------------------------------------------------------------------------------
// PolyFill_DU Fill using a polygon with a value of 1.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void PolyFill_DU(DB,        // Database
                             DB_SYMB,   // Line Handle
                             DB_SYMB,   // X Channel [DB_LOCK_READONLY]
                             DB_SYMB,   // Y Channel [DB_LOCK_READONLY]
                             DB_SYMB,   // Channel to fill [DB_LOCK_READWRITE]
                             PLY,       // Polygon Object to use
                             int);      // DU_FILL


  
//-----------------------------------------------------------------------------------------------------------
// PolyMask_DU Mask against a polygon.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void PolyMask_DU(DB,        // Database
                             DB_SYMB,   // Line Handle
                             DB_SYMB,   // X Channel [DB_LOCK_READONLY]
                             DB_SYMB,   // Y Channel [DB_LOCK_READONLY]
                             DB_SYMB,   // Channel to mask [DB_LOCK_READWRITE]
                             PLY,       // Polygon Object to use
                             int);      // DU_MASK


  
//-----------------------------------------------------------------------------------------------------------
// ProjectData_DU Project X,Y channels
//
// Notes          Output channels can be the same as input channels
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ProjectData_DU(DB,        // Database
                                DB_SYMB,   // Line Handle to project
                                DB_SYMB,   // X Input Channel  [DB_LOCK_READONLY]
                                DB_SYMB,   // Y Input Channel  [DB_LOCK_READONLY]
                                DB_SYMB,   // X Output Channel [DB_LOCK_READWRITE]
                                DB_SYMB,   // Y Output Channel [DB_LOCK_READWRITE]
                                PJ);       // Projection object to Apply


  
//-----------------------------------------------------------------------------------------------------------
// ProjectXYZ_DU Project X,Y,Z channels from one system to another.
//
// Notes         Output channels can be the same as input channels
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ProjectXYZ_DU(DB,        // Database
                               DB_SYMB,   // Line Handle to project
                               DB_SYMB,   // X Input Channel  [DB_LOCK_READONLY]
                               DB_SYMB,   // Y Input Channel  [DB_LOCK_READONLY]
                               DB_SYMB,   // Z Input Channel  [DB_LOCK_READONLY]
                               DB_SYMB,   // X Output Channel [DB_LOCK_READWRITE]
                               DB_SYMB,   // Y Output Channel [DB_LOCK_READWRITE]
                               DB_SYMB,   // Z Output Channel [DB_LOCK_READWRITE]
                               PJ);       // Projection object to Apply


  
//-----------------------------------------------------------------------------------------------------------
// ProjPoints_DU Project X,Y(Z) channels with different projections
//
// Notes         Output channels can be the same as input channels
//
// Available     6.3
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ProjPoints_DU(DB,        // Database
                               DB_SYMB,   // Line Handle to project
                               DB_SYMB,   // X Input Channel  [DB_LOCK_READONLY]
                               DB_SYMB,   // Y Input Channel  [DB_LOCK_READONLY]
                               DB_SYMB,   // Z Input Channel  [DB_LOCK_READONLY] (can be DB_NULL_SYMB)
                               DB_SYMB,   // X Output Channel [DB_LOCK_READWRITE]
                               DB_SYMB,   // Y Output Channel [DB_LOCK_READWRITE]
                               DB_SYMB,   // Z Output Channel [DB_LOCK_READWRITE] (can be DB_NULL_SYMB)
                               DB_SYMB,   // Input Name Channel   [DB_LOCK_READONLY]
                               DB_SYMB,   // Input Datum Channel  [DB_LOCK_READONLY]
                               DB_SYMB,   // Input Method Channel [DB_LOCK_READONLY]
                               DB_SYMB,   // Input Unit Channel   [DB_LOCK_READONLY]
                               DB_SYMB,   // Input Local Datum Channel [DB_LOCK_READONLY]
                               DB_SYMB,   // Output Name Channel  [DB_LOCK_READONLY]
                               DB_SYMB,   // Output Datum Channel [DB_LOCK_READONLY]
                               DB_SYMB,   // Output Method Channel [DB_LOCK_READONLY]
                               DB_SYMB,   // Output Unit Channel  [DB_LOCK_READONLY]
                               DB_SYMB,   // Output Local Datum Channel [DB_LOCK_READONLY]
                               DB_SYMB,   // Error Channel [DB_LOCK_READWRITE]
                               int);      // Force Local Datum Shifts?


  
//-----------------------------------------------------------------------------------------------------------
// QCInitSeparation_DU Creates the nearest line channels for line separation QC.
//
// Notes               This must be called before QCSeparation_DU. It uses a pager to
//                     establish the relative positions of the selected lines, then,
//                     for every point determines the closest point in another line to
//                     the left and to the right (as determined by looking in the
//                     direction of the line.) These distances are stored to two new
//                     channels in the database, "Closest_Left" and "Closest_Right"
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void QCInitSeparation_DU(DB,     // Database
                                     real,   // Nominal Line separation
                                     real);  // Nominal Line direction


  
//-----------------------------------------------------------------------------------------------------------
// QCSurveyPlan_DU Create a database containing proposed survey plan in a PLY
//
// Notes           The LINE on which has the reference (X,Y) will have the starting Line number
//                 The lines on the right hand side of the reference line (while looking
//                 into azimuth of ref. line) have increasing line numbers. The lines
//                 on the left hand side have the decreasing line numbers from the starting
//                 number. Returns an error code or 0 (if successful)
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] int QCSurveyPlan_DU(DB,     // Database to save proposed survey plan
                                WA,     // WA to save survey plan summary
                                PLY,    // Boundary PLY
                                real,   // Survey line spacing
                                real,   // Survey line azimuth
                                real,   // Survey line reference X coordinate
                                real,   // Survey line reference Y coordinate
                                int,    // Survey line starting number of LINES
                                int,    // Line number increment for survey line
                                real,   // Tie line spacing
                                real,   // Tie line azimuth
                                real,   // Tie line reference X coordinate
                                real,   // Tie line reference Y coordinate
                                int,    // Tie line starting number of LINES
                                int,    // Line number increment for Tie line
                                int,    // QC_PLAN_TYPE
                                real,   // Sample spacing (spacing between points in lines)
                                real);  // Spacing to extend lines outside polygon


  
//-----------------------------------------------------------------------------------------------------------
// QCSurveyPlan2_DU Same as QCSurveyPlan_DU, but lines split by the polygon increment version numbers and keep the line number the same.
//
// Notes            The LINE on which has the reference (X,Y) will have the starting Line number
//                  The lines on the right hand side of the reference line (while looking
//                  into azimuth of ref. line) have increasing line numbers. The lines
//                  on the left hand side have the decreasing line numbers from the starting
//                  number. Returns an error code or 0 (if successful)
//
// Available        9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] int QCSurveyPlan2_DU(DB,     // Database to save proposed survey plan
                                 WA,     // WA to save survey plan summary
                                 PLY,    // Boundary PLY
                                 real,   // Survey line spacing
                                 real,   // Survey line azimuth
                                 real,   // Survey line reference X coordinate
                                 real,   // Survey line reference Y coordinate
                                 int,    // Survey line starting number of LINES
                                 int,    // Line number increment for survey line
                                 real,   // Tie line spacing
                                 real,   // Tie line azimuth
                                 real,   // Tie line reference X coordinate
                                 real,   // Tie line reference Y coordinate
                                 int,    // Tie line starting number of LINES
                                 int,    // Line number increment for Tie line
                                 int,    // QC_PLAN_TYPE
                                 real,   // Sample spacing (spacing between points in lines)
                                 real);  // Spacing to extend lines outside polygon


  
//-----------------------------------------------------------------------------------------------------------
// rDirection_DU Returns the direction of a line.
//
// Returns       direction in degrees azimuth (clockwise relative
//               the +Y direction).
//               GS_R8DM if the line has no data, or if there is a
//               problem.  Problems will register errors.
//
// Notes         The direction is calculated from the first and last
//               non-dummy locations in the X and Y reference channels.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rDirection_DU(DB,        // Database Object
                             DB_SYMB,   // Line Symbol
                             DB_SYMB,   // X reference channel [DB_LOCK_READONLY]
                             DB_SYMB);  // Y reference channel [DB_LOCK_READONLY]


  
//-----------------------------------------------------------------------------------------------------------
// ReFid_DU Re-fid a channel based on a reference channel
//
// Notes    The original channel can be an array channel, in which case
//          the columns (up to the number of columns available in the output)
//          are individually interpolated. If the number of
//          columns in the output channel is more than the input channel,
//          the remaining columns are dummied.
//          
//          This function is fundamentally different in behaviour from ReFidCh_DU.
//          The values in the Reference channel in ReFid_DU are the "X" locations
//          corresponding to the "Y" locations in the "Original Channel". Output
//          Channel values are calculated at the new "X" locations specified by
//          the Start Fid and the Fid Increment.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ReFid_DU(DB,        // Database Object
                        DB_SYMB,   // Line Symbol
                        DB_SYMB,   // Original Channel [DB_LOCK_READONLY]  "Y" values
                        DB_SYMB,   // Reference Channel [DB_LOCK_READONLY] "X" locations
                        DB_SYMB,   // Output Channel [DB_LOCK_READWRITE]
                        int,       // DU_REFID
                        real,      // Start Fid, if GS_R8DM, use ref channel minimum
                        real,      // Fid increment, if GS_R8DM use nominal spacing of the reference channel.
                        real);     // Maximum gap to interpolate across


  
//-----------------------------------------------------------------------------------------------------------
// ReFidAllCh_DU Simple re-fid of all channels based on a reference channel
//
// Notes         Channels can be array channels, in which case
//               the columns are individually re-fidded.
//
// See also      Normal_DU
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ReFidAllCh_DU(DB,        // Database Object
                             DB_SYMB,   // Line Symbol
                             DB_SYMB);  // Reference Channel [DB_LOCK_READONLY]


  
//-----------------------------------------------------------------------------------------------------------
// ReFidCh_DU Simple re-fid of a channel based on a reference channel
//
// Notes      The original channel can be an array channel, in which case
//            the columns are individually re-fidded.
//            
//            ReFidCh_DU resamples the "Channel to refid" to the "Reference Channel" Fid
//            range and increment.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ReFidCh_DU(DB,        // Database Object
                          DB_SYMB,   // Line Symbol
                          DB_SYMB,   // Reference Channel [DB_LOCK_READONLY]
                          DB_SYMB);  // Channel to refid  [DB_LOCK_READWRITE]


  
//-----------------------------------------------------------------------------------------------------------
// Rotate_DU Rotate coordinates.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Rotate_DU(DB,        // Database
                           DB_SYMB,   // Line symbol
                           DB_SYMB,   // Input X channel [DB_LOCK_READONLY]
                           DB_SYMB,   // Input Y channel [DB_LOCK_READONLY]
                           DB_SYMB,   // Output X channel [DB_LOCK_READWRITE]
                           DB_SYMB,   // Output Y channel [DB_LOCK_READWRITE]
                           real,      // X point about which to rotate
                           real,      // Y of point about which to rotate
                           real);     // Angle in degrees CCW


  
//-----------------------------------------------------------------------------------------------------------
// SampleGD_DU Sample a GD at a specified X and Y.
//
// Notes       Values in result channel
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SampleGD_DU(DB,        // Database
                             DB_SYMB,   // Line Handle to sample
                             DB_SYMB,   // X Input Channel [DB_LOCK_READONLY]
                             DB_SYMB,   // Y Input Channel [DB_LOCK_READONLY]
                             DB_SYMB,   // Z Output Channel sampled from GD [DB_LOCK_READWRITE]
                             GD);       // Grid handle


  
//-----------------------------------------------------------------------------------------------------------
// SampleIMG_DU Sample a IMG at a specified X and Y.
//
// Notes        Values in result channel
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SampleIMG_DU(DB,        // Database
                              DB_SYMB,   // Line Handle to sample
                              DB_SYMB,   // X Input Channel [DB_LOCK_READONLY]
                              DB_SYMB,   // Y Input Channel [DB_LOCK_READONLY]
                              DB_SYMB,   // Z Output Channel sampled from IMG [DB_LOCK_READWRITE]
                              IMG);      // IMG handle


  
//-----------------------------------------------------------------------------------------------------------
// SampleIMGLineLST_DU Sample an IMG at a specified X and Y, for a LST of lines.
//
// Notes               Values in result channel. Interpolation based on the current IMG render option (linear or nearest)
//
// Available           8.3
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SampleIMGLineLST_DU(DB,        // Database
                                     LST,       // LST of (Line Name, Line Handle) values to sample
                                     DB_SYMB,   // X Input Channel [DB_LOCK_READONLY]
                                     DB_SYMB,   // Y Input Channel [DB_LOCK_READONLY]
                                     DB_SYMB,   // Z Output Channel sampled from IMG [DB_LOCK_READWRITE]
                                     IMG);      // IMG handle


  
//-----------------------------------------------------------------------------------------------------------
// SampleIMGLineLSTEx_DU Sample an IMG at a specified X and Y, for a LST of lines.
//
// Notes                 Values in result channel
//
// Available             2024.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SampleIMGLineLSTEx_DU(DB,        // Database
                                       LST,       // LST of (Line Name, Line Handle) values to sample
                                       DB_SYMB,   // X Input Channel [DB_LOCK_READONLY]
                                       DB_SYMB,   // Y Input Channel [DB_LOCK_READONLY]
                                       DB_SYMB,   // Z Output Channel sampled from IMG [DB_LOCK_READWRITE]
                                       IMG,       // IMG handle
                                       int);      // 0: INTERP (linear) or 1: NEAREST (pixel)


  
//-----------------------------------------------------------------------------------------------------------
// ScanADO_DU Scans an external ADO database and generates a default template.
//
// Notes      All the channels are listed
//
// Available  5.0.8
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ScanADO_DU(string,   // Database connection string
                            string,   // Database Table Name
                            string);  // Template file name to Create


  
//-----------------------------------------------------------------------------------------------------------
// ScanAseg_DU This method scans an ASEG-GDF file and generates a default
//             template listing all the channels and all the ALIAS lines.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ScanAseg_DU(string,   // Header file name
                           string,   // Data file name
                           string,   // Flight Line Channel name
                           string);  // Template file name to Create


  
//-----------------------------------------------------------------------------------------------------------
// ScanDAO_DU Scans an external DAO database and generates a default template.
//
// Notes      All the channels are listed
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ScanDAO_DU(string,   // Database file name
                          string,   // Database Type
                          string,   // Database Table Name
                          string);  // Template file name to Create


  
//-----------------------------------------------------------------------------------------------------------
// ScanPico_DU This method scans a picodas file and generates a default
//             template listing all the channels and all the ALIAS lines.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ScanPico_DU(string,   // Data file Name
                             string);  // Template file name to Create


  
//-----------------------------------------------------------------------------------------------------------
// Sort_DU Sort the contents of a channel.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Sort_DU(DB,        // Database
                         DB_SYMB,   // Line symbol
                         DB_SYMB,   // Channel to sort [DB_LOCK_READONLY]
                         int);      // DU_SORT


  
//-----------------------------------------------------------------------------------------------------------
// SortIndex_DU Create an ordered index of the contents of a channel. The order of rows where compared items are the same is preserved.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SortIndex_DU(DB,        // Database
                              DB_SYMB,   // Line symbol
                              DB_SYMB,   // Channel to sort [DB_LOCK_READONLY]
                              DB_SYMB,   // Output index channel (should be int) [DB_LOCK_READWRITE]
                              int);      // DU_SORT


  
//-----------------------------------------------------------------------------------------------------------
// SortIndex2_DU Create an ordered index from two channels.  The order of rows where compared items are the same is preserved.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SortIndex2_DU(DB,        // Database
                               DB_SYMB,   // Line symbol
                               DB_SYMB,   // Sort by this channel [DB_LOCK_READONLY]
                               int,       // DU_SORT
                               DB_SYMB,   // Then by this channel [DB_LOCK_READONLY]
                               int,       // DU_SORT
                               DB_SYMB);  // Output index channel (should be int) [DB_LOCK_READWRITE]


  
//-----------------------------------------------------------------------------------------------------------
// SortIndexN_DU Create an ordered index from any number of channels.  The order of rows where compared items are the same is preserved.
//
// Available     9.10
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SortIndexN_DU(DB,        // Database
                               DB_SYMB,   // Line symbol
                               VV,        // VV of channel symbols (INT). Sort by these channels [DB_LOCK_READONLY]
                               VV,        // VV of sort order values (INT, one for each channel) DU_SORT
                               DB_SYMB);  // Output index channel (should be int) [DB_LOCK_READWRITE]


  
//-----------------------------------------------------------------------------------------------------------
// SplitLine_DU Splits a line a the fiducial and copies any data past
//              that fiducial into the new line.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SplitLine_DU(DB,        // Database
                              DB_SYMB,   // Input Line, will be reduced at fid  [DB_LOCK_READWRITE]
                              DB_SYMB,   // Output Line, will take data above fid [DB_LOCK_READWRITE]
                              real);     // Fid number of split


  
//-----------------------------------------------------------------------------------------------------------
// SplitLine2_DU Splits a line a the fiducial and copies any data past
//               that fiducial into the new line.
//
// Notes         The same as SplitLine, but with an option to reset each line's starting fiducial to zero.
//
// Available     8.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SplitLine2_DU(DB,        // Database
                               DB_SYMB,   // Input Line, will be reduced at fid  [DB_LOCK_READWRITE]
                               DB_SYMB,   // Output Line, will take data above fid [DB_LOCK_READWRITE]
                               real,      // Fid number of split
                               int);      // Reset starting fiducials to zero (0: No, 1: Yes)


  
//-----------------------------------------------------------------------------------------------------------
// SplitLineXY_DU Break up a line based on tolerance of lateral and horizontal distance, with
//                options for the output line names.
//
// Notes          The original line will be deleted.
//
// Available      8.3
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SplitLineXY_DU(DB,        // Database
                                DB_SYMB,   // Line to be broken up [DB_LOCK_READONLY]
                                DB_SYMB,   // Channel X [DB_LOCK_READWRITE]
                                DB_SYMB,   // Channel Y [DB_LOCK_READWRITE]
                                int,       // Line direction, 0-any, 1-X, 2-Y.
                                real,      // Lateral tolerance, DUMMY for the default (10% of the separation between the first two points.
                                real,      // Downline Tolerance, DUMMY for none
                                int,       // DU_SPLITLINE
                                var int,   // First line in the sequence, for DU_SPLITLINE_SEQUENTIAL. On return, the next line in the sequence.
                                int);      // Increment in the line number sequence, for DU_SPLITLINE_SEQUENTIAL


  
//-----------------------------------------------------------------------------------------------------------
// SplitLineXY2_DU Break up a line based on tolerance of lateral and horizontal distance, with
//                 options for the output line names.
//
// Notes           The same as SplitLineXY, but with an option to reset each line's starting fiducial to zero.
//
// Available       8.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SplitLineXY2_DU(DB,        // Database
                                 DB_SYMB,   // Line to be broken up [DB_LOCK_READONLY]
                                 DB_SYMB,   // Channel X [DB_LOCK_READWRITE]
                                 DB_SYMB,   // Channel Y [DB_LOCK_READWRITE]
                                 int,       // Line direction, 0-any, 1-X, 2-Y.
                                 real,      // Lateral tolerance, DUMMY for the default (10% of the separation between the first two points.
                                 real,      // Downline Tolerance, DUMMY for none
                                 int,       // DU_SPLITLINE
                                 var int,   // First line in the sequence, for DU_SPLITLINE_SEQUENTIAL. On return, the next line in the sequence.
                                 int,       // Increment in the line number sequence, for DU_SPLITLINE_SEQUENTIAL
                                 int);      // Reset starting fiducials to zero (0: No, 1: Yes)


  
//-----------------------------------------------------------------------------------------------------------
// SplitLineXY3_DU Break up a line based on tolerance of lateral and horizontal distance, with
//                 options for the output line names.
//
// Notes           The same as SplitLineXY2, but with the option to maintain line types when outputting sequentially numbered lines.
//
// Available       9.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SplitLineXY3_DU(DB,        // Database
                                 DB_SYMB,   // Line to be broken up [DB_LOCK_READONLY]
                                 DB_SYMB,   // Channel X [DB_LOCK_READWRITE]
                                 DB_SYMB,   // Channel Y [DB_LOCK_READWRITE]
                                 int,       // Line direction, 0-any, 1-X, 2-Y.
                                 real,      // Lateral tolerance, DUMMY for the default (10% of the separation between the first two points.
                                 real,      // Downline Tolerance, DUMMY for none
                                 int,       // DU_SPLITLINE
                                 var int,   // First line in the sequence, for DU_SPLITLINE_SEQUENTIAL. On return, the next line in the sequence.
                                 int,       // Increment in the line number sequence, for DU_SPLITLINE_SEQUENTIAL
                                 int,       // Maintain line types for DU_SPLITLINE_SEQUENTIAL  (0: No, 1: Yes)
                                 int);      // Reset starting fiducials to zero (0: No, 1: Yes)


  
//-----------------------------------------------------------------------------------------------------------
// SplitLineByDirection_DU The line is split when the heading (calculated from the current X and Y channels) changes by more than a specified amount over
//                         a specified distance. Additional options to discard too-short lines
//
// Notes                   Split a line based on changes in heading.
//
// Available               8.5
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SplitLineByDirection_DU(DB,        // Database
                                         DB_SYMB,   // Line to be broken up [DB_LOCK_READONLY]
                                         DB_SYMB,   // X Channel [DB_LOCK_READWRITE].
                                         DB_SYMB,   // Y Channel [DB_LOCK_READWRITE].
                                         real,      // Maximum angular change allowed (degrees)...
                                         real,      // ...over a distance of
                                         real,      // Delete lines shorter than (can be rDUMMY)
                                         real,      // Break on data XY separation greater than (can be rDUMMY)
                                         int,       // Whether to save too-short segments as special lines or to discard them
                                         int,       // DU_SPLITLINE ONLY DU_SPLITLINEXY_SEQUENTIAL and DU_SPLITLINEXY_VERSIONS
                                         var int,   // First line in the sequence, for DU_SPLITLINE_SEQUENTIAL. On return, the next line in the sequence.
                                         int,       // Increment in the line number sequence, for DU_SPLITLINE_SEQUENTIAL
                                         int);      // Reset starting fiducials to zero (0: No, 1: Yes)


  
//-----------------------------------------------------------------------------------------------------------
// SplitLineByDirection2_DU The same as SplitLineByDirection, but with the option to maintain line types when outputting sequentially numbered lines.
//
// Notes                    Split a line based on changes in heading.
//
// Available                9.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SplitLineByDirection2_DU(DB,        // Database
                                          DB_SYMB,   // Line to be broken up [DB_LOCK_READONLY]
                                          DB_SYMB,   // X Channel [DB_LOCK_READWRITE].
                                          DB_SYMB,   // Y Channel [DB_LOCK_READWRITE].
                                          real,      // Maximum angular change allowed (degrees)...
                                          real,      // ...over a distance of
                                          real,      // Delete lines shorter than (can be rDUMMY)
                                          real,      // Break on data XY separation greater than (can be rDUMMY)
                                          int,       // Whether to save too-short segments as special lines or to discard them
                                          int,       // DU_SPLITLINE ONLY DU_SPLITLINEXY_SEQUENTIAL and DU_SPLITLINEXY_VERSIONS
                                          var int,   // First line in the sequence, for DU_SPLITLINE_SEQUENTIAL. On return, the next line in the sequence.
                                          int,       // Increment in the line number sequence, for DU_SPLITLINE_SEQUENTIAL
                                          int,       // Maintain line types for DU_SPLITLINE_SEQUENTIAL  (0: No, 1: Yes)
                                          int);      // Reset starting fiducials to zero (0: No, 1: Yes)


  
//-----------------------------------------------------------------------------------------------------------
// Stat_DU Add a data channel to a statistics object.
//
// Notes   If the input channel is a VA (array) channel, then the columns set using
//         SetVAWindows_DB are used in the statistics; all columns are used by default.
//
// See also ST
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Stat_DU(DB,        // Database
                         DB_SYMB,   // Line handle
                         DB_SYMB,   // Channel handle [DB_LOCK_READONLY]
                         ST);       // Statistics handle


  
//-----------------------------------------------------------------------------------------------------------
// TableLineFid_DU Place a Line/Fid information into a Channel.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void TableLineFid_DU(DB,         // Database
                                 DB_SYMB,    // Output channel [DB_LOCK_READWRITE]
                                 DB_SYMB,    // Reference channel [DB_LOCK_READONLY]
                                 TB,         // Table to Use
                                 TB_FIELD);  // Table field wanted


  
//-----------------------------------------------------------------------------------------------------------
// TableSelectedLinesFid_DU Place a Line/Fid information into a Channel for the selected lines in the database.
//
// Available                9.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] void TableSelectedLinesFid_DU(DB,         // Database
                                          DB_SYMB,    // Output channel [DB_LOCK_READWRITE]
                                          DB_SYMB,    // Reference channel [DB_LOCK_READONLY]
                                          TB,         // Table to Use
                                          TB_FIELD);  // Table field wanted


  
//-----------------------------------------------------------------------------------------------------------
// TimeConstant_DU Calculate TEM time constant (Tau)
//
// Notes           When DU_TIME_LOG option is used, Time channel will be converted
//                 with logarithmic before calculating time constant.
//                 Logarthmic conversion is always applied to the response channel.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void TimeConstant_DU(DB,        // Database, required
                                 DB_SYMB,   // Line Handle, required
                                 DB_SYMB,   // Response channel, required [DB_LOCK_READONLY]
                                 DB_SYMB,   // Time channel, required [DB_LOCK_READONLY]
                                 DB_SYMB,   // Output Time constant (Tau) channel, required [DB_LOCK_READWRITE]
                                 DB_SYMB,   // Output Intercept channel, no output if NULLSYMB [DB_LOCK_READWRITE]
                                 DB_SYMB,   // Output predicted response channel, no output if NULLSYMB [DB_LOCK_READWRITE] Result is based on least square fit from Tau and Intercept
                                 int);      // Log option applied to time channel: 0 - linear, 1 - log10


  
//-----------------------------------------------------------------------------------------------------------
// Trend_DU Calculates an n'th order trend of a data channel.
//
// See also BSpline_DU
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Trend_DU(DB,        // Database
                          DB_SYMB,   // Line Handle to Apply this to
                          DB_SYMB,   // Input channel  [DB_LOCK_READONLY]
                          DB_SYMB,   // Result channel [DB_LOCK_READWRITE]
                          int);      // Trend Order, 0 to 9


  
//-----------------------------------------------------------------------------------------------------------
// UpdateIntersectDB_DU Update the Z and DZ values in an intersection database, using the current database.
//
// Notes                Updates the TZ, TDZ, LZ and LDZ channels at the intersections,
//                      using the current flight database.
//
// Available            7.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] void UpdateIntersectDB_DU(DB,        // Flight Database Object
                                      DB_SYMB,   // X Channel [DB_LOCK_READONLY] (for location info)
                                      DB_SYMB,   // Z Channel [DB_LOCK_READONLY]
                                      DB);       // Intersection database to update


  
//-----------------------------------------------------------------------------------------------------------
// VoxelSection_DU Slice a voxel to a grid under a database line.
//
// Notes           Takes the first and XY locations in a line (using the
//                 current X and Y channels) and defines a section grid
//                 as a slice through a voxel file.
//                 The grid cell sizes can be left as GS_R8DM, in which
//                 case an attempt will be made to match the voxel cell
//                 size, based on the line azimuth, voxel rotation, etc.
//                 
//                 If the slice does NOT intersect the voxel, or if
//                 there are fewer than 2 valid locations in the line,
//                 then no grid file is created, but there is no error.
//                 (This is to simplify creating multiple grids from
//                 at once, where not all may intersect).
//
// Available       6.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void VoxelSection_DU(DB,        // Database Object
                                 DB_SYMB,   // Input  Line Symbol [READWRITE]
                                 DB_SYMB,   // X Channel (DB_NO_SYMB if LineDir==0)
                                 DB_SYMB,   // Y Channel (DB_NO_SYMB if LineDir==0)
                                 VOX,       // Voxel to slice
                                 string,    // Output grid name
                                 real,      // X cell size (horizontal)
                                 real,      // Y cell size (vertical)
                                 int);      // Interp: 1 - linear, 0 - nearest


  
//-----------------------------------------------------------------------------------------------------------
// WriteWA_DU Write data to an ASCII file.
//
// Notes      Channels to be written should be placed in a LST object.
//            
//            Channels are written in the order of the list.  Only the
//            channel names in the list are used.
//            
//            Data is formated as in the channel definition and
//            channels are separated by a single space character.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void WriteWA_DU(DB,        // Database
                          DB_SYMB,   // Line symbol
                          LST,       // List of channel names to write
                          WA);       // WA to write to


  
//-----------------------------------------------------------------------------------------------------------
// XyzLine_DU Break up a line based on tolerance of lateral distance.
//
// Notes      The original line will be deleted.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void XyzLine_DU(DB,        // Database
                            DB_SYMB,   // Line to be broken up
                            DB_SYMB,   // Channel X
                            DB_SYMB,   // Channel Y
                            int,       // Line direction, 0-any, 1-X, 2-Y.
                            real);     // Tolerance, DUMMY for the default (10% of the separation between the first two points.


  
//-----------------------------------------------------------------------------------------------------------
// XyzLine2_DU Break up a line based on tolerance of lateral and horizontal distance.
//
// Notes       The original line will be deleted.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void XyzLine2_DU(DB,        // Database
                             DB_SYMB,   // Line to be broken up [DB_LOCK_READONLY]
                             DB_SYMB,   // Channel X [DB_LOCK_READWRITE]
                             DB_SYMB,   // Channel Y [DB_LOCK_READWRITE]
                             int,       // Line direction, 0-any, 1-X, 2-Y.
                             real,      // Tolerance, DUMMY for the default (10% of the separation between the first two points.
                             real);     // Downline Tolerance, DUMMY for none


  
//-----------------------------------------------------------------------------------------------------------
// XyzLine3_DU Break up a line based on tolerance of lateral and horizontal distance.
//
// Notes       The same as XyzLine2, but with an option to reset each line's starting fiducial to zero.
//
// Available   8.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void XyzLine3_DU(DB,        // Database
                             DB_SYMB,   // Line to be broken up [DB_LOCK_READONLY]
                             DB_SYMB,   // Channel X [DB_LOCK_READWRITE]
                             DB_SYMB,   // Channel Y [DB_LOCK_READWRITE]
                             int,       // Line direction, 0-any, 1-X, 2-Y.
                             real,      // Tolerance, DUMMY for the default (10% of the separation between the first two points.
                             real,      // Downline Tolerance, DUMMY for none
                             int);      // Reset starting fiducials to zero (0: No, 1: Yes)


  
//-----------------------------------------------------------------------------------------------------------
// ZMask_DU Mask dummies in one channel against another(Z) with the range Zmin/Zmax.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ZMask_DU(DB,        // Database
                          DB_SYMB,   // Line Handle
                          DB_SYMB,   // Channel to mask [DB_LOCK_READWRITE]
                          DB_SYMB,   // Mask Channel [DB_LOCK_READONLY]
                          real,      // Min value of mask range
                          real);     // Max value of mask range


  
//-----------------------------------------------------------------------------------------------------------
// RangeXY_DU Find the range of X, and Y in the selected lines.
//
// Notes      Returns the range in X and Y of the current X and Y channels.
//            Returned values are dummy if no valid items are found.
//
// Available  8.5
//-----------------------------------------------------------------------------------------------------------

[_licensed] void RangeXY_DU(DB,         // Database
                            var real,   // Minimum X (returned)
                            var real,   // Minimum Y (returned)
                            var real,   // Maximum X (returned)
                            var real);  // Maximum Y (returned)


  
//-----------------------------------------------------------------------------------------------------------
// RangeXYZ_DU Find the range of X, Y and Z in selected lines.
//
// Notes       The X, Y and Z channels should be normal (not array) channels.
//             Only locations where all values are non-dummy are included in the calculation.
//             If no non-dummy values are found, Dummy values are returned.
//
// Available   8.5
//-----------------------------------------------------------------------------------------------------------

[_licensed] void RangeXYZ_DU(DB,         // Database
                             DB_SYMB,    // X Channel [DB_LOCK_READONLY]
                             DB_SYMB,    // Y Channel [DB_LOCK_READONLY]
                             DB_SYMB,    // Z Channel [DB_LOCK_READONLY]
                             var real,   // Minimum X (returned)
                             var real,   // Minimum Y (returned)
                             var real,   // Minimum Z (returned)
                             var real,   // Maximum X (returned)
                             var real,   // Maximum Y (returned)
                             var real,   // Maximum Z (returned)
                             var int);   // Number of data values (returned)


  
//-----------------------------------------------------------------------------------------------------------
// RangeXYZData_DU Find the range of X, Y, Z and Data values in selected lines.
//
// Notes           The Z and Data channels may be array channels, but both must have
//                 the same number of columns.
//                 Only values where all channels are non-dummy (or, for VA channels,
//                 where the Z or Data value are defined) are included in the calculation.
//                 If no non-dummy values are found, Dummy values are returned.
//                 This function is optimized for cases where Z and Data are array channels
//                 with many columns (e.g. 32 or more columns).
//
// Available       8.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] void RangeXYZData_DU(DB,         // Database
                                 DB_SYMB,    // X Channel [DB_LOCK_READONLY]
                                 DB_SYMB,    // Y Channel [DB_LOCK_READONLY]
                                 DB_SYMB,    // Z Channel [DB_LOCK_READONLY]
                                 DB_SYMB,    // Data Channel [DB_LOCK_READONLY]
                                 var real,   // Minimum X (returned)
                                 var real,   // Minimum Y (returned)
                                 var real,   // Minimum Z (returned)
                                 var real,   // Minimum Data value (returned)
                                 var real,   // Maximum X (returned)
                                 var real,   // Maximum Y (returned)
                                 var real,   // Maximum Z (returned)
                                 var real,   // Maximum Data value (returned)
                                 var int);   // Number of data values (returned)


  
//-----------------------------------------------------------------------------------------------------------
// CreateDrillholeParameterWeightConstraintDatabase_DU Used for weighting inversion models.
//
// Notes                                               Control parameters are passed in the REG (to allow for future expansion without
//                                                     the need to modify the wrappers).
//                                                     The input drillhole database must contain current X, Y and Z channels.
//                                                     Drillhole data should be equally spaced (or nearly so) down the hole.
//                                                     Weights are calculated on a circle perpendicular to the hole at each point.
//                                                     
//                                                     RADIUS - Maximum radius from drillhole to create weighting points (Default = 100).
//                                                     INCRMENENT - Grid cell size in weighting circle (Default = 10).
//                                                     MINIMUM - the minimum weighting value to apply, at the radius (Default = 0.0001).
//                                                     POWER - Exponential power to use in the weighting function (negative of this is used) (Default = 2).
//
// Available                                           8.2
//-----------------------------------------------------------------------------------------------------------

[_licensed] void CreateDrillholeParameterWeightConstraintDatabase_DU(DB,        // Database (selected lines used)
                                                                     DB_SYMB,   // Property channel handle [DB_LOCK_READONLY]
                                                                     REG,       // Parameters (see notes)
                                                                     string);   // Output database


  
//-----------------------------------------------------------------------------------------------------------
// CalculateDrapedSurveyAltitude_DU Calculate a draped flight path, enforcing maximum descent and ascent rates.
//
// Notes                            Calculate a draped flight path, enforcing maximum descent and ascent rates. Additional Inputs are the sample distance along the line
//                                  and a topography grid.
//
// Available                        8.3
//-----------------------------------------------------------------------------------------------------------

[_licensed] void CalculateDrapedSurveyAltitude_DU(DB,        // Database
                                                  DB_SYMB,   // Line [DB_LOCK_READONLY]
                                                  DB_SYMB,   // X Channel [DB_LOCK_READONLY]
                                                  DB_SYMB,   // Y Channel [DB_LOCK_READONLY]
                                                  IMG,       // Topography grid
                                                  DB_SYMB,   // Output draped altitude channel [DB_LOCK_READWRITE]
                                                  real,      // Maximum rate of ascent (%)
                                                  real,      // Maximum rate of descent (%)
                                                  real,      // Minimum terrain clearance (drape height)
                                                  int,       // Number of times to apply Hanning Filter
                                                  real,      // Width of Hanning Filter
                                                  real);     // Minimum radius of curvature down slopes and at valley bottoms (rDUMMY to disable)


  
//-----------------------------------------------------------------------------------------------------------
// CalculateDrapedSurveyAltitude2_DU Calculate a draped flight path, enforcing maximum descent and ascent rates.
//
// Notes                             Calculate a draped flight path, enforcing maximum descent and ascent rates.
//                                   Set both a nominal and minimum drape height.
//                                   Additional Inputs are the sample distance along the line
//                                   and a topography grid.
//
// Available                         8.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void CalculateDrapedSurveyAltitude2_DU(DB,        // Database
                                                   DB_SYMB,   // Line [DB_LOCK_READONLY]
                                                   DB_SYMB,   // X Channel [DB_LOCK_READONLY]
                                                   DB_SYMB,   // Y Channel [DB_LOCK_READONLY]
                                                   IMG,       // Topography grid
                                                   DB_SYMB,   // Output DEM channel [DB_LOCK_READWRITE] (can be NULLSYMB if not required)
                                                   DB_SYMB,   // Output draped altitude channel [DB_LOCK_READWRITE]
                                                   real,      // Maximum rate of ascent (%)
                                                   real,      // Maximum rate of descent (%)
                                                   real,      // Nominal terrain clearance (drape height)
                                                   real,      // Minimum terrain clearance (hard minimum drape height)
                                                   int,       // Number of times to apply Hanning Filter
                                                   real,      // Width of Hanning Filter
                                                   real);     // Minimum radius of curvature down slopes and at valley bottoms (rDUMMY to disable)


  
//-----------------------------------------------------------------------------------------------------------
// DirectGridDataToVoxel_DU Create a voxel using direct gridding.
//
// Notes                    The Z and Data channels may be array channels. If they are, the array sizes must match.
//
// Available                8.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void DirectGridDataToVoxel_DU(DB,        // Database
                                          DB_SYMB,   // X channel [DB_LOCK_READONLY]
                                          DB_SYMB,   // Y channel [DB_LOCK_READONLY]
                                          DB_SYMB,   // Z channel [DB_LOCK_READONLY]
                                          DB_SYMB,   // Data channel [DB_LOCK_READONLY]
                                          string,    // Output voxel filename
                                          real,      // Voxel origin X
                                          real,      // Voxel origin Y
                                          real,      // Voxel origin Z
                                          int,       // Voxel cell count X
                                          int,       // Voxel cell count Y
                                          int,       // Voxel cell count Z
                                          real,      // Voxel cell size X
                                          real,      // Voxel cell size Y
                                          real,      // Voxel cell size Z
                                          int);      // DU_DIRECTGRID_METHOD


  
//-----------------------------------------------------------------------------------------------------------
// DirectGridItemCountsToVoxel_DU Create a voxel using direct gridding containing the number of data points in each cell.
//
// Notes                          The Z and Data channels may be array channels. If they are, the array sizes must match.
//
// Available                      8.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void DirectGridItemCountsToVoxel_DU(DB,        // Database
                                                DB_SYMB,   // X channel [DB_LOCK_READONLY]
                                                DB_SYMB,   // Y channel [DB_LOCK_READONLY]
                                                DB_SYMB,   // Z channel [DB_LOCK_READONLY]
                                                DB_SYMB,   // Data channel [DB_LOCK_READONLY]
                                                string,    // Output voxel filename
                                                real,      // Voxel origin X
                                                real,      // Voxel origin Y
                                                real,      // Voxel origin Z
                                                int,       // Voxel cell count X
                                                int,       // Voxel cell count Y
                                                int,       // Voxel cell count Z
                                                real,      // Voxel cell size X
                                                real,      // Voxel cell size Y
                                                real,      // Voxel cell size Z
                                                int);      // Replace zero values in output with DUMMY?



//===========================================================================================================
//
// EM Tau Calculation Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// iEMTauAutomatic_DU Automatic fitting EM Tau
//
// Returns            0 - OK
//                    1 - if error
//
// Available          9.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] int iEMTauAutomatic_DU(VV,         // Observed EM				[READONLY]
                                   VV,         // Time						[READONLY]
                                   VV,         // Noise						[READONLY]
                                   int,        // Time window				[READONLY]
                                   real,       // Starting Tau			[READONLY]
                                   real,       // Starting coeff. A		[READONLY]
                                   real,       // Iterarion tolerance	[READONLY]
                                   int,        // Maximum iteration		[READONLY]
                                   var int,    // Number of iterations
                                   var real,   // Calculated Tau
                                   var real,   // Calculated coeff. A
                                   var real,   // Calculated misfit
                                   var int,    // Error message code 0 (No error), 1 (Insufficient points above noise threshold) 2 (No convergence in 30 svdcmp iterations)
                                   VV);        // Calculated EM


  
//-----------------------------------------------------------------------------------------------------------
// iEMTauCalc_DU Fitting  f(t) = A * e^(-t/Tau) = e^s0 * e^(-s1*t), where s0=lnA, s1=1/Tau
//
// Returns       0 - OK
//               1 - if error
//
// Available     9.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] int iEMTauCalc_DU(VV,         // Observed EM				[READONLY]
                              VV,         // Time						[READONLY]
                              real,       // Starting Tau			[READONLY]
                              real,       // Starting coeff. A		[READONLY]
                              real,       // Iterarion tolerance	[READONLY]
                              int,        // Maximum iteration		[READONLY]
                              var int,    // Number of iterations
                              var real,   // Calculated Tau
                              var real,   // Calculated coeff. A
                              var real,   // Calculated misfit
                              var int,    // Error message code 0 (No error), 1 (Insufficient points above noise threshold) 2 (No convergence in 30 svdcmp iterations)
                              VV);        // Calculated EM


  
//-----------------------------------------------------------------------------------------------------------
// iEMTauLateTime_DU Automatic fitting EM Tau
//
// Returns           0 - OK
//                   1 - if error
//
// Available         9.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] int iEMTauLateTime_DU(VV,         // Observed EM				[READONLY]
                                  VV,         // Time						[READONLY]
                                  VV,         // Noise						[READONLY]
                                  int,        // Time window				[READONLY]
                                  int,        // 1-TauProcess: 2-MoveWindow		[READONLY]
                                  real,       // Max Tau					[READONLY]
                                  real,       // Starting Tau				[READONLY]
                                  real,       // Starting coeff. A		[READONLY]
                                  real,       // Iterarion tolerance	[READONLY]
                                  int,        // Maximum iteration		[READONLY]
                                  var int,    // Number of iterations
                                  var real,   // Calculated Tau
                                  var real,   // Calculated coeff. A
                                  var real,   // Calculated misfit
                                  var int,    // Error message code 0 (No error), 1 (Insufficient points above noise threshold) 2 (No convergence in 30 svdcmp iterations)
                                  VV);        // Calculated EM


  
//-----------------------------------------------------------------------------------------------------------
// iEMTauManual_DU Automatic fitting EM Tau
//
// Returns         0 - OK
//                 1 - if error
//
// Available       9.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] int iEMTauManual_DU(VV,         // Observed EM				[READONLY]
                                VV,         // Time						[READONLY]
                                VV,         // Noise						[READONLY]
                                real,       // Minimum time				[READONLY]
                                real,       // Maximum time				[READONLY]
                                real,       // Starting Tau				[READONLY]
                                real,       // Starting coeff. A		[READONLY]
                                real,       // Iterarion tolerance	[READONLY]
                                int,        // Maximum iteration		[READONLY]
                                var int,    // Number of iterations
                                var real,   // Calculated Tau
                                var real,   // Calculated coeff. A
                                var real,   // Calculated misfit
                                var int,    // Error message code 0 (No error), 1 (Insufficient points above noise threshold) 2 (No convergence in 30 svdcmp iterations)
                                VV);        // Calculated EM


  
//-----------------------------------------------------------------------------------------------------------
// EMTauTrendWindow_DU Automatic fitting EM Tau
//
// Available           9.5
//-----------------------------------------------------------------------------------------------------------

[_licensed] void EMTauTrendWindow_DU(VV,    // Observed EM				[READONLY]
                                     VV,    // Time						[READONLY]
                                     int,   // Get linear trends of nWindows consecutive points				[READONLY]
                                     VV,    // Calculated tau values - same number of items as hVVobs
                                     VV);   // rms error of fit


  
//-----------------------------------------------------------------------------------------------------------
// FootprintCoverageStatic_DU Compute the footprint of a survey
//
// Available                  9.5
//-----------------------------------------------------------------------------------------------------------

[_extended] void FootprintCoverageStatic_DU(DAT,        // Input DAT for the dataset
                                            PLY,        // The input area including exclusion regions
                                            real,       // The radius of the instrument
                                            int,        // Number of segments to define a circle (default 30)
                                            real,       // The maxium change in circumference allowed to reduce polygon complexity
                                            var real,   // Computed Covered Area
                                            var real,   // Computed Total Area
                                            MPLY);      // Computed coverted polygon and its exclusion regions


  
//-----------------------------------------------------------------------------------------------------------
// FootprintCoverageDynamic_DU Compute the footprint of a survey
//
// Available                   9.5
//-----------------------------------------------------------------------------------------------------------

[_extended] void FootprintCoverageDynamic_DU(DAT,        // Input DAT for the dataset
                                             PLY,        // The input area including exclusion regions
                                             string,     // Channel that defines the radius
                                             int,        // Number of segments to define a circle (default 30)
                                             real,       // The maxium change in circumference allowed to reduce polygon complexity
                                             var real,   // Computed Covered Area
                                             var real,   // Computed Total Area
                                             MPLY);      // Computed coverted polygon and its exclusion regions





//*** endblock Generated


#endif
