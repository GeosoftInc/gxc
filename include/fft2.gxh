//*** extends 'class_empty.gxh'

#ifndef HFFT2_GXH_DEFINED
#define HFFT2_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class FFT2
//
//-----------------------------------------------------------------------------------------------------------
//
// 2-D Fast Fourier Transforms
// These methods now work with an IMG object, instead of creating
// their own FFT2 object.
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// FFT2_PG Definitions
//
// Pager Direction
//
// FFT2_PG_FORWARD
// 
//
// FFT2_PG_INVERSE
// 
//
//===========================================================================================================


#define FFT2_PG_FORWARD 0
#define FFT2_PG_INVERSE 1





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// CrossCorrelationPG_FFT2 Calculate the cross-correlation of two transform pagers: 
//                         The complex conjugate of (r, i) items in the first pager are 
//                         multiplied by the second pager (r, i) values.
//
// Available               2023.2
//-----------------------------------------------------------------------------------------------------------

[_extended] void CrossCorrelationPG_FFT2(PG,    // Input pager 1
                                         PG,    // Input pager 2
                                         int,   // 0 - do not normalise, 1 - result is normalised by max value
                                         PG);   // Output pager


  
//-----------------------------------------------------------------------------------------------------------
// Fft2In_FFT2 FFT2 transform
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void Fft2In_FFT2(IMG,      // Input image
                             string,   // Output Transform file name string
                             string);  // Output Power Spectrum file name string


  
//-----------------------------------------------------------------------------------------------------------
// FilterPG_FFT2 Apply 2D FFT filters to data in pager
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void FilterPG_FFT2(PG,       // Pager obj
                               string,   // FFT filter control file
                               TR,       // TR obj
                               real,     // rDx - X increment
                               real,     // rDy - Y increment
                               real);    // rRot- Rotation degree


  
//-----------------------------------------------------------------------------------------------------------
// Flt_FFT2 FFT2 filter
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void Flt_FFT2(IMG,      // Input image (Transform grid)
                          string,   // Output file (Transform grid)
                          string);  // Control file


  
//-----------------------------------------------------------------------------------------------------------
// FltInv_FFT2 FFT2 filter and inverse
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void FltInv_FFT2(IMG,      // Input image (Transform grid)
                             string,   // Output file
                             string);  // Control file


  
//-----------------------------------------------------------------------------------------------------------
// PowSpc_FFT2 FFT2 transform power spectrum
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void PowSpc_FFT2(IMG,      // Input image (Transform grid)
                             string);  // Output Power Spectrum file name string


  
//-----------------------------------------------------------------------------------------------------------
// RadSpc_FFT2 FFT2 transform Radially averaged power spectrum
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void RadSpc_FFT2(IMG,      // Input image (Transform grid)
                             string);  // Output Radial Spectrum file name string


  
//-----------------------------------------------------------------------------------------------------------
// RadSpcAlt_FFT2 FFT2 transform Radially averaged power spectrum - log before average and no normalization
//
// Available      9.4
//-----------------------------------------------------------------------------------------------------------

[_extended] void RadSpcAlt_FFT2(IMG,      // Input image (Transform grid)
                                string);  // Output Radial Spectrum file name string


  
//-----------------------------------------------------------------------------------------------------------
// RadSpc1_FFT2 FFT2 transform Radially averaged power spectrum for one IMG
//
// Available    7.2
//-----------------------------------------------------------------------------------------------------------

[_public] void RadSpc1_FFT2(IMG,   // Input image (Transform grid)
                            VV);   // Output Radial Spectrum VV


  
//-----------------------------------------------------------------------------------------------------------
// RadSpc2_FFT2 FFT2 transform Radially averaged power spectrum for two IMGs
//
// Available    7.2
//-----------------------------------------------------------------------------------------------------------

[_public] void RadSpc2_FFT2(IMG,   // Input image1 (Transform grid1 - G)
                            IMG,   // Input image2 (Transform grid2 - H)
                            VV,    // Output Radial Spectrum VV
                            VV,    // Output Radial Spectrum Standard deviation VVst	(Null: no calc)
                            int);  // lOpt - 1: <Re(GH*/HH*)> VV;  0: <Re(GH*)> VV


  
//-----------------------------------------------------------------------------------------------------------
// TdXdY_FFT2 FFT2 filter (calculate T from the derivatives Tx and Ty)
//
// Available  5.0.1
//-----------------------------------------------------------------------------------------------------------

[_extended] void TdXdY_FFT2(IMG,      // Input dX image (Transform grid)
                            IMG,      // Input dY image (Transform grid)
                            string,   // Output T file name
                            int);     // 0 - no invers, 1 - invers FFT applied


  
//-----------------------------------------------------------------------------------------------------------
// TransPG_FFT2 Apply 2D FFT transform to data in pager
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_extended] void TransPG_FFT2(PG,    // Pager obj
                              int);  // FFT2_PG


  
//-----------------------------------------------------------------------------------------------------------
// FilterResponse_FFT2 Calculates response for filter(s) defined in control file. Not specific to 2D.
//
// Available           9.9
//-----------------------------------------------------------------------------------------------------------

[_public] void FilterResponse_FFT2(string,   // FFT filter control file
                                   real,     // Wavenumber start
                                   real,     // Wavenumber increment
                                   VV,       // Input spectrum
                                   VV,       // Output spectrum
                                   VV);      // Output filter profile





//*** endblock Generated


#endif
