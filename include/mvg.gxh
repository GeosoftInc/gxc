//*** extends 'class_empty.gxh'

#ifndef HMVG_GXH_DEFINED
#define HMVG_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class MVG
//
//-----------------------------------------------------------------------------------------------------------
//
// The MVG class provides the ability to create view graphs.
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// MVG_DRAW Definitions
//
// MVG draw define
//
// MVG_DRAW_POLYLINE
// 
//
// MVG_DRAW_POLYGON
// 
//
//===========================================================================================================


#define MVG_DRAW_POLYLINE 0
#define MVG_DRAW_POLYGON 1


//===========================================================================================================
//
// MVG_GRID Definitions
//
// MVG grid define
//
// MVG_GRID_DOT
// 
//
// MVG_GRID_LINE
// 
//
// MVG_GRID_CROSS
// 
//
//===========================================================================================================


#define MVG_GRID_DOT 0
#define MVG_GRID_LINE 1
#define MVG_GRID_CROSS 2


//===========================================================================================================
//
// MVG_LABEL_BOUND Definitions
//
// MVG label bound define
//
// MVG_LABEL_BOUND_NO
// 
//
// MVG_LABEL_BOUND_YES
// 
//
//===========================================================================================================


#define MVG_LABEL_BOUND_NO 0
#define MVG_LABEL_BOUND_YES 1


//===========================================================================================================
//
// MVG_LABEL_JUST Definitions
//
// MVG label justification define
//
// MVG_LABEL_JUST_TOP
// 
//
// MVG_LABEL_JUST_BOTTOM
// 
//
// MVG_LABEL_JUST_LEFT
// 
//
// MVG_LABEL_JUST_RIGHT
// 
//
//===========================================================================================================


#define MVG_LABEL_JUST_TOP 0
#define MVG_LABEL_JUST_BOTTOM 1
#define MVG_LABEL_JUST_LEFT 2
#define MVG_LABEL_JUST_RIGHT 3


//===========================================================================================================
//
// MVG_LABEL_ORIENT Definitions
//
// MVG label orientation
//
// MVG_LABEL_ORIENT_HORIZONTAL
// 
//
// MVG_LABEL_ORIENT_TOP_RIGHT
// 
//
// MVG_LABEL_ORIENT_TOP_LEFT
// 
//
//===========================================================================================================


#define MVG_LABEL_ORIENT_HORIZONTAL 0
#define MVG_LABEL_ORIENT_TOP_RIGHT 1
#define MVG_LABEL_ORIENT_TOP_LEFT 2


//===========================================================================================================
//
// MVG_SCALE Definitions
//
// MVG scale define
//
// MVG_SCALE_LINEAR
// 
//
// MVG_SCALE_LOG
// 
//
// MVG_SCALE_LOGLINEAR
// 
//
//===========================================================================================================


#define MVG_SCALE_LINEAR 0
#define MVG_SCALE_LOG 1
#define MVG_SCALE_LOGLINEAR 2


//===========================================================================================================
//
// MVG_WRAP Definitions
//
// MVG wrap define
//
// MVG_WRAP_NO
// 
//
// MVG_WRAP_YES
// 
//
//===========================================================================================================


#define MVG_WRAP_NO 0
#define MVG_WRAP_YES 1





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// AxisX_MVG Draw an X axis
//
// Notes     When Log annotation is applied, nice tick intervals will be
//           calculated
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void AxisX_MVG(MVG,    //
                           real,   // Y location in plot units (mm)
                           real,   // Left  X (rescaling unit)
                           real,   // Right X (rescaling unit)
                           real,   // Major tick interval (rescaling unit). Ticks drawn in decades in LOG or LOGLINEAR scale
                           real,   // Minor tick interval  (rescaling unit). Not used in LOG/LOGLINEAR
                           real);  // Tick size in view units (mm) (negative for down ticks)


  
//-----------------------------------------------------------------------------------------------------------
// AxisY_MVG Draw a  Y axis
//
// Notes     When Log annotation is applied, nice tick intervals will be
//           calculated
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void AxisY_MVG(MVG,    //
                           real,   // X location in plot units (mm)
                           real,   // Bottom Y (rescaling unit)
                           real,   // Top Y (rescaling unit)
                           real,   // Major tick interval (rescaling unit). Ticks drawn in decades in LOG or LOGLINEAR scale
                           real,   // Minor tick interval  (rescaling unit). Not used in LOG/LOGLINEAR
                           real);  // Tick size in plot units (mm)(negative for left ticks)


  
//-----------------------------------------------------------------------------------------------------------
// Create_MVG Create a MVG object
//
// Returns    MVG handle (NULL if error)
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] MVG Create_MVG(MAP,      // H_MAP handle
                           string,   // View Name
                           real,     // Minimum X in map unit (mm)
                           real,     // Minimum Y in map unit (mm)
                           real,     // Maximum X in map unit (mm)
                           real,     // Maximum Y in map unit (mm)
                           real,     // Minimum X in view unit (m for example)
                           real,     // Minimum Y in view unit
                           real,     // Maximum X in view unit
                           real);    // Maximum Y in view unit


  
//-----------------------------------------------------------------------------------------------------------
// Destroy_MVG Destroy the MVG handle.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Destroy_MVG(MVG);  // MVG Handle


  
//-----------------------------------------------------------------------------------------------------------
// GetMVIEW_MVG Get the MVIEW Handle of the Object.
//
// Returns      MVIEW Handle
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] MVIEW GetMVIEW_MVG(MVG);  // MVG object


  
//-----------------------------------------------------------------------------------------------------------
// Grid_MVG Draw a grid in the current MVG
//
// Notes    The grid will be drawn in the current window.
//          
//          In the LOG and LOGLINEAR rescaling modes, grids will be
//          drawn in decades and the X/Y grid increments will be
//          ignored.  In addition, grid lines at 0 (zero) and LOGMIN will be drawn.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Grid_MVG(MVG,    //
                          real,   // X position of 1st vertical grid line to draw (in rescaling unit)
                          real,   // Y position of 1st horizontal grid line to draw (in rescaling unit)
                          real,   // X grid increment of rescaled map unit (see above Rescaling functions)
                          real,   // Y grid increment of rescaled map unit (see above Rescaling functions)
                          real,   // X dot increment/cross X size of rescaled map unit
                          real,   // Y dot increment/cross Y size of rescaled map unit
                          int);   // MVG_GRID


  
//-----------------------------------------------------------------------------------------------------------
// LabelX_MVG Label annotations on the X axis
//
// Notes      Label bounding will justify edge labels to be inside
//            the bar limits.
//            
//            When Log annotation is applied, labels will be drawn in decades.
//
// See also   sAxisX_MVG
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void LabelX_MVG(MVG,    //
                            real,   // Y location in plot units (mm)
                            real,   // Left  X (rescaling unit)
                            real,   // Right X (rescaling unit)
                            real,   // Major tick interval (ignored if in LOG or LOGLINEAR rescaling)
                            int,    // Label justification MVG_LABEL_JUST
                            int,    // Edge label bounding MVG_LABEL_BOUND
                            int);   // Label orientation   MVG_LABEL_ORIENT


  
//-----------------------------------------------------------------------------------------------------------
// LabelY_MVG Label annotations on the Y axis
//
// Notes      Label bounding will justify edge labels to be inside
//            the bar limits.
//            
//            When Log annotation is applied, labels will be drawn in decades.
//
// See also   sAxisY_MVG
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void LabelY_MVG(MVG,    //
                            real,   // X location in plot units (mm)
                            real,   // Bottom  Y (rescaling unit)
                            real,   // Top Y (rescaling unit)
                            real,   // Label interval (ignored if in LOG or LOGLINEAR rescaling)
                            int,    // Label justification MVG_LABEL_JUST
                            int,    // Edge label bounding MVG_LABEL_BOUND
                            int);   // Label orientation   MVG_LABEL_ORIENT


  
//-----------------------------------------------------------------------------------------------------------
// PolyLineVA_MVG Creates PolyLines/polygons from VV and VA.
//
// Notes          If the VV contains dummies, the polylines
//                will break at the dummies; the polygons
//                will skip the dummies.
//                
//                If wrapping is applied, POLYGON parameter is ignored and
//                only POLYLINES are drawn.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void PolyLineVA_MVG(MVG,   //
                                int,   // MVG_DRAW
                                int,   // MVG_WRAP
                                VV,    // X VV
                                VA,    // Y VAs
                                VV);   // VV containing list of VA ranges, such as 1,2 40 ... Entire VA is drawn if this VV is empty.


  
//-----------------------------------------------------------------------------------------------------------
// PolyLineVV_MVG Creates PolyLines/polygons from VV and VV.
//
// Notes          If the VV contains dummies, the polylines
//                will break at the dummies; the polygons
//                will skip the dummies.
//                
//                If wrapping is applied, POLYGON parameter is ignored and
//                only POLYLINES are drawn.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void PolyLineVV_MVG(MVG,   //
                                int,   // MVG_DRAW
                                int,   // MVG_WRAP
                                VV,    // X VV
                                VV);   // Y VV


  
//-----------------------------------------------------------------------------------------------------------
// RescaleXRange_MVG Re-scale horizontal axis
//
// Notes             When RescaleX_MVG is used, only the scaling information
//                   related to X axis will be considered
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void RescaleXRange_MVG(MVG,    // MVG handle
                                   int,    // MVG_SCALE
                                   real,   // Scale information: new minimum X
                                   real,   // Scale information: new maximum X
                                   real);  // Scale information: minimum X to apply log10, it is defined only for LOGLINEAR scale


  
//-----------------------------------------------------------------------------------------------------------
// RescaleYRange_MVG Re-scale vertical axis
//
// Notes             When RescaleY_MVG is used, only the scaling information
//                   related to Y axis will be considered
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void RescaleYRange_MVG(MVG,    // MVG handle
                                   int,    // MVG_SCALE
                                   real,   // Scale information: new minimum Y
                                   real,   // Scale information: new maximum Y
                                   real);  // Scale information: minimum Y to apply log10, it is defined only for LOGLINEAR scale





//*** endblock Generated


#endif
