//*** extends 'class_empty.gxh'

#ifndef HVOX_GXH_DEFINED
#define HVOX_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class VOX
//
//-----------------------------------------------------------------------------------------------------------
//
// High Performance 3D Grid. Designed for accessing
// 3D grids quickly using slices. It designed arround
// non-uniform multi-resolution  compressed storage.
// To sample a voxel at specific locations, use VOXE.
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// VOX_DIR Definitions
//
// Voxel direction
//
// VOX_DIR_XY
// X/Y Plane (Fastest)
//
// VOX_DIR_XZ
// X/Z Plane (Middle)
//
// VOX_DIR_YZ
// Y/Z Plane (Slowest)
//
//===========================================================================================================


#define VOX_DIR_XY 0
#define VOX_DIR_XZ 1
#define VOX_DIR_YZ 2


//===========================================================================================================
//
// VOX_DIRECTION Definitions
//
// Voxel export direction
//
// VOX_3D_DIR_XYZ
// XYZ
//
// VOX_3D_DIR_YXZ
// YXZ
//
// VOX_3D_DIR_XZY
// XZY
//
// VOX_3D_DIR_YZX
// YZX
//
// VOX_3D_DIR_ZXY
// ZXY
//
// VOX_3D_DIR_ZYX
// ZYX
//
//===========================================================================================================


#define VOX_3D_DIR_XYZ 0
#define VOX_3D_DIR_YXZ 1
#define VOX_3D_DIR_XZY 2
#define VOX_3D_DIR_YZX 3
#define VOX_3D_DIR_ZXY 4
#define VOX_3D_DIR_ZYX 5


//===========================================================================================================
//
// VOX_FILTER3D Definitions
//
// Voxel filter type
//
// VOX_FILTER3D_FILE
// Specify a file containing the 27-point filter
//
// VOX_FILTER3D_SMOOTHING
// Smoothing filter
//
// VOX_FILTER3D_LAPLACE
// Laplace filter
//
// VOX_FILTER3D_X_GRADIENT
// X-Gradient filter
//
// VOX_FILTER3D_Y_GRADIENT
// Y-Gradient filter
//
// VOX_FILTER3D_Z_GRADIENT
// Z-Gradient filter
//
// VOX_FILTER3D_TOTAL_GRADIENT
// Total-Gradient filter
//
//===========================================================================================================


#define VOX_FILTER3D_FILE 0
#define VOX_FILTER3D_SMOOTHING 1
#define VOX_FILTER3D_LAPLACE 2
#define VOX_FILTER3D_X_GRADIENT 3
#define VOX_FILTER3D_Y_GRADIENT 4
#define VOX_FILTER3D_Z_GRADIENT 5
#define VOX_FILTER3D_TOTAL_GRADIENT 6


//===========================================================================================================
//
// VOX_GOCAD_ORIENTATION Definitions
//
// GOCAD Orientations
//
// VOX_GOCAD_ORIENTATIONS_NORMAL
// Normal
//
// VOX_GOCAD_ORIENTATIONS_INVERTED
// Inverted (Z)
//
// VOX_GOCAD_ORIENTATIONS_NORMAL_ZFIRST
// Normal (ZFirst)
//
// VOX_GOCAD_ORIENTATIONS_INVERTED_ZFIRST
// Inverted (Z) (ZFirst)
//
//===========================================================================================================


#define VOX_GOCAD_ORIENTATIONS_NORMAL 0
#define VOX_GOCAD_ORIENTATIONS_INVERTED 1
#define VOX_GOCAD_ORIENTATIONS_NORMAL_ZFIRST 2
#define VOX_GOCAD_ORIENTATIONS_INVERTED_ZFIRST 3


//===========================================================================================================
//
// VOX_GRID_LOGOPT Definitions
//
// Voxel log gridding options
//
// VOX_GRID_LOGOPT_LINEAR
// Linear
//
// VOX_GRID_LOGOPT_LOG_SAVELINEAR
// Log, save as linear
//
// VOX_GRID_LOGOPT_LOGLINEAR_SAVELINEAR
// Log-linear, save as linear
//
// VOX_GRID_LOGOPT_LOG_SAVELOG
// Log, save as log
//
// VOX_GRID_LOGOPT_LOGLINEAR_SAVELOG
// Log-linear, save as log
//
//===========================================================================================================


#define VOX_GRID_LOGOPT_LINEAR 0
#define VOX_GRID_LOGOPT_LOG_SAVELINEAR -1
#define VOX_GRID_LOGOPT_LOGLINEAR_SAVELINEAR -2
#define VOX_GRID_LOGOPT_LOG_SAVELOG 1
#define VOX_GRID_LOGOPT_LOGLINEAR_SAVELOG 2


//===========================================================================================================
//
// VOX_ORIGIN Definitions
//
// Voxel origin
//
// VOX_ORIGIN_BOTTOM
// Bottom corner (standard Geosoft)
//
// VOX_ORIGIN_TOP
// Top corner
//
//===========================================================================================================


#define VOX_ORIGIN_BOTTOM 0
#define VOX_ORIGIN_TOP 1


//===========================================================================================================
//
// VOX_SLICE_MODE Definitions
//
// Voxel export direction
//
// VOX_SLICE_MODE_LINEAR
// Linear
//
// VOX_SLICE_MODE_NEAREST
// Nearest
//
//===========================================================================================================


#define VOX_SLICE_MODE_LINEAR 1
#define VOX_SLICE_MODE_NEAREST 0


//===========================================================================================================
//
// VOX_VECTORVOX_IMPORT Definitions
//
// Voxel direction
//
// VOX_VECTORVOX_XYZ
// X, Y and Z
//
// VOX_VECTORVOX_UVW
// U, V and W
//
// VOX_VECTORVOX_AID
// Amplitude, Inclination and Declination
//
//===========================================================================================================


#define VOX_VECTORVOX_XYZ 0
#define VOX_VECTORVOX_UVW 1
#define VOX_VECTORVOX_AID 2





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// CalcStats_VOX Calculate Statistics
//
// Available     6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void CalcStats_VOX(VOX,   // VOX object
                             ST);   // ST Object


  
//-----------------------------------------------------------------------------------------------------------
// Create_VOX Create a handle to an VOX object
//
// Returns    VOX handle, terminates if creation fails
//
// Available  6.2
//-----------------------------------------------------------------------------------------------------------

[_public] VOX Create_VOX(string);  // File Name


  
//-----------------------------------------------------------------------------------------------------------
// CreatePG_VOX Create a 3D PG from a VOX object
//
// Returns      PG Object
//
// Available    6.2
//-----------------------------------------------------------------------------------------------------------

[_public] PG CreatePG_VOX(VOX);  // VOX Handle


  
//-----------------------------------------------------------------------------------------------------------
// CreateTypePG_VOX Create a 3D PG from a VOX object with a specific Type
//
// Returns          PG Object
//
// Available        6.2
//-----------------------------------------------------------------------------------------------------------

[_public] PG CreateTypePG_VOX(VOX,   // VOX Handle
                              int);  // GS_TYPES


  
//-----------------------------------------------------------------------------------------------------------
// Destroy_VOX Destroy a VOX.
//
// Available   6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void Destroy_VOX(VOX);  // VOX to destroy.


  
//-----------------------------------------------------------------------------------------------------------
// Dump_VOX Export all layers of this VOX in all directions.
//
// Available 6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void Dump_VOX(VOX,      // VOX Handle
                        string);  // Name of grids (each layers adds _Dir_Z to the name)


  
//-----------------------------------------------------------------------------------------------------------
// ExportIMG_VOX Export all layers of this VOX into grid files.
//
// Available     6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportIMG_VOX(VOX,      // VOX Handle
                             string,   // Name of grids (each layers adds _Number to the name)
                             int);     // VOX_DIR


  
//-----------------------------------------------------------------------------------------------------------
// ExportToGrids_VOX Export all layers of this VOX into grid files, with optional cell size.
//
// Notes             If the cell size is not specified, then:
//                   1. If the cell sizes are uniform in a given direction, that size is used
//                   2. If the cell sizes are variable in a given direction, then the smallest size is used
//
// Available         7.3
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportToGrids_VOX(VOX,      // VOX Handle
                                 string,   // Name of grids (each layers adds _Number to the name)
                                 int,      // VOX_DIR
                                 int,      // Starting index
                                 int,      // Increment in index
                                 int,      // Total number of grids (-1 or iDUMMY for all)
                                 real,     // Cell size (can be GS_R8DM)
                                 int);     // VOX_SLICE_MODE


  
//-----------------------------------------------------------------------------------------------------------
// ExportXML_VOX Export a VOX to a compressed XML file
//
// Available     6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportXML_VOX(string,    // Voxel file name
                             var CRC,   // CRC returned - not implemented - always returns 0.
                             string);   // Output XML file


  
//-----------------------------------------------------------------------------------------------------------
// ExportSegY_VOX Export a voxel to a depth SEG-Y file
//
// Available      8.5
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportSegY_VOX(VOX,      // Voxel to export
                              string,   // SEG-Y filename to create
                              real);    // Sampling interval (can be GS_R8DM if input voxel has constant Z cell size)


  
//-----------------------------------------------------------------------------------------------------------
// ExportJIGsXML_VOX Export a VOX to a compressed XML file. Verbose version.
//
// Returns           Exports all values and stats by JIG.
//
// Available         8.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportJIGsXML_VOX(string,   // Voxel file name
                                 string);  // Output XML file


  
//-----------------------------------------------------------------------------------------------------------
// ExportXYZ_VOX Export a Voxel to an XYZ File
//
// Available     6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportXYZ_VOX(VOX,      //
                             string,   // File Name
                             int,      // VOX_DIRECTION
                             int,      // Reverse X ? (0/1)
                             int,      // Reverse Y ? (0/1)
                             int,      // Reverse Z ? (0/1)
                             int);     // Write Dummies? (0/1)


  
//-----------------------------------------------------------------------------------------------------------
// Filter_VOX Apply a 3D filter to a voxel.
//
// Available  7.3
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Filter_VOX(VOX,      // VOX object
                            int,      // VOX_FILTER3D
                            string,   // Filter file, if filter is VOX_FILTER3D_FILE
                            int,      // Number of filter passes
                            int,      // (1: interpolate dummies)
                            string);  // Output voxel file name.


  
//-----------------------------------------------------------------------------------------------------------
// GenerateDB_VOX Generate a VOX from a Database
//
// Available      6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void GenerateDB_VOX(string,    // Voxel Name
                              DB,        // DB To import from
                              DB_SYMB);  // Symbol to import data from


  
//-----------------------------------------------------------------------------------------------------------
// GenerateVectorVoxelFromDB_VOX Generate a vector voxel VOX from a Database
//
// Available                     8.5
//-----------------------------------------------------------------------------------------------------------

[_public] void GenerateVectorVoxelFromDB_VOX(string,    // Voxel Name
                                             DB,        // DB To import from
                                             int,       // VOX_VECTORVOX_IMPORTImport XYZ, UVW or Amplitude/Inclination/Declination channels
                                             DB_SYMB,   // Symbol to import X, U or Amplitude data from
                                             DB_SYMB,   // Symbol to import Y, V or Inclination data from
                                             DB_SYMB,   // Symbol to import Z, W or Declination data from
                                             real,      // Inclination value for VOX_VECTORVOX_UVW (-90° to 90°)
                                             real);     // Declination value for VOX_VECTORVOX_UVW (-180° to 180°)


  
//-----------------------------------------------------------------------------------------------------------
// GeneratePG_VOX Generate a VOX from a 3D Pager
//
// Returns        VOX Object
//
// Available      6.2
//-----------------------------------------------------------------------------------------------------------

[_public] VOX GeneratePG_VOX(string,   // Name of output VOX
                             PG,       // Pager with the Voxel Data
                             real,     // Origin X
                             real,     // Origin Y
                             real,     // Origin Z
                             real,     // Cell Size X
                             real,     // Cell Size Y
                             real,     // Cell Size Z
                             IPJ,      // Projection
                             META);    // Metadata


  
//-----------------------------------------------------------------------------------------------------------
// GeneratePGVV_VOX Generate a VOX from a 3D Pager, cells sizes passed in VVs.
//
// Returns          VOX Object
//
// Notes            The input cell size VVs' lengths must match the input PG dimensions.
//
// Available        8.0
//-----------------------------------------------------------------------------------------------------------

[_public] VOX GeneratePGVV_VOX(string,   // Name of output VOX
                               PG,       // Pager with the Voxel Data
                               real,     // Origin X
                               real,     // Origin Y
                               real,     // Origin Z
                               VV,       // Cell Sizes X
                               VV,       // Cell Sizes Y
                               VV,       // Cell Sizes Z
                               IPJ,      // Projection
                               META);    // Metadata


  
//-----------------------------------------------------------------------------------------------------------
// GenerateFromGrid_VOX Create a single-layer VOX object from a grid
//
// Returns              VOX handle, terminates if creation fails
//
// Notes                Data type, cell sizes and projection are defined from the input grid; values set to the input grid values,
//                      or to the input "constant" value if it is not dummy.
//
// Available            2025.1
//-----------------------------------------------------------------------------------------------------------

[_public] VOX GenerateFromGrid_VOX(string,   // Input Grid File Name
                                   string,   // Output Voxel File Name
                                   real);    // Constant value for output voxel if NOT DUMMY


  
//-----------------------------------------------------------------------------------------------------------
// InitGenerateBySubsetPG_VOX Initialize the generate of a VOX from a series of 3D subset pagers
//
// Returns                    VOX Object
//
// Notes                      Call InitGenerateBySubsetPG_VOX first, then add a series of subset PGs using AddGenerateBySubsetPG_VOX, and finally
//                            serialize using EndGenerateBySubsetPG_VOX
//
// Available                  8.5
//-----------------------------------------------------------------------------------------------------------

[_public] VOX InitGenerateBySubsetPG_VOX(int,   // GS_TYPES
                                         int,   // Points in X
                                         int,   // Points in Y
                                         int);  // Points in Z


  
//-----------------------------------------------------------------------------------------------------------
// AddGenerateBySubsetPG_VOX Add a subset 3D  pagers. These should be "slabs", 16 wide in the input direction, and the size of the
//                           full voxel in the other two directions.
//
// Notes                     See InitGenerateBySubsetPG_VOX and EndGenerateBySubsetPG_VOX.
//
// Available                 8.5
//-----------------------------------------------------------------------------------------------------------

[_public] void AddGenerateBySubsetPG_VOX(VOX,   // VOX object
                                         PG,    // Subset pager with the Voxel Data
                                         int,   // Subset orientation - the "16" (thin) dimension is in the other axis.VOX_DIR
                                         int);  // Offset of the subset PG corner, along the "thin" dimension.


  
//-----------------------------------------------------------------------------------------------------------
// EndGenerateBySubsetPG_VOX Output the voxel, after adding all the subset PGs.
//
// Notes                     You must begin by calling InitGenerateBySubsetPG_VOX and add data using AddGenerateBySubsetPG_VOX.
//
// Available                 8.5
//-----------------------------------------------------------------------------------------------------------

[_public] void EndGenerateBySubsetPG_VOX(VOX,      // VOX object
                                         string,   // Name of output VOX
                                         real,     // Origin X
                                         real,     // Origin Y
                                         real,     // Origin Z
                                         real,     // Cell Size X
                                         real,     // Cell Size Y
                                         real,     // Cell Size Z
                                         IPJ,      // Projection
                                         META);    // Metadata


  
//-----------------------------------------------------------------------------------------------------------
// GetArea_VOX Get the area of the voxel.
//
// Available   6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void GetArea_VOX(VOX,        // VOX object
                           var real,   // Min X
                           var real,   // Min Y
                           var real,   // Min Z
                           var real,   // Max X
                           var real,   // Max Y
                           var real);  // Max Z


  
//-----------------------------------------------------------------------------------------------------------
// GetGOCADLocation_VOX Get the location of a voxel with origin and scaled xyz vectors for use with GOCAD.
//
// Notes                This is used for GOCAD voxel calculations, and begins with the
//                      origin at (0,0,0), not the actual location of the corner point.
//
// Available            7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetGOCADLocation_VOX(VOX,        // VOX object
                                    var real,   // Origin X
                                    var real,   // Origin Y
                                    var real,   // Origin Z
                                    var real,   // VectX X
                                    var real,   // VectX Y
                                    var real,   // VectX Z
                                    var real,   // VectY X
                                    var real,   // VectY Y
                                    var real,   // VectY Z
                                    var real,   // VectZ X
                                    var real,   // VectZ Y
                                    var real);  // VectZ Z


  
//-----------------------------------------------------------------------------------------------------------
// GetGridSectionCellSizes_VOX Get default cell sizes in X and Y for a section grid.
//
// Notes                       This function determines default cell sizes for a vertical grid
//                             slicing a voxel. It tries to match the "X" and "Y" sizes (in the grid
//                             coordinates) with the projection of the voxel's cells onto the grid
//                             plane. It uses a few simple rules:
//                             
//                             If the voxel is rotated about a horizontal axis (i.e. if its own "Z" axis
//                             is not vertical, then both cell sizes are set to the smallest voxel dimension
//                             (a single volume pixel) in X, Y and Z.
//                             
//                             If the voxel is "horizontal", then the angle between the
//                             section azimuth and the voxel's own X and Y axes is used to
//                             calculate a value which varies between the minimum X size and the
//                             minimum Y size, and this is used for the grid's "X" cell size.
//                             (in other words, if the section is parallel to the voxel "X" axis,
//                             then the returned "X" cells size is equal to the voxel's minimum "Y" cell size.
//                             The grid's "Y" cell size is set to the voxel's minimum "Z" cell size.
//
// Available                   6.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GetGridSectionCellSizes_VOX(VOX,        // Voxel object
                                           real,       // Input section azimuth (degrees CCW from North)
                                           var real,   // Returned X cell size (horizontal) in m
                                           var real);  // Returned Y cell size (vertical) in m


  
//-----------------------------------------------------------------------------------------------------------
// GetInfo_VOX Get information about a voxel.
//
// Available   6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void GetInfo_VOX(VOX,       // VOX object
                           var int,   // Data Type
                           var int,   // Array Size
                           var int,   // Elements in X
                           var int,   // Elements in Y
                           var int);  // Elements in Z


  
//-----------------------------------------------------------------------------------------------------------
// GetIPJ_VOX Get the projection of the voxel.
//
// Available  6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void GetIPJ_VOX(VOX,   // VOX object
                          IPJ);  // IPJ object to save VOX's meta to


  
//-----------------------------------------------------------------------------------------------------------
// GetLimits_VOX Get the range of indices with non-dummy data.
//
// Notes         Find the non-dummy volume of a VOX object. If the voxel is all dummies,
//               returns iMAX for the minima, and iMIN for the maxima.
//
// Available     6.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GetLimits_VOX(VOX,       // Voxel object
                             var int,   // Index of minimum valid data in X.
                             var int,   // Index of minimum valid data in Y.
                             var int,   // Index of minimum valid data in Z.
                             var int,   // Index of maximum valid data in X.
                             var int,   // Index of maximum valid data in Y.
                             var int);  // Index of maximum valid data in Z.


  
//-----------------------------------------------------------------------------------------------------------
// GetLimitsXYZ_VOX Get the range in true XYZ of non-dummy data.
//
// Notes            Find the non-dummy volume of a VOX in true (X, Y, Z). This method
//                  works for voxels which are rotated or oriented in 3D, and returns
//                  the true min and max X, Y and Z limits in the data.
//                  The bounds are the bounds for the voxel
//                  center points. If the voxel is all dummies,
//                  returns rMAX for the minima, and rMIN for the maxima.
//
// Available        6.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GetLimitsXYZ_VOX(VOX,        // Voxel object
                                var real,   // Minimum valid data in X.
                                var real,   // Minimum valid data in Y.
                                var real,   // Minimum valid data in Z.
                                var real,   // Maximum valid data in X.
                                var real,   // Maximum valid data in Y.
                                var real);  // Maximum valid data in Z.


  
//-----------------------------------------------------------------------------------------------------------
// GetLocation_VOX Get Location information
//
// Available       6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void GetLocation_VOX(VOX,        // VOX object
                               var real,   // Origin X
                               var real,   // Origin Y
                               var real,   // Origin Z
                               VV,         // Cell sizes in X
                               VV,         // Cell sizes in Y
                               VV);        // Cell sizes in Z


  
//-----------------------------------------------------------------------------------------------------------
// GetLocationPoints_VOX Get the computed location points.
//
// Available             6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void GetLocationPoints_VOX(VOX,   // VOX object
                                     VV,    // Locations in X
                                     VV,    // Locations in Y
                                     VV);   // Locations in Z


  
//-----------------------------------------------------------------------------------------------------------
// GetMETA_VOX Get the metadata of a voxel.
//
// Available   6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void GetMETA_VOX(VOX,    // VOX object
                           META);  // META object to save VOX's meta to


  
//-----------------------------------------------------------------------------------------------------------
// GetRealLocation_VOX Get the location of a voxel with origin and scaled xyz vectors
//
// Available           6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void GetRealLocation_VOX(VOX,        // VOX object
                                   var real,   // Origin X
                                   var real,   // Origin Y
                                   var real,   // Origin Z
                                   var real,   // VectX X
                                   var real,   // VectX Y
                                   var real,   // VectX Z
                                   var real,   // VectY X
                                   var real,   // VectY Y
                                   var real,   // VectY Z
                                   var real,   // VectZ X
                                   var real,   // VectZ Y
                                   var real);  // VectZ Z


  
//-----------------------------------------------------------------------------------------------------------
// GetSimpleLocation_VOX Get Simple Location information
//
// Available             6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void GetSimpleLocation_VOX(VOX,        // VOX object
                                     var real,   // Origin X
                                     var real,   // Origin Y
                                     var real,   // Origin Z
                                     var real,   // Cell Sizes in X (rDUMMY if not uniform)
                                     var real,   // Cell Sizes in Y (rDUMMY if not uniform)
                                     var real);  // Cell Sizes in Z (rDUMMY if not uniform)


  
//-----------------------------------------------------------------------------------------------------------
// GetStats_VOX Get precomputed statistics on this object.
//
// Returns      ST object
//
// Available    6.2
//-----------------------------------------------------------------------------------------------------------

[_public] ST GetStats_VOX(VOX);  // VOX object


  
//-----------------------------------------------------------------------------------------------------------
// GetTPAT_VOX Get a copy of a thematic voxel's TPAT object.
//
// Notes       Each row in the TPAT object corresponds to a stored index
//             value in the thematic voxel. The TPAT should NOT be modified
//             by the addition or deletion of items, if it is to be
//             restored into the VOX object, but the CODE, LABEL, DESCRIPTION
//             or COLOR info can be changed.
//             The TPAT object is stored inside the VOX META object.
//
// Available   7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetTPAT_VOX(VOX,    // VOX object
                           TPAT);  // TPAT object to get


  
//-----------------------------------------------------------------------------------------------------------
// GridPoints_VOX Grid a VOX from point VV's.
//
// Returns        VOX Object
//
// Available      6.2
//-----------------------------------------------------------------------------------------------------------

[_public] VOX GridPoints_VOX(string,   // Name of output VOX
                             string,   // Name of error VOX ("" for none)
                             real,     // Cell size (DUMMY for default)
                             int,      // Variogram Only
                             real,     // Minimum Search Radius (DUMMY for none)
                             real,     // Maximum Search Radius (DUMMY for none)
                             int,      // Minimum Search Points
                             int,      // Maximum Search Points
                             int,      // Model number 1-power, 2-sperical, 3-gaussian, 4-exponential
                             real,     // Power
                             real,     // Slope
                             real,     // Range
                             real,     // Nugget
                             real,     // Sill
                             int,      // GS_TYPES
                             VV,       // X VV
                             VV,       // Y VV
                             VV,       // Z VV
                             VV,       // Data VV
                             IPJ);     //


  
//-----------------------------------------------------------------------------------------------------------
// GridPointsZ_VOX Grid a VOX from point VV's (using variable Z's)
//
// Returns         VOX Object
//
// Available       6.4
//-----------------------------------------------------------------------------------------------------------

[_public] VOX GridPointsZ_VOX(string,   // Name of output VOX
                              string,   // Name of error VOX ("" for none)
                              real,     // Cell size (DUMMY for default)
                              string,   // Cell size in Z ("" for default)
                              int,      // Variogram Only
                              real,     // Minimum Search Radius (DUMMY for none)
                              real,     // Maximum Search Radius (DUMMY for none)
                              int,      // Minimum Search Points
                              int,      // Maximum Search Points
                              int,      // Model number 1-power, 2-sperical, 3-gaussian, 4-exponential
                              real,     // Power
                              real,     // Slope
                              real,     // Range
                              real,     // Nugget
                              real,     // Sill
                              int,      // GS_TYPES
                              VV,       // X VV
                              VV,       // Y VV
                              VV,       // Z VV
                              VV,       // Data VV
                              IPJ);     //


  
//-----------------------------------------------------------------------------------------------------------
// GridPointsZEx_VOX Grid a VOX from point VV's (using variable Z's)
//
// Returns           VOX Object
//
// Available         6.4
//-----------------------------------------------------------------------------------------------------------

[_public] VOX GridPointsZEx_VOX(string,     // Name of output VOX
                                string,     // Name of error VOX ("" for none)
                                real,       // Cell size (DUMMY for default)
                                string,     // Cell size in Z ("" for default)
                                int,        // Variogram Only
                                real,       // Minimum Search Radius (DUMMY for none)
                                real,       // Maximum Search Radius (DUMMY for none)
                                int,        // Minimum Search Points
                                int,        // Maximum Search Points
                                int,        // Model number 1-power, 2-sperical, 3-gaussian, 4-exponential
                                real,       // Power
                                var real,   // Slope
                                var real,   // Range
                                real,       // Nugget
                                var real,   // Sill
                                real,       // Strike
                                real,       // Dip
                                real,       // Plunge
                                real,       // Strike Weight
                                real,       // Dip Plane Weight
                                int,        // GS_TYPES
                                VV,         // X VV
                                VV,         // Y VV
                                VV,         // Z VV
                                VV,         // Data VV
                                IPJ);       //


  
//-----------------------------------------------------------------------------------------------------------
// iCanAppendTo_VOX Check if this voxel can append to a surface file.
//
// Returns          1 if can append
//
// Available        8.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iCanAppendTo_VOX(VOX,      // Voxel object
                               string);  // Surface file


  
//-----------------------------------------------------------------------------------------------------------
// IGetCellSizeStrings_VOX Get the Location Strings
//
// Available               6.3.1
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetCellSizeStrings_VOX(VOX,          // Voxel
                                       var string,   // X String
                                       int,          // X String Size
                                       var string,   // Y String
                                       int,          // Y String Size
                                       var string,   // Z String
                                       int,          // Z String Size
                                       real,         // Scale to multiply X
                                       real,         // Scale to multiply Y
                                       real);        // Scale to multiply Z
#define GetCellSizeStrings_VOX(vox, loc_x, loc_y, loc_z, scale_x, scale_y, scale_z) IGetCellSizeStrings_VOX(vox, loc_x, sizeof(loc_x), loc_y, sizeof(loc_y), loc_z, sizeof(loc_z), scale_x, scale_y, scale_z)


  
//-----------------------------------------------------------------------------------------------------------
// iIsThematic_VOX Is this a thematic voxel?
//
// Returns         1 if VOX is thematic
//
// Notes           A thematic voxel is one where the stored integer values
//                 represent indices into an internally stored TPAT object.
//                 Thematic voxels contain their own color definitions, and
//                 normal numerical operations, such as applying ITRs for display,
//                 are not valid.
//
// Available       7.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsThematic_VOX(VOX);  // Voxel object


  
//-----------------------------------------------------------------------------------------------------------
// iIsVectorVoxel_VOX Is this a vector voxel?
//
// Returns            1 if VOX is a vector voxel
//
// Notes              A vector voxel is one where each data element consists of 3 4-byte float values.
//                    Vector voxels normally have the file type "geosoft_vectorvoxel".
//
// Available          8.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsVectorVoxel_VOX(VOX);  // Voxel object


  
//-----------------------------------------------------------------------------------------------------------
// iSetCellSizeStrings_VOX Set the Location Strings
//
// Returns                 0 - Ok
//                         1 - Invalid data
//
// Available               6.3.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iSetCellSizeStrings_VOX(VOX,      // Voxel
                                      string,   // X String
                                      string,   // Y String
                                      string);  // Z String


  
//-----------------------------------------------------------------------------------------------------------
// LogGridPointsZEx_VOX Log grid a VOX from point VV's (using variable Z's)
//
// Returns              VOX Object
//
// Available            7.2
//-----------------------------------------------------------------------------------------------------------

[_public] VOX LogGridPointsZEx_VOX(string,     // Name of output VOX
                                   string,     // Name of error VOX ("" for none)
                                   real,       // Cell size (DUMMY for default)
                                   string,     // Cell size in Z ("" for default)
                                   int,        // Variogram Only
                                   real,       // Minimum Search Radius (DUMMY for none)
                                   real,       // Maximum Search Radius (DUMMY for none)
                                   int,        // Minimum Search Points
                                   int,        // Maximum Search Points
                                   int,        // Model number 1-power, 2-sperical, 3-gaussian, 4-exponential
                                   real,       // Power
                                   var real,   // Slope
                                   var real,   // Range
                                   real,       // Nugget
                                   var real,   // Sill
                                   real,       // Strike
                                   real,       // Dip
                                   real,       // Plunge
                                   real,       // Strike Weight
                                   real,       // Dip Plane Weight
                                   int,        // VOX_GRID_LOGOPT Log Option
                                   real,       // Minimum log
                                   int,        // GS_TYPES
                                   VV,         // X VV
                                   VV,         // Y VV
                                   VV,         // Z VV
                                   VV,         // Data VV
                                   IPJ);       //


  
//-----------------------------------------------------------------------------------------------------------
// Krig_VOX A more compact and extensible form of LogGridPointsZEx_VOX.
//
// Returns  VOX Object
//
// Notes    Optional Parameters.
//          
//          If these values are not set in the REG, then default parameters will be used.
//          
//          ERROR_VOXEL:		Name of error VOX ("" for none)
//          CELLSIZEZ:      Z Cell size string (space delimited, "" for default)
//          RADIUS_MIN:		Minimum Search Radius (REAL) (Default = 4) (Blanking Distance)
//          RADIUS_MAX:		Maximum Search Radius (REAL) (Default = 16)
//          SEARCH_MIN:		Minimum Search Points (INT) (Default = 16)
//          SEARCH_MAX:		Maximum Search Points (INT) (Default = 32)
//          VARIOGRAM_ONLY: Set to 1 to calculate the variogram only (INT) (Default = 0)
//          MODEL:				Variogram Model number 1-power, 2-sperical, 3-gaussian, 4-exponential  (INT) (Default = 2)
//          POWER:          Power (Default = DUMMY)
//          SLOPE:          Slope (REAL) (if input is DUMMY, value calculated and set on return)
//          RANGE:          Range (REAL) (if input is DUMMY, value calculated and set on return)
//          SILL :          Sill (REAL) (if input is DUMMY, value calculated and set on return)
//          STRIKE:				Strike (REAL) (Default = 0)
//          DIP:					Dip (REAL)	(Default = 90)
//          PLUNGE:				Plunge (REAL) (Default = 0)
//          STRIKE WEIGHT:	Along-Strike Weight (REAL) (Default = 1)
//          DIP_WEIGHT:      Down-Dip Weight (REAL) (Default = 1)
//          LOG_OPT:			One of VOX_GRID_LOGOPT (Default = 0)
//          MIN_LOG:			Log Minimum (REAL)	(Default = 1)
//          MIN_X:				Minimum X (REAL) (default = DUMMY to determine from the data. If input, nearest lt. or eq. multiple of cell size chosen)
//          MAX_X:				Maximum X (REAL) (default = DUMMY to determine from the data. If input, nearest gt. or eq. multiple of cell size chosen)
//          MIN_Y:				Minimum Y (REAL) (default = DUMMY to determine from the data. If input, nearest lt. or eq. external multiple of cell size chosen)
//          MAX_Y:				Maximum Y (REAL) (default = DUMMY to determine from the data. If input, nearest gt. or eq. multiple of cell size chosen)
//          MIN_Z:				Minimum Z (REAL) (default = DUMMY to determine from the data. If input, nearest lt. or eq. multiple of cell size chosen)
//          MAX_Z:				Maximum Z (REAL) (default = DUMMY to determine from the data. If input, nearest gt. or eq. multiple of cell size chosen)A more compact and extensible form of LogGridPointsZEx_VOX. Only the most
//          basic parameters are entered directly. Optional parameters are passed via a REG object.
//
// Available 8.2
//-----------------------------------------------------------------------------------------------------------

[_public] VOX Krig_VOX(string,   // Name of output VOX
                       real,     // Cell size (DUMMY for default)
                       int,      // GS_TYPES
                       VV,       // X VV
                       VV,       // Y VV
                       VV,       // Z VV
                       VV,       // Data VV
                       IPJ,      //
                       REG);     //


  
//-----------------------------------------------------------------------------------------------------------
// Math_VOX Produces a new voxes using a formula on existing voxels/Grids
//
// Returns  VOXEL handle
//
// Notes    The input voxels must all be of the same type.
//
// Available 6.3
//-----------------------------------------------------------------------------------------------------------

[_public] VOX Math_VOX(string,   // Master VOX Name
                       string,   // Master VOX Variable Name
                       string,   // Output VOX Name
                       string,   // Output VOX Variable Name
                       string,   // Formula
                       LST);     // List of Voxels/Grids to use as inputs


  
//-----------------------------------------------------------------------------------------------------------
// Merge_VOX Merge two Voxels.
//
// Available 7.3
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Merge_VOX(VOX,      // VOX object
                           VOX,      // VOX object
                           REG,      // Parameters (see above)
                           string);  // Output voxel file name.


  
//-----------------------------------------------------------------------------------------------------------
// NearestNeighbourGrid_VOX Grid a VOX from point VV's using the Nearest Neighbours method.
//
// Returns                  VOX Object
//
// Available                7.0
//-----------------------------------------------------------------------------------------------------------

[_public] VOX NearestNeighbourGrid_VOX(string,   // Name of output VOX
                                       real,     // Cell size (DUMMY for default)
                                       real,     // Maximum radius (DUMMY for none)
                                       int,      // GS_TYPES
                                       VV,       // X VV
                                       VV,       // Y VV
                                       VV,       // Z VV
                                       VV,       // Data VV
                                       IPJ);     //


  
//-----------------------------------------------------------------------------------------------------------
// rComputeCellSize_VOX Compute the Cell size based on specific Area
//
// Returns              Cell Size
//
// Available            6.4
//-----------------------------------------------------------------------------------------------------------

[_public] real rComputeCellSize_VOX(real,   // MinX
                                    real,   // MinY
                                    real,   // MinZ
                                    real,   // MaxX
                                    real,   // MaxY
                                    real);  // MaxZ


  
//-----------------------------------------------------------------------------------------------------------
// ReGrid_VOX Regrid a Voxel.
//
// Available  7.3
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ReGrid_VOX(VOX,      // VOX object to match
                            VOX,      // VOX object to regrid
                            REG,      // Parameters (not implemented)
                            string);  // Output voxel file name.


  
//-----------------------------------------------------------------------------------------------------------
// ResamplePG_VOX Resample a voxel over an input volume to a PG.
//
// Returns        PG object, terminates on error
//
// Notes          Creates and dummies a PG object based on the input
//                dimensions, then resamples the voxel to the pager
//                at the locations determined by input projection, origin and spacings.
//
// Available      8.0
//-----------------------------------------------------------------------------------------------------------

[_public] PG ResamplePG_VOX(VOX,    // Voxel
                            IPJ,    // Projection to use for Origin, Spacing values
                            real,   // Origin X
                            real,   // Origin Y
                            real,   // Origin Z
                            real,   // Spacing in X
                            real,   // Spacing in Y
                            real,   // Spacing in Z
                            int,    // Samples in X
                            int,    // Samples in Y
                            int,    // Samples in Z
                            real,   // Minimum Z to resample (can be rDUMMY)
                            real,   // Maximum Z to resample (can be rDUMMY)
                            int);   // VOX_SLICE_MODE


  
//-----------------------------------------------------------------------------------------------------------
// RescaleCellSizes_VOX Multiply all cell sizes by a fixed factor.
//
// Notes                This is useful, for instance for converting sizes in one
//                      unit to sizes in another unit if changing the projection
//                      and the projection's unit changes, since the voxel inherits
//                      its projection's units.
//
// Available            7.3
//-----------------------------------------------------------------------------------------------------------

[_public] void RescaleCellSizes_VOX(VOX,    // VOX object
                                    real);  // Scaling factor (>0)


  
//-----------------------------------------------------------------------------------------------------------
// SampleCDI_VOX Sample a voxel at locations/elevations in a CDI database.
//
// Notes         A "CDI" database does not need to be conductivity/depth.
//               It normally contains an array channel of depth values for
//               each (X, Y) location, with corresponding data array channels of
//               values taken at those (X, Y, Z) locations.
//               If the optional elevation channel is used, its value is used as an
//               offset to the depth channel values. Depths are positive down by
//               default; use the "Negative depths down" parameter if the depths
//               become more negative as you go deeper.
//
// Available     7.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SampleCDI_VOX(VOX,      // Voxel
                             DB,       // CDI Database handle
                             int,      // Line handle
                             int,      // X channel handle
                             int,      // Y channel handle
                             int,      // Depth array channel handle
                             int,      // Depths sign: 0 - positive down, 1 - negative down
                             int,      // Elevation channel handle (can be NULLSYMB)
                             int,      // Interpolation mode: 0 - linear, 1 - nearest
                             string);  // Output channel name


  
//-----------------------------------------------------------------------------------------------------------
// SampleCDIToTopography_VOX Sample a voxel at fixed elevations along a path in a CDI database, and output them to an array channel, deleting leading dummy values, and
//                           writing the elevation of the first non-dummy item to a topography channel.
//
// Available                 8.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SampleCDIToTopography_VOX(VOX,      // Voxel
                                         DB,       // CDI Database handle
                                         int,      // Line handle
                                         int,      // X channel handle
                                         int,      // Y channel handle
                                         VV,       // Z values to sample at each X, Y
                                         int,      // Interpolation mode: 0 - linear, 1 - nearest
                                         string,   // Output data array channel name
                                         string);  // Output topography channel name


  
//-----------------------------------------------------------------------------------------------------------
// SampleVV_VOX Sample a voxel at multiple locations.
//
// Notes        Sample at voxel at XYZ locations input in VVs. Values returned in a VV.
//
// Available    8.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SampleVV_VOX(VOX,   // Voxel
                            VV,    // X locations (input)
                            VV,    // Y locations (input)
                            VV,    // Z locations (input)
                            int,   // Interpolation mode: 0 - linear, 1 - nearest
                            VV);   // Returned values


  
//-----------------------------------------------------------------------------------------------------------
// SetIPJ_VOX Set the projection of the voxel.
//
// Available  6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetIPJ_VOX(VOX,   // VOX object
                          IPJ);  // IPJ object to save VOX's meta to


  
//-----------------------------------------------------------------------------------------------------------
// SetLocation_VOX Set Location information
//
// Available       6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetLocation_VOX(VOX,    // VOX object
                               real,   // Origin X
                               real,   // Origin Y
                               real,   // Origin Z
                               VV,     // Cell sizes in X
                               VV,     // Cell sizes in Y
                               VV);    // Cell sizes in Z


  
//-----------------------------------------------------------------------------------------------------------
// SetMETA_VOX Set the metadata of a voxel.
//
// Available   6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetMETA_VOX(VOX,    // Source VOX
                           META);  // META object to add to VOX's meta


  
//-----------------------------------------------------------------------------------------------------------
// SetOrigin_VOX Set the Voxel Origin
//
// Available     6.3.1
//-----------------------------------------------------------------------------------------------------------

[_public] void SetOrigin_VOX(VOX,    // VOX object
                             int,    // Type of origin being set VOX_ORIGIN
                             real,   // Origin X
                             real,   // Origin Y
                             real);  // Origin Z


  
//-----------------------------------------------------------------------------------------------------------
// SetSimpleLocation_VOX Set Simple Location information
//
// Available             6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetSimpleLocation_VOX(VOX,    // VOX object
                                     real,   // Origin X
                                     real,   // Origin Y
                                     real,   // Origin Z
                                     real,   // Cell Sizes in X (rDUMMY if not changed)
                                     real,   // Cell Sizes in Y (rDUMMY if not changed)
                                     real);  // Cell Sizes in Z (rDUMMY if not changed)


  
//-----------------------------------------------------------------------------------------------------------
// SetTPAT_VOX Set a thematic voxel's TPAT object.
//
// Notes       Each row in the TPAT object corresponds to a stored index
//             value in the thematic voxel. The TPAT should NOT be modified
//             by the addition or deletion of items, if it is to be
//             restored into the VOX object, but the CODE, LABEL, DESCRIPTION
//             or COLOR info can be changed.
//             The TPAT object is stored inside the VOX META object.
//
// Available   7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetTPAT_VOX(VOX,    // VOX object
                           TPAT);  // TPAT object to store


  
//-----------------------------------------------------------------------------------------------------------
// SliceIPJ_VOX Extract a slice of a voxel based on an IPJ
//
// Available    6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void SliceIPJ_VOX(VOX,      // Voxel
                            string,   // Grid Name
                            IPJ,      // Grid IPJ (includes orientation, etc)
                            int,      // VOX_SLICE_MODE
                            real,     // Grid Origin X
                            real,     // Grid Origin Y
                            real,     // Grid Cell Size in X
                            real,     // Grid Cell Size in Y
                            int,      // Grid cells in X
                            int);     // Grid cells in Y


  
//-----------------------------------------------------------------------------------------------------------
// SliceMultiLayerIPJ_VOX Extract multiple slices of a voxel based on an IPJ
//
// Available              8.4
//-----------------------------------------------------------------------------------------------------------

[_public] void SliceMultiLayerIPJ_VOX(VOX,      // Voxel
                                      string,   // Grid Name
                                      IPJ,      // Grid IPJ (includes orientation, etc)
                                      int,      // VOX_SLICE_MODE
                                      real,     // Grid Origin X
                                      real,     // Grid Origin Y
                                      real,     // Grid Cell Size in X
                                      real,     // Grid Cell Size in Y
                                      int,      // Grid cells in X
                                      int,      // Grid cells in Y
                                      int,      // Number of layers to extract
                                      real,     // Start elevation
                                      real);    // Elevation increment


  
//-----------------------------------------------------------------------------------------------------------
// SubsetToRealExtents_VOX Subset a VOX to real extents.
//
// Available               7.3
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SubsetToRealExtents_VOX(VOX,      // VOX object
                                         string);  // Output voxel file name.


  
//-----------------------------------------------------------------------------------------------------------
// Sync_VOX Syncronize the Metadata for this Voxel
//
// Available 7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Sync_VOX(string);  // Voxel name


  
//-----------------------------------------------------------------------------------------------------------
// WindowPLY_VOX Window a VOX to a PLY file and Z.
//
// Notes         The voxel is windowed horizontally to the input PLY file.
//               Optionally, it will be windowed to the input Z range as well.
//               The output can be clipped to the non-dummied cells.
//
// Available     7.3
//-----------------------------------------------------------------------------------------------------------

[_licensed] void WindowPLY_VOX(VOX,      // VOX object
                               PLY,      // PLY object
                               int,      // Mask (0: inside PLY, 1: outside PLY)
                               real,     // Minimum Z (optional, rDUMMY for no minimum)
                               real,     // Maximum Z (optional, rDUMMY for no maximun)
                               string,   // Output voxel file name.
                               int);     // Clip extents to remove dummies (0: no (same size), 1: yes (smaller))


  
//-----------------------------------------------------------------------------------------------------------
// WindowXYZ_VOX Window a VOX to ranges in X, Y and Z.
//
// Notes         The six minima and maxima are optional.
//               The output can be clipped to the non-dummied cells.
//
// Available     7.3
//-----------------------------------------------------------------------------------------------------------

[_licensed] void WindowXYZ_VOX(VOX,      // VOX object
                               real,     // Minimum X (optional, rDUMMY for no minimum)
                               real,     // Minimum Y (optional, rDUMMY for no minimum)
                               real,     // Minimum Z (optional, rDUMMY for no minimum)
                               real,     // Maximum X (optional, rDUMMY for no maximun)
                               real,     // Maximum Y (optional, rDUMMY for no maximun)
                               real,     // Maximum Z (optional, rDUMMY for no maximun)
                               string,   // Output voxel file name.
                               int);     // Clip extents to remove dummies (0: no (same size), 1: yes (smaller))


  
//-----------------------------------------------------------------------------------------------------------
// WriteXML_VOX Export the VOX to XML
//
// Available    6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void WriteXML_VOX(VOX,      // VOX Handle
                            string);  // XML file to create


  
//-----------------------------------------------------------------------------------------------------------
// ConvertNumericToThematic_VOX Convert numeric voxel to thematic (lithology) voxel
//
// Available                    8.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ConvertNumericToThematic_VOX(VOX,      // Numeric VOX Handle.
                                            VV,       // Translation VV handle.
                                            string);  // Output voxel file name.


  
//-----------------------------------------------------------------------------------------------------------
// ConvertThematicToNumeric_VOX Convert thematic (lithology) voxel to numeric voxel
//
// Available                    8.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ConvertThematicToNumeric_VOX(VOX,      // Thematic VOX Handle.
                                            VV,       // Translation VV handle.
                                            string);  // Output voxel file name.


  
//-----------------------------------------------------------------------------------------------------------
// ConvertVelocityToDensity_VOX Produces a density voxel using the velocity values in this voxel.
//
// Available                    8.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ConvertVelocityToDensity_VOX(VOX,      // Velocity VOX Handle.
                                            real,     // 1.0, if this voxel is in meters per second. Otherwise, a value by which each input cell is multiplied to convert it into meters per second.
                                            real,     // Coefficient of fifth-order polynomial term.
                                            real,     // Coefficient of fourth-order polynomial term.
                                            real,     // Coefficient of third-order polynomial term.
                                            real,     // Coefficient of second-order polynomial term.
                                            real,     // Coefficient of first-order polynomial term.
                                            real,     // Constant offset of output.
                                            real,     // 1.0, to produce an output voxel that has units of g/cm^3. If different units are desired, pass in a different value, which will be multiplied into each output voxel cell.
                                            string);  // Filename of the output voxel.


  
//-----------------------------------------------------------------------------------------------------------
// ConvertVelocityInRangeToDensity_VOX Produces a density voxel using the velocity values in this voxel, as long as the velocity values are in range.
//
// Available                           8.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ConvertVelocityInRangeToDensity_VOX(VOX,      // Velocity VOX Handle.
                                                   real,     // 1.0, if this voxel is in meters per second. Otherwise, a value by which each input cell is multiplied to convert it into meters per second.
                                                   real,     // Lower bound on velocity values, in meters per second. If the input value (after being pre-multiplied by dInputScalingFactor) is less than this value, the output cell value will be DUMMY.
                                                   real,     // Upper bound on velocity values, in meters per second. If the input value (after being pre-multiplied by dInputScalingFactor) is greater than this value, the output cell value will be DUMMY.
                                                   real,     // Coefficient of fifth-order polynomial term.
                                                   real,     // Coefficient of fourth-order polynomial term.
                                                   real,     // Coefficient of third-order polynomial term.
                                                   real,     // Coefficient of second-order polynomial term.
                                                   real,     // Coefficient of first-order polynomial term.
                                                   real,     // Constant offset of output.
                                                   real,     // 1.0, to produce an output voxel that has units of g/cm^3. If different units are desired, pass in a different value, which will be multiplied into each output voxel cell.
                                                   string);  // Filename of the output voxel.


  
//-----------------------------------------------------------------------------------------------------------
// ConvertDensityToVelocity_VOX Produces a velocity voxel using the density values in this voxel.
//
// Available                    8.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ConvertDensityToVelocity_VOX(VOX,      // Density VOX Handle.
                                            real,     // 1.0, if this voxel is in g/cm^3. Otherwise, a value by which each input cell is multiplied to convert it into g/cm^3.
                                            real,     // Lower bound on velocity values, in g/vm^3. If the input value (after being pre-multiplied by dInputScalingFactor) is less than this value, the output cell value will be DUMMY.
                                            real,     // Upper bound on velocity values, in g/cm^3. If the input value (after being pre-multiplied by dInputScalingFactor) is greater than this value, the output cell value will be DUMMY.
                                            real,     // Coefficient of fifth-order polynomial term.
                                            real,     // Coefficient of fourth-order polynomial term.
                                            real,     // Coefficient of third-order polynomial term.
                                            real,     // Coefficient of second-order polynomial term.
                                            real,     // Coefficient of first-order polynomial term.
                                            real,     // Constant offset of output.
                                            real,     // 1.0, to produce an output voxel that has units of meters per second. If different units are desired, pass in a different value, which will be multiplied into each output voxel cell.
                                            string);  // Filename of the output voxel.


  
//-----------------------------------------------------------------------------------------------------------
// InvertZ_VOX Convert an inverted voxel to normal orientation
//
// Available   8.4
//-----------------------------------------------------------------------------------------------------------

[_public] void InvertZ_VOX(VOX,      // Input VOX Handle.
                           string);  // Output voxel file name.


  
//-----------------------------------------------------------------------------------------------------------
// IDWGridDB_VOX IDWGridDB_VOX     Inverse-distance weighting gridding method, DB version, 3D.
//
// Notes         3D cells take on the averaged values within a search radius, weighted inversely by distance.
//               
//               Weighting can be controlled using the power and slope properties;
//               
//               weighting = 1 / (distance^wtpower + 1/slope) where distance is in
//               units of grid cells (X dimenstion). Default is 0.0,
//               
//               If the blanking distance is set, all cells whose center point is not within the blanking distance of
//               at least one data point are set to dummy.
//               
//               REG Parameters:
//               
//               X0, Y0, Z0, DX, DY, DZ: Voxel origin, and cell sizes (required)
//               WT_POWER (default=2), WT_SLOPE (default=1) Weighting function parameters
//               SEARCH_RADIUS: Distance weighting limit (default = 4 * CUBE_ROOT(DX*DY*DZ))
//               BLANKING_DISTANCE: Dummy values farther from data than this distance. (default = 4 * CUBE_ROOT(DX*DY*DZ))
//               LOG: Apply log transform to input data before gridding (0:No (default), 1:Yes)?
//               LOG_BASE: One of VV_LOG_BASE_10 (default) or VV_LOG_BASE_E
//               LOG_NEGATIVE: One of VV_LOG_NEGATIVE_NO (default) or VV_LOG_NEGATIVE_YES
//
// Available     8.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void IDWGridDB_VOX(string,    // Output voxel name
                               DB,        // Database
                               DB_SYMB,   // X Channel [READONLY]
                               DB_SYMB,   // Y Channel [READONLY]
                               DB_SYMB,   // Z Channel [READONLY]
                               DB_SYMB,   // Data Channel [READONLY]
                               REG);      // Parameters (see above)


  
//-----------------------------------------------------------------------------------------------------------
// TINGridDB_VOX TINGridDB_VOX   TIN-Gridding, DB version, 3D.
//
// Notes         Designed for data in array channels position vertically at single XY locations.
//               Creates a TIN using the XY locations and uses the coefficients for the top layer on
//               each layer below to make it efficient.
//               
//               REG Parameters:
//               
//               X0, Y0, Z0, DX, DY, DZ: Voxel origin, and cell sizes (required)
//               NX, NY, NZ: Voxel dimensions.
//               DZ and NZ are used only if the input cell sizes VV is of zero length.
//
// Available     8.5
//-----------------------------------------------------------------------------------------------------------

[_licensed] void TINGridDB_VOX(string,    // Output voxel name
                               DB,        // Database
                               DB_SYMB,   // X Channel [READONLY]
                               DB_SYMB,   // Y Channel [READONLY]
                               DB_SYMB,   // Z Channel [READONLY]
                               DB_SYMB,   // Data Channel [READONLY]
                               int,       // Gridding method (0: Linear, 1: Natural Neighbour, 2: Nearest Neightbour
                               VV,        // Z Cell sizes (bottom to top)
                               REG);      // Parameters (see above)


  
//-----------------------------------------------------------------------------------------------------------
// IGetMultiVoxsetGUID_VOX Get the UUID
//
// Available               9.3
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetMultiVoxsetGUID_VOX(string,       // Input Voxel file
                                       var string,   // UUID string returned
                                       int);         // Size of UUID string
#define GetMultiVoxsetGUID_VOX(voxel_file, p_uuid_string) IGetMultiVoxsetGUID_VOX(voxel_file, p_uuid_string, sizeof(p_uuid_string))


  
//-----------------------------------------------------------------------------------------------------------
// GenerateGOCAD_VOX Generate a VOX from a GOCAD File
//
// Returns           VOX Object
//
// Available         6.2
//-----------------------------------------------------------------------------------------------------------

[_public] VOX GenerateGOCAD_VOX(string,   // Name of output VOX
                                string,   // Name of GOCAD Voxel file
                                string,   // Propert name to import
                                IPJ);     //


  
//-----------------------------------------------------------------------------------------------------------
// GenerateOrientedGOCAD_VOX Generate a VOX from a GOCAD File
//
// Returns                   VOX Object
//
// Notes                     Allows the Orientation flag to be specified.
//
// Available                 6.3
//-----------------------------------------------------------------------------------------------------------

[_public] VOX GenerateOrientedGOCAD_VOX(string,   // Name of output VOX
                                        string,   // Name of GOCAD Voxel file
                                        string,   // Propert name to import
                                        IPJ,      //
                                        int);     // VOX_GOCAD_ORIENTATION


  
//-----------------------------------------------------------------------------------------------------------
// GenerateUBC_VOX Generate a VOX from a UBC File
//
// Returns         VOX Object
//
// Available       6.2
//-----------------------------------------------------------------------------------------------------------

[_public] VOX GenerateUBC_VOX(string,   // Name of output VOX
                              string,   // Name of UBC Mesh File
                              string,   // Name of UBC Mod File
                              real,     // Dummy Value
                              IPJ);     // Projection


  
//-----------------------------------------------------------------------------------------------------------
// GenerateXYZ_VOX Generate a VOX from an XYZ File
//
// Available       6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void GenerateXYZ_VOX(string,   // Voxel Name
                               RA,       // RA To import from
                               int,      // Data Type GS_TYPES
                               IPJ);     // Projection


  
//-----------------------------------------------------------------------------------------------------------
// ListGOCADProperties_VOX List all the properties available in this GOCAD file.
//
// Available               6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ListGOCADProperties_VOX(string,   // Name of GOCAD Voxel file
                                       LST);     // List object to populate


  
//-----------------------------------------------------------------------------------------------------------
// ExportDB_VOX Export a Voxel to a database
//
// Notes        The database lines contain a slice of the voxel at a time.
//
// Available    6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportDB_VOX(VOX,      //
                            DB,       // Database
                            string,   // Channel Name
                            int,      // VOX_DIRECTION
                            int,      // Reverse X ? (0/1)
                            int,      // Reverse Y ? (0/1)
                            int,      // Reverse Z ? (0/1)
                            int);     // Write Dummies? (0/1)



//===========================================================================================================
//
// Deprecated Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// GenerateConstantValue_VOX Generate a VOX with a constant value
//
// Returns                   VOX Object
//
// Available                 8.4
//-----------------------------------------------------------------------------------------------------------

[_public] VOX GenerateConstantValue_VOX(string,   // Name of output VOX
                                        real,     // Value to use
                                        int,      // GS_TYPES
                                        real,     // Origin X
                                        real,     // Origin Y
                                        real,     // Origin Z
                                        real,     // Cell Size X
                                        real,     // Cell Size Y
                                        real,     // Cell Size Z
                                        int,      // Cell Count X
                                        int,      // Cell Count Y
                                        int,      // Cell Count Z
                                        IPJ,      // Projection
                                        META);    // Metadata


  
//-----------------------------------------------------------------------------------------------------------
// GenerateConstantValueVV_VOX Generate a VOX with a constant value, cells sizes passed in VVs.
//
// Returns                     VOX Object
//
// Available                   8.4
//-----------------------------------------------------------------------------------------------------------

[_public] VOX GenerateConstantValueVV_VOX(string,   // Name of output VOX
                                          real,     // The Value to use
                                          int,      // GS_TYPES
                                          real,     // Origin X
                                          real,     // Origin Y
                                          real,     // Origin Z
                                          VV,       // Cell Sizes X
                                          VV,       // Cell Sizes Y
                                          VV,       // Cell Sizes Z
                                          IPJ,      // Projection
                                          META);    // Metadata


  
//-----------------------------------------------------------------------------------------------------------
// Sample_VOX Sample the Voxel
//
// Notes      Never properly implemented. Use Profile_VOXE instead.
//
// Available  6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void Sample_VOX(VOX,   // VOX Handle
                          PG,    // VOX PG Data
                          VV,    // VV X Location     (must be a DOUBLE)
                          VV,    // VV Y Location     (must be a DOUBLE)
                          VV,    // VV Z Location     (must be a DOUBLE)
                          VV);   // VV Data Returned  (must be a DOUBLE)





//*** endblock Generated


#endif
