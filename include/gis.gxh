//*** extends 'class_empty.gxh'

#ifndef HGIS_GXH_DEFINED
#define HGIS_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class GIS
//
//-----------------------------------------------------------------------------------------------------------
//
// The GIS class is used for the import, export,
// and interrogation of GIS Data stored in external formats,
// such as MapInfoÂ® TAB files.
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// GIS_MAP2D Definitions
//
// View type to create
//
// GIS_MAP2D_PLAN
// Plan view
//
// GIS_MAP2D_EWSECTION
// Section view, East-West
//
// GIS_MAP2D_NSSECTION
// Section view, North-South
//
//===========================================================================================================


#define GIS_MAP2D_PLAN 0
#define GIS_MAP2D_EWSECTION 1
#define GIS_MAP2D_NSSECTION 2


//===========================================================================================================
//
// GIS_TYPE Definitions
//
// Type of file
//
// GIS_TYPE_MAPINFO
// Mapinfo Files
//
// GIS_TYPE_ARCVIEW
// ArcView files
//
// GIS_TYPE_DGN
// Microstation DGN files
//
// GIS_TYPE_SURPAC
// Surpac STR and DTM files
//
// GIS_TYPE_DATAMINE
// Datamine DM files
//
// GIS_TYPE_GEMCOM
// GEMCOM files
//
// GIS_TYPE_MICROMINE
// MICROMINE files
//
// GIS_TYPE_MINESIGHT
// MINESIGHT files
//
//===========================================================================================================


#define GIS_TYPE_MAPINFO 1
#define GIS_TYPE_ARCVIEW 2
#define GIS_TYPE_DGN 3
#define GIS_TYPE_SURPAC 4
#define GIS_TYPE_DATAMINE 5
#define GIS_TYPE_GEMCOM 6
#define GIS_TYPE_MICROMINE 7
#define GIS_TYPE_MINESIGHT 8





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// Create_GIS Creates a GIS Object
//
// Returns    GIS Object
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] GIS Create_GIS(string,   // Data source (file)
                         string,   // Data qualifying information if required.
                         int);     // GIS_TYPE


  
//-----------------------------------------------------------------------------------------------------------
// CreateMap2D_GIS CreateMap2D_GIS   Create a new 2D map for GIS imports.
//
// Notes           This function was created to minimize duplication in
//                 creation of new maps with 2D views.
//
// Available       7.1
//-----------------------------------------------------------------------------------------------------------

[_public] void CreateMap2D_GIS(GIS,      // GIS object
                               string,   // Map name
                               real,     // Map scale (can be rDUMMY)
                               IPJ,      // Projection (no orientation)
                               int);     // GIS_MAP2D


  
//-----------------------------------------------------------------------------------------------------------
// Destroy_GIS Destroy GIS instance
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Destroy_GIS(GIS);  // GIS object to destroy


  
//-----------------------------------------------------------------------------------------------------------
// GetBPRModelsLST_GIS Get a LST of block models contained in a Gemcom BPR or BRP2 file
//
// Notes               The Returned LST has items in the following format:
//                     
//                     Name:  If there is only one sub-directory with models, then only
//                     the block model name "Rock Type_5" is required to ensure uniqueness.
//                     If there is more than one sub-directory, then the name is set
//                     to (.e.g.) "[Standard]Rock Type_5"
//                     Value: Sub-directory file path  "Standard\Rock Type_5.BLK", (includes the extension).
//                     
//                     The Gemcom BPR and BPR2 files keep their block models in one
//                     or more sub-directories, identified in the *.CAT file located
//                     beside the input BPR or BPR2.
//
// Available           7.1
//-----------------------------------------------------------------------------------------------------------

[_public] void GetBPRModelsLST_GIS(GIS,      // GIS object
                                   string,   // BPR or BPR2 file
                                   LST);     // Returned LST of block models


  
//-----------------------------------------------------------------------------------------------------------
// GetIPJ_GIS Get the GIS IPJ
//
// Returns    IPJ handle
//            NULL if error
//
// Notes      This is your copy, you must destroy it.
//            If the GIS does not have an IPJ, an IPJ with
//            no warp and UNKNOWN projection is returned.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] IPJ GetIPJ_GIS(GIS);  // GIS object


  
//-----------------------------------------------------------------------------------------------------------
// GetMETA_GIS Get the GIS META
//
// Available   6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetMETA_GIS(GIS,    // GIS object
                           META);  // Meta object to store GIS meta information


  
//-----------------------------------------------------------------------------------------------------------
// GetRange_GIS Get the range of data in the GIS
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetRange_GIS(GIS,        // GIS object
                            var real,   // X min
                            var real,   // X max
                            var real,   // Y min
                            var real,   // Y max
                            var real,   // Z min
                            var real);  // Z max


  
//-----------------------------------------------------------------------------------------------------------
// iDatamineType_GIS Returns the type of a Datamine file.
//
// Returns           Datamine file types - bitwise AND of types.
//
// Notes             Terminates if file is not a Datamine file.
//                   A datamine file can contain fields from a multitude
//                   of types, so use iAnd_MATH or iOr_MATH to determine if
//                   the file contains the required data.
//
// Available         6.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iDatamineType_GIS(string);  // Name of input datamine file


  
//-----------------------------------------------------------------------------------------------------------
// IGetFileName_GIS Get the file name
//
// Available        7.1
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetFileName_GIS(GIS,          // GIS Handle
                                var string,   // Returned file name
                                int);         // Size of file name string
#define GetFileName_GIS(gis, name) IGetFileName_GIS(gis, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// iIsMIMapFile_GIS Returns TRUE if file is a MapInfo MAP file.
//
// Returns          0 if not a MapInfo MAP file
//                  1 if it is.
//
// Notes            It is important not to overwrite a MapInfo MAP file
//                  with a Geosoft one. Use this function to test the MAP
//                  file (looks at the first few bytes).
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsMIMapFile_GIS(string);  // Name of input map file


  
//-----------------------------------------------------------------------------------------------------------
// iIsMIRasterTabFile_GIS Returns TRUE if file is a MapInfo Raster TAB file.
//
// Returns                0 if not a MapInfo Raster TAB file
//                        1 if it is.
//
// Available              5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsMIRasterTabFile_GIS(string);  // Name of input tab file


  
//-----------------------------------------------------------------------------------------------------------
// iIsMIRotatedRasterTabFile_GIS Returns TRUE if file is a rotated MapInfo Raster TAB file.
//
// Returns                       0 if not a rotated MapInfo Raster TAB file
//                               1 if it is (see conditions below).
//
// Notes                         Returns 1 if:
//                               
//                                   a) This is a MapInfo RASTER file
//                                   b) A three-point warp is defined.
//                                   c) The warp requires a rotation in order to exactly map
//                                      the input and output warp points. The rotation must
//                                      be at least 1.e-6 radians.
//                               
//                               This function will register an error (and return 0)
//                               if problems are encountered opening or reading the TAB file.
//
// Available                     6.4
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsMIRotatedRasterTabFile_GIS(string);  // Name of input tab file


  
//-----------------------------------------------------------------------------------------------------------
// iIsSHPFile3D_GIS Returns TRUE if an ArcView SHP file is type POINTZ, ARCZ, POLYGONZ or MULTIPOINTZ
//
// Returns          0 if the SHP file is 2D
//                  1 if the SHP file is of type POINTZ, ARCZ, POLYGONZ or MULTIPOINTZ
//
// Notes            SHP files come in 2D and 3D forms.
//                  Fails if not GIS_TYPE_ARCVIEW.
//
// Available        6.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsSHPFile3D_GIS(GIS);  // GIS object


  
//-----------------------------------------------------------------------------------------------------------
// iIsSHPFilePoint_GIS Returns TRUE if an ArcView SHP file is type POINT or POINTZ
//
// Returns             0 if the SHP file is not points
//                     if the SHP file is of type POINT or POINTZ
//
// Notes               Fails if not GIS_TYPE_ARCVIEW.
//
// Available           7.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsSHPFilePoint_GIS(GIS);  // GIS object


  
//-----------------------------------------------------------------------------------------------------------
// iNumAttribs_GIS The number of attribute fields in the GIS dataset
//
// Returns         The number of attribute fields
//
// Available       7.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iNumAttribs_GIS(GIS);  // GIS object


  
//-----------------------------------------------------------------------------------------------------------
// iNumShapes_GIS The number of shape entities in the GIS dataset
//
// Returns        The number of shape entities
//
// Available      7.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iNumShapes_GIS(GIS);  // GIS object


  
//-----------------------------------------------------------------------------------------------------------
// IScanMIRasterTabFile_GIS Scan and set up a MapInf RASTER.
//
// Notes                    This will create a GI file for the raster image.
//
// Available                5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IScanMIRasterTabFile_GIS(string,       // Name of input file
                                        var string,   // Name of Raster file (an IMG DAT)
                                        int,          // Buffer length for Raster file name
                                        IPJ);         // Projection
#define ScanMIRasterTabFile_GIS(tab, file, ipj) IScanMIRasterTabFile_GIS(tab, file, sizeof(file), ipj)


  
//-----------------------------------------------------------------------------------------------------------
// LoadASCII_GIS Save GIS attribute table information (string fields) into a WA.
//
// Notes         All string fields (excluding X/Y and numerical fields) will be saved into the WA columns.
//               
//               e field names are saved in the first line, followed by a blank line.
//               e field columns are separated by a tab (delimited character).
//
// Available     7.3
//-----------------------------------------------------------------------------------------------------------

[_public] void LoadASCII_GIS(GIS,   // GIS object
                             WA);   // WA object


  
//-----------------------------------------------------------------------------------------------------------
// LoadGDB_GIS Load GIS table information into a GDB.
//
// Notes       All fields of the database will be loaded into the group.
//             
//             Channels will use the same name (or a allowable alias) as
//             the GIS field name.
//             
//             If a channel does not exist, it will be created based on the
//             characteristics of the GIS field.
//             
//             If a channel exists, it will be used as-is.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LoadGDB_GIS(GIS,   // GIS object
                           DB);   // Database


  
//-----------------------------------------------------------------------------------------------------------
// LoadMAP_GIS Load GIS table drawing into a MVIEW.
//
// Notes       The GIS drawing will be drawin in the current group.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LoadMAP_GIS(GIS,     // GIS object
                           MVIEW);  // View in which to place GIS drawing.


  
//-----------------------------------------------------------------------------------------------------------
// LoadMAPEx_GIS Load GIS table drawing into a MAP.
//
// Notes         The GIS drawing will be drawin in the current group.
//
// Available     7.1
//-----------------------------------------------------------------------------------------------------------

[_public] void LoadMAPEx_GIS(GIS,      // GIS object
                             MAP,      // Map handle
                             string);  // Name of existing data view


  
//-----------------------------------------------------------------------------------------------------------
// LoadMetaGroupsMAP_GIS Load GIS table drawing into a MVIEW.
//
// Notes                 The GIS drawing will be drawn in the current group.
//                       A group will be created for every entity and data items
//                       containing an entity's field will be added to the Meta
//                       information of every group into the class specified.
//                       Note that the map may grow very large for big datasets.
//
// Available             5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] void LoadMetaGroupsMAP_GIS(GIS,          //
                                     MVIEW,        // View in which to place GIS drawing.
                                     META,         //
                                     META_TOKEN,   // Class
                                     string,       // Group Name prefix
                                     string);      // Name field (Empty to use ID of entity)


  
//-----------------------------------------------------------------------------------------------------------
// LoadPLY_GIS Load GIS table drawing into a Multi-Polygon object.
//
// Available   5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void LoadPLY_GIS(GIS,   // GIS object
                           PLY);  // Polygon object in which to place GIS shapes.


  
//-----------------------------------------------------------------------------------------------------------
// LoadShapesGDB_GIS Load GIS shapes table information into separate lines in a GDB.
//
// Notes             All fields of the database will be loaded into the group.
//                   
//                   Channels will use the same name (or a allowable alias) as
//                   the GIS field name.
//                   
//                   If a channel does not exist, it will be created based on the
//                   characteristics of the GIS field.
//                   
//                   If a channel exists, it will be used as-is.
//                   
//                   The shape ID will be used as the line numbers.
//
// Available         7.1
//-----------------------------------------------------------------------------------------------------------

[_public] void LoadShapesGDB_GIS(GIS,   // GIS object
                                 DB);   // Database


  
//-----------------------------------------------------------------------------------------------------------
// SetDmWireframePtFile_GIS Specify the wireframe point file corresponding to the input file.
//
// Notes                    Datamine wireframe models are specified by pairs of files,
//                          the first is the triangle node file, and the second gives
//                          the XYZ locations of the node points. This
//                          function allows you to specify the latter when reading the
//                          first, so that the full model can be decoded.
//
// Available                6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void SetDmWireframePtFile_GIS(GIS,      // GIS object
                                        string);  // Name of the wireframe point file


  
//-----------------------------------------------------------------------------------------------------------
// SetIPJ_GIS Save the IPJ back to GIS file
//
// Available  6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetIPJ_GIS(GIS,   // GIS object
                          IPJ);  // IPJ to save


  
//-----------------------------------------------------------------------------------------------------------
// SetLST_GIS Save a LST of items inside the GIS object for special use.
//
// Notes      If the GIS LST object already exists, it is destroyed and
//            recreated to match the size of the input LST, before the
//            input LST is copied to it.
//
// Available  7.1
//-----------------------------------------------------------------------------------------------------------

[_public] void SetLST_GIS(GIS,   // GIS object
                          LST);  // LST object to save to GIS LST.


  
//-----------------------------------------------------------------------------------------------------------
// SetMETA_GIS Save the META back to GIS
//
// Available   6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetMETA_GIS(GIS,    // GIS object
                           META);  // META object to save to GIS meta


  
//-----------------------------------------------------------------------------------------------------------
// SetTriangulationObjectIndex_GIS Set the triangulation object index (Micromine)
//
// Available                       7.1
//-----------------------------------------------------------------------------------------------------------

[_public] void SetTriangulationObjectIndex_GIS(GIS,   // GIS object
                                               int);  // Triangulation object index



//===========================================================================================================
//
// Deprecated Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// InvertWarp_GIS See deprecation note
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void InvertWarp_GIS(IPJ,   // Not used
                                int);  // Not used





//*** endblock Generated


#endif
