//*** extends 'class_empty.gxh'

#ifndef HEDB_GXH_DEFINED
#define HEDB_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class EDB
//
//-----------------------------------------------------------------------------------------------------------
//
// The EDB class provides access to a database as displayed within
// Oasis montaj, but does not change data within the database itself.
// It performs functions such as setting the current line.
//
//-----------------------------------------------------------------------------------------------------------
// Notes
//
// To obtain access to the database itself, it is recommended practice
// to begin with an EDB object, and use the Lock_EDB function to
// lock the underlying map to prevent external changes. The returned
// DB object (see DB) may then be safely used to make changes to the map itself.
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// MAX_PROF_WND Definitions
//
// The following value should be kept synchronized with the value defined in src\geoguilib\stdafx.h
//
// MAX_PROF_WND
// 
//
//===========================================================================================================


#define MAX_PROF_WND 5


//===========================================================================================================
//
// EDB_PATH Definitions
//
// Four forms
//
// EDB_PATH_FULL
// d:\directory\file.gdb
//
// EDB_PATH_DIR
// \directory\file.gdb
//
// EDB_PATH_NAME_EXT
// File.gdb
//
// EDB_PATH_NAME
// File
//
//===========================================================================================================


#define EDB_PATH_FULL 0
#define EDB_PATH_DIR 1
#define EDB_PATH_NAME_EXT 2
#define EDB_PATH_NAME 3


//===========================================================================================================
//
// EDB_PROF Definitions
//
// Profile data
//
// EDB_PROF_I_CHANNEL
// DB_SYMB
//
// EDB_PROF_I_LINE_STYLE
// 0 - no line
// 1 - solid
// 2 - long dash
// 3 - short dash
//
// EDB_PROF_I_LINE_WEIGHT
// 0 - no line
// 1 - normal
// 2 - medium
// 3 - heavy
//
// EDB_PROF_I_SYMBOL
// 0 - no symbol
// 1 - rectangle
// 2 - circle
// 3 - triangle
// 4 - diamond
// 5 - x
// 6 - +
//
// EDB_PROF_I_SYMBOL_WEIGHT
// 0 - normal
// 1 - large
//
// EDB_PROF_I_COLOR
// MVIEW Color Value
//
// EDB_PROF_I_WRAP
// 0-no, 1-yes
//
// EDB_PROF_I_BREAK_ON_DUMMY
// 0-no, 1-yes
//
// EDB_PROF_I_GRID_LINE
// 0-no, 1-yes
//
// EDB_PROF_R_GRID_LINE_INTERVAL
// 0-no, 1-yes
//
// EDB_PROF_I_LOG
// 0-Linear, 1-Log, 2-LogLinear
//
// EDB_PROF_R_LOG_MINIMUM
// Minimum Value
//
// EDB_PROF_I_SAMESCALE
// 0-no, 1-yes
//
// EDB_PROF_I_SOURCELINE
// 0 - current line
// -1 - previous line
// -2 - next line
//
// EDB_PROF_I_SCALEOPTION
// 0 - scale to fit for each line
// 1 - fix the range
// 2 - fix the scale, center the range
//
// EDB_PROF_I_SAMERANGE
// 0-no, 1-yes
//
//===========================================================================================================


#define EDB_PROF_I_CHANNEL 0
#define EDB_PROF_I_LINE_STYLE 1
#define EDB_PROF_I_LINE_WEIGHT 2
#define EDB_PROF_I_SYMBOL 3
#define EDB_PROF_I_SYMBOL_WEIGHT 4
#define EDB_PROF_I_COLOR 5
#define EDB_PROF_I_WRAP 6
#define EDB_PROF_I_BREAK_ON_DUMMY 7
#define EDB_PROF_I_GRID_LINE 8
#define EDB_PROF_R_GRID_LINE_INTERVAL 9
#define EDB_PROF_I_LOG 10
#define EDB_PROF_R_LOG_MINIMUM 11
#define EDB_PROF_I_SAMESCALE 12
#define EDB_PROF_I_SOURCELINE 13
#define EDB_PROF_I_SCALEOPTION 14
#define EDB_PROF_I_SAMERANGE 15


//===========================================================================================================
//
// EDB_PROFILE_SCALE Definitions
//
// Profile Scale Options
//
// EDB_PROFILE_SCALE_LINEAR
// 
//
// EDB_PROFILE_SCALE_LOG
// 
//
// EDB_PROFILE_SCALE_LOGLINEAR
// 
//
//===========================================================================================================


#define EDB_PROFILE_SCALE_LINEAR 0
#define EDB_PROFILE_SCALE_LOG 1
#define EDB_PROFILE_SCALE_LOGLINEAR 2


//===========================================================================================================
//
// EDB_REMOVE Definitions
//
// How to handle pending changes in document
//
// EDB_REMOVE_SAVE
// 
//
// EDB_REMOVE_PROMPT
// 
//
// EDB_REMOVE_DISCARD
// 
//
//===========================================================================================================


#define EDB_REMOVE_SAVE 0
#define EDB_REMOVE_PROMPT 1
#define EDB_REMOVE_DISCARD 2


//===========================================================================================================
//
// EDB_UNLOAD Definitions
//
// What type of prompt
//
// EDB_UNLOAD_NO_PROMPT
// 
//
// EDB_UNLOAD_SINGLE_PROMPT
// 
//
// EDB_UNLOAD_MULTI_PROMPT
// Obsolete
//
//===========================================================================================================


#define EDB_UNLOAD_NO_PROMPT 0
#define EDB_UNLOAD_SINGLE_PROMPT 1
#define EDB_UNLOAD_MULTI_PROMPT 2


//===========================================================================================================
//
// EDB_WINDOW_POSITION Definitions
//
// Window Positioning Options
//
// EDB_WINDOW_POSITION_DOCKED
// 
//
// EDB_WINDOW_POSITION_FLOATING
// 
//
//===========================================================================================================


#define EDB_WINDOW_POSITION_DOCKED 0
#define EDB_WINDOW_POSITION_FLOATING 1


//===========================================================================================================
//
// EDB_WINDOW_STATE Definitions
//
// Window State Options
//
// EDB_WINDOW_RESTORE
// 
//
// EDB_WINDOW_MINIMIZE
// 
//
// EDB_WINDOW_MAXIMIZE
// 
//
//===========================================================================================================


#define EDB_WINDOW_RESTORE 0
#define EDB_WINDOW_MINIMIZE 1
#define EDB_WINDOW_MAXIMIZE 2


//===========================================================================================================
//
// EDB_YAXIS_DIRECTION Definitions
//
// Window State Options
//
// EDB_YAXIS_NORMAL
// 
//
// EDB_YAXIS_INVERTED
// 
//
//===========================================================================================================


#define EDB_YAXIS_NORMAL 0
#define EDB_YAXIS_INVERTED 1





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// ApplyFormulaInternal_EDB Apply a formula to selected cells of the
//                          current line. (Do not use this wrapper if you
//                          want to apply a formula across multiple lines)
//                          
//                          Notes:
//                          
//                          The current selection must be on cell(s) of
//                          a channel or on the a channel header.
//                          
//                          If the selection is on cell(s) of a channel,
//                          the formula is applied to only these cells.
//                          
//                          If the selection is on a channel header, the
//                          formula is applied to every cell in the channel.
//                          
//                          The given formula string must be of the form:
//                          "<NameOfCurrentChannel>=<SomeExpression>;"
//                          e.g. "x=y+1;"
//
// Available                5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void ApplyFormulaInternal_EDB(EDB,      // EDB Object
                                            string);  // Formula ("<NameOfCurrentChannel>=<SomeExpression>;")


  
//-----------------------------------------------------------------------------------------------------------
// Current_EDB This method returns the Current Edited Database.
//
// Returns     EDB Object
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] EDB Current_EDB();


  
//-----------------------------------------------------------------------------------------------------------
// CurrentNoActivate_EDB This method returns the Current Edited Database.
//
// Returns               EDB Object
//
// Notes                 This function acts just like Current_EDB except that the document is not activated (brought to foreground) and no
//                       guarantee is given about which document is currently active.
//
// Available             9.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] EDB CurrentNoActivate_EDB();


  
//-----------------------------------------------------------------------------------------------------------
// CurrentIfExists_EDB This method returns the Current Edited Database.
//
// Returns             EDB Object to current edited database. If there is no current database,
//                     the user is not prompted for a database, and 0 is returned.
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] EDB CurrentIfExists_EDB();


  
//-----------------------------------------------------------------------------------------------------------
// DelLine0_EDB Delete Line 0.
//
// Notes        Deletes an empty line 0 from the database.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void DelLine0_EDB(EDB);  //


  
//-----------------------------------------------------------------------------------------------------------
// Destroy_EDB Destroy EDB handle.
//
// Notes       This does not unload the database; it simply deletes the gx resource handle
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void Destroy_EDB(EDB);  // EDB to destroy


  
//-----------------------------------------------------------------------------------------------------------
// DestroyView_EDB Removes the view from the workspace.
//
// Notes           Can only be run in interactive mode. After this call the
//                 EDB object will become invalid. If this is the last view on
//                 the document and the document has been modified the map will be
//                 unloaded and optionally saved depending on the EDB_REMOVE
//                 parameter.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void DestroyView_EDB(EDB,   // EDB object
                                   int);  // EDB_REMOVE


  
//-----------------------------------------------------------------------------------------------------------
// GetCurChanSymb_EDB Returns the currently marked channel symbol.
//
// Returns            Currently channel symbol.
//                    NULLSYMB if the mark is not in a channel.
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] DB_SYMB GetCurChanSymb_EDB(EDB);  //


  
//-----------------------------------------------------------------------------------------------------------
// GetCurLineSymb_EDB Get current line symbol.
//
// Returns            Currently displayed line symbol.
//                    NULLSYMB if no line displayed.
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] DB_SYMB GetCurLineSymb_EDB(EDB);  //


  
//-----------------------------------------------------------------------------------------------------------
// GetDisplFidRange_EDB Return the displayed fiducial start index & number of cells
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GetDisplFidRange_EDB(EDB,       // EDB Object
                                        var int,   // Fiducial start
                                        var int);  // Number of fiducials


  
//-----------------------------------------------------------------------------------------------------------
// GetCurPoint_EDB Returns the coordinates of the currently selected point in the database (first value if range selected)
//
// Available       9.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GetCurPoint_EDB(EDB,        // EDB object
                                   var real,   // X coordinate (dummy if no selection or if no X channel defined)
                                   var real,   // Y coordinate (dummy if no selection or if no Y channel defined)
                                   var real);  // Z coordinate (dummy if no selection or if no Z channel defined)


  
//-----------------------------------------------------------------------------------------------------------
// GetFidRange_EDB Returns currently displayed fid range
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GetFidRange_EDB(EDB,        // EDB Object
                                   var real,   // Fiducial start
                                   var real,   // Fiducial increment
                                   var int);   // Number of fiducials


  
//-----------------------------------------------------------------------------------------------------------
// GetNextLineSymb_EDB Returns the next line symbol.
//
// Returns             The next line symbol of currently displayed line.
//                     NULLSYMB if no line displayed.
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] DB_SYMB GetNextLineSymb_EDB(EDB);  //


  
//-----------------------------------------------------------------------------------------------------------
// GetPrevLineSymb_EDB Returns the previous line symbol.
//
// Returns             The previous line symbol of currently displayed line.
//                     NULLSYMB if no line displayed.
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] DB_SYMB GetPrevLineSymb_EDB(EDB);  //


  
//-----------------------------------------------------------------------------------------------------------
// GetProfileXAxisOptions_EDB Get profile X-axis options
//
// Available                  9.5.1
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GetProfileXAxisOptions_EDB(EDB,        //
                                              var int,    // Auto rescale X-axis
                                              var int,    // render vertical grid lines
                                              var real);  // vertical lines interval


  
//-----------------------------------------------------------------------------------------------------------
// SetProfileXAxisOptions_EDB Set profile X-axis options
//
// Available                  9.5.1
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetProfileXAxisOptions_EDB(EDB,    //
                                              int,    // Auto rescale X-axis
                                              int,    // render vertical grid lines
                                              real);  // vertical lines interval


  
//-----------------------------------------------------------------------------------------------------------
// GetProfileRangeX_EDB Get profile X range and X channel
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GetProfileRangeX_EDB(EDB,           //
                                        var real,      // Minimum x
                                        var real,      // Maximum x
                                        var DB_SYMB);  // X axis channel, NULLSYMB if none


  
//-----------------------------------------------------------------------------------------------------------
// GetProfileRangeY_EDB Get profile Y range and display option
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GetProfileRangeY_EDB(EDB,        //
                                        int,        // Profile window number (0 to MAX_PROF_WND-1, see iProfileOpen_EDB)
                                        int,        // Profile number in window (see iWindowProfiles_EDB which returns number of profiles in a window)
                                        var real,   // Minimum y
                                        var real,   // Maximum y
                                        var int);   // EDB_PROFILE_SCALE


  
//-----------------------------------------------------------------------------------------------------------
// GetProfileSplit_EDB Get profile split for 3 windows.
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GetProfileSplit_EDB(EDB,        //
                                       var real,   // Split d1 (profile window 0 height / entire profile window height)
                                       var real);  // Split d2 (profile window 1 height / entire profile window height)


  
//-----------------------------------------------------------------------------------------------------------
// GetProfileSplit5_EDB Get profile split for 5 windows.
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GetProfileSplit5_EDB(EDB,        //
                                        var real,   // Split d1 (profile window 0 height / entire profile window height)
                                        var real,   // Split d2 (profile window 1 height / entire profile window height)
                                        var real,   // Split d3 (profile window 2 height / entire profile window height)
                                        var real);  // Split d4 (profile window 3 height / entire profile window height)


  
//-----------------------------------------------------------------------------------------------------------
// GetProfileSplitVV_EDB Get profile window splits.
//
// Notes                 The returned VV is sized to the maximum number of profiles
//                       that can be displayed. If a profile is not currently displayed,
//                       its height fraction is 0.  The sum of all the fractions returned
//                       is equal to 1.
//                       
//                       The profile splits refers to the relative sizes of the individual
//                       profile windows. To get/set the fraction of the total database window
//                       devoted to the profiles, use the SetSplit_EDB and rGetSplit_EDB functions.
//
// Available             5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GetProfileSplitVV_EDB(EDB,   //
                                         VV);   // Split VV (REAL) (profile window heights / entire profile window height)


  
//-----------------------------------------------------------------------------------------------------------
// GetProfileVerticalGridLines_EDB Get profile grid vertical line info.
//
// Available                       5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GetProfileVerticalGridLines_EDB(EDB,        //
                                                   var int,    // Vertical grid lines?
                                                   var real);  // Vertical grid interval


  
//-----------------------------------------------------------------------------------------------------------
// GetProfileWindow_EDB Get profile window size
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GetProfileWindow_EDB(EDB,       //
                                        int,       // Profile window number (0 to MAX_PROF_WND-1, see iProfileOpen_EDB)
                                        var int,   // Window x size in pixels
                                        var int);  // Window y size in pixels


  
//-----------------------------------------------------------------------------------------------------------
// GotoColumn_EDB Move the channel marker to a specific column.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GotoColumn_EDB(EDB,   // EDB Object
                                  int);  // Channel column number, 0 is first -1 for first column without data


  
//-----------------------------------------------------------------------------------------------------------
// GotoElem_EDB Goto an element in the current line.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GotoElem_EDB(EDB,   // EDB Object
                                int);  // Element number


  
//-----------------------------------------------------------------------------------------------------------
// GotoLine_EDB Goto to a line symbol in the editor.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GotoLine_EDB(EDB,       // EDB Object
                                DB_SYMB);  // Line symbol to goto to


  
//-----------------------------------------------------------------------------------------------------------
// Histogram_EDB Create histogram stats.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void Histogram_EDB(EDB,    // EDB Object
                                 ST,     // ST handle to update
                                 real,   // Histogram minimum
                                 real,   // Histogram increment
                                 int);   // Number of increments


  
//-----------------------------------------------------------------------------------------------------------
// iAllChanList_EDB Get a list of the all channels but in the way they are displayed.
//
// Returns          Number of symbols in the list.
//                  Terminates GX if there was an error.
//
// Notes            The VV elements must be INT.
//                  
//                  Displayed channel lists are filled in the order the channels
//                  appear on the display, left to right.
//
// See also         iDispChanList_EDB
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iAllChanList_EDB(EDB,   // EDB Object
                                   VV);   // VV (INT) in which to place the list.


  
//-----------------------------------------------------------------------------------------------------------
// iChannels_EDB Returns number of displayed channels
//
// Returns       x - number of displayed channels
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iChannels_EDB(EDB);  //


  
//-----------------------------------------------------------------------------------------------------------
// iDispChanList_EDB Get a list of the displayed channel symbols.
//
// Returns           Number of symbols in the list.
//                   Terminates GX if there was an error.
//
// Notes             The VV elements must be INT.
//                   
//                   Displayed channel lists are filled in the order the channels
//                   appear on the display, left to right.
//
// See also          iDispChanLST_EDB
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iDispChanList_EDB(EDB,   // EDB Object
                                    VV);   // VV (INT) in which to place the list.


  
//-----------------------------------------------------------------------------------------------------------
// iDispChanLST_EDB Get a list of the displayed channel names.
//
// Returns          Number of channels in the list.
//                  Terminates GX if there was an error.
//
// Notes            Displayed channel lists are filled in the order the channels
//                  appear on the display, left to right.
//                  
//                  The channel names will be placed in the "Name" part of
//                  the list and the values are set to the symbol handle.
//
// See also         iDispChanList_EDB
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iDispChanLST_EDB(EDB,   // EDB Object
                                   LST);  // LST object


  
//-----------------------------------------------------------------------------------------------------------
// iDispClassChanLST_EDB Get a list of the displayed channels in a given channel class.
//
// Returns               Number of channels in the list.
//                       Terminates GX if there was an error.
//
// Notes                 Displayed channel lists are filled in the order the channels
//                       appear on the display, left to right.
//                       
//                       The channel names will be placed in the "Name" part of
//                       the list and the values are set to the symbol handle.
//                       
//                       Examples of channel classes in current use are "MASK" and
//                       "ASSAY". (Searches are case tolerant).
//
// See also              iDispChanList_EDB
//
// Available             5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iDispClassChanLST_EDB(EDB,      // EDB Object
                                        LST,      // LST object
                                        string);  // Class name ("" for all)


  
//-----------------------------------------------------------------------------------------------------------
// iFindChannelColumn_EDB Find the column that contains a channel
//
// Returns                Column number that contains a specific channel
//                        iDUMMY of channel not loaded
//
// Available              5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iFindChannelColumn_EDB(EDB,      // EDB Object
                                         string);  // Channel


  
//-----------------------------------------------------------------------------------------------------------
// iFindNearest_EDB Find the nearest point on the current line based
//                  on X,Y and Z and their projection.
//
// Returns          x - Nearest point
//                  -1 - Not available
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iFindNearest_EDB(EDB,        // EDB Object
                                   var real,   // X - Modified with true point
                                   var real,   // Y - Modified with true point
                                   var real,   // Z - Modified with true point
                                   IPJ);       // Projection of X,Y,Z


  
//-----------------------------------------------------------------------------------------------------------
// IGetCurChan_EDB Get current channel name.
//
// Notes           Returns "" if mark not currently in a channel.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void IGetCurChan_EDB(EDB,          // EDB Object
                                   var string,   // Where to put the name
                                   int);         // Length of the Buffer
#define GetCurChan_EDB(edb, str_val) IGetCurChan_EDB(edb, str_val, sizeof(str_val))


  
//-----------------------------------------------------------------------------------------------------------
// IGetCurFidString_EDB This method returns the currently selected value
//                      at the current fid (if available).
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void IGetCurFidString_EDB(EDB,          // EDB object
                                        var string,   // String returned here
                                        int);         // Size
#define GetCurFidString_EDB(edb, val) IGetCurFidString_EDB(edb, val, sizeof(val))


  
//-----------------------------------------------------------------------------------------------------------
// IGetCurLine_EDB Get current line name.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void IGetCurLine_EDB(EDB,          // EDB Object
                                   var string,   // Where to put the name
                                   int);         // Length of the Buffer
#define GetCurLine_EDB(edb, str_val) IGetCurLine_EDB(edb, str_val, sizeof(str_val))


  
//-----------------------------------------------------------------------------------------------------------
// iGetCurMark_EDB Returns the current data mark info.
//
// Returns         0 - if data is marked.
//                 1 - if data is not currently marked.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iGetCurMark_EDB(EDB,        // EDB Object
                                  var real,   // Start fiducial
                                  var real,   // End fiducial
                                  var real);  // Fiducial increment


  
//-----------------------------------------------------------------------------------------------------------
// IGetCurrentSelection_EDB Get current selection information.
//
// Notes                    Channel Name    Empty if no channel
//                          Line Name       "[All]" if all lines are selected
//                          Fid Range       "[All]" if all values in all lines are selected
//                          "[None]"  if no values are selected
//                          "10 to 20"  giving the range of values.
//
// Available                5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void IGetCurrentSelection_EDB(EDB,          // EDB Object
                                            var string,   // Database name
                                            int,          // Length of the database name
                                            var string,   // Name of Selected channel
                                            int,          // Length of the channel name
                                            var string,   // Selected lines buffer
                                            int,          // Length of the lines buffer
                                            var string,   // Fiducial range
                                            int);         // Length of the range buffer
#define GetCurrentSelection_EDB(edb, db, chan, line, fid) IGetCurrentSelection_EDB(edb, db, sizeof(db), chan, sizeof(chan), line, sizeof(line), fid, sizeof(fid))


  
//-----------------------------------------------------------------------------------------------------------
// iGetDatabasesLST_EDB Load the file names of open databases into a LST.
//
// Returns              The number of documents loaded into the LST.
//                      The LST is cleared first.
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iGetDatabasesLST_EDB(LST,   // LST to load
                                       int);  // EDB_PATH


  
//-----------------------------------------------------------------------------------------------------------
// iGetMarkChanVV_EDB Get channel data for the current mark.
//
// Returns            0 if successful.
//                    1 if failed, or if entire database is marked.
//
// Notes              The current "mark" in this case is the start and
//                    end fiducials and not the selected channel. You
//                    can use this method to retrieve the selected range
//                    from any channel, loaded or not.
//                    
//                    The VV will be resized to the length of the data
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iGetMarkChanVV_EDB(EDB,       // EDB Object
                                     VV,        // VV in which to place the data.
                                     DB_SYMB);  // Channel symbol to retrieve.


  
//-----------------------------------------------------------------------------------------------------------
// iGetMarkChanVA_EDB Get channel data for the current mark.
//
// Returns            0 if successful.
//                    1 if failed, or if entire database is marked.
//
// Notes              The current "mark" in this case is the start and
//                    end fiducials and not the selected channel. You
//                    can use this method to retrieve the selected range
//                    from any channel, loaded or not.
//                    
//                    The VA will be resized to the length of the data
//
// Available          8.2
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iGetMarkChanVA_EDB(EDB,       // EDB Object
                                     VA,        // VA in which to place the data.
                                     DB_SYMB);  // Channel symbol to retrieve.


  
//-----------------------------------------------------------------------------------------------------------
// IGetName_EDB Get the name of the database object of this EDB.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void IGetName_EDB(EDB,          //
                                var string,   // Name returned
                                int);         // Size of the String
#define GetName_EDB(edb, name) IGetName_EDB(edb, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// iGetProfileParm_EDB Get integer profile parameter
//
// Returns             Data Value (See notes)
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iGetProfileParm_EDB(EDB,   //
                                      int,   // Profile window number (0 to MAX_PROF_WND-1, see iProfileOpen_EDB)
                                      int,   // Profile number in window (see GetProfileRangeY_EDB)
                                      int);  // EDB_PROF


  
//-----------------------------------------------------------------------------------------------------------
// iGetWindowState_EDB Retrieve the current state of the database window
//
// Returns             EDB_WINDOW_STATE
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iGetWindowState_EDB(EDB);  //


  
//-----------------------------------------------------------------------------------------------------------
// iHaveCurrent_EDB Checks if any database is currently loaded
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iHaveCurrent_EDB();


  
//-----------------------------------------------------------------------------------------------------------
// iIsLocked_EDB Checks if the database locked
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iIsLocked_EDB(EDB);  // EDB object


  
//-----------------------------------------------------------------------------------------------------------
// iLoaded_EDB Checks if a specific database is loaded.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iLoaded_EDB(string);  // Database name


  
//-----------------------------------------------------------------------------------------------------------
// iProfileOpen_EDB Return TRUE or FALSE if profile window is open
//
// Returns          TRUE if window is open
//                  FALSE if window is closed
//
// Notes            This functions will return FALSE if requested window
//                  is not supported in current version of Oasis montaj.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iProfileOpen_EDB(EDB,   //
                                   int);  // Profile window number: 0 is the top window 1 is the middle window 2 is the bottom window


  
//-----------------------------------------------------------------------------------------------------------
// iReadOnly_EDB Checks if a database is currently opened in a read-only mode.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iReadOnly_EDB(EDB);  //


  
//-----------------------------------------------------------------------------------------------------------
// GetWindowPosition_EDB Get the map window's position and dock state
//
// Available             9.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void GetWindowPosition_EDB(EDB,       //
                                         var int,   // Window left position
                                         var int,   // Window top position
                                         var int,   // Window right position
                                         var int,   // Window bottom position
                                         var int,   // Window state EDB_WINDOW_STATE
                                         var int);  // Docked or floating EDB_WINDOW_POSITION


  
//-----------------------------------------------------------------------------------------------------------
// SetWindowPosition_EDB Get the map window's position and dock state
//
// Available             9.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetWindowPosition_EDB(EDB,   //
                                         int,   // Window left position
                                         int,   // Window top position
                                         int,   // Window right position
                                         int,   // Window bottom position
                                         int,   // Window state EDB_WINDOW_STATE
                                         int);  // Docked or floating EDB_WINDOW_POSITION


  
//-----------------------------------------------------------------------------------------------------------
// iShowProfileName_EDB Show a profile in the profile window
//
// Returns              Profile number in window (see GetProfileRangeY_EDB), -1 for error
//
// Notes                If the symbol is not loaded, it will be loaded.
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iShowProfileName_EDB(EDB,      //
                                       int,      // Profile window number (0 to MAX_PROF_WND-1, see iProfileOpen_EDB)
                                       string);  // Name of the channel


  
//-----------------------------------------------------------------------------------------------------------
// iProfileShown_EDB Return index of first profile window in which a profile is shown
//
// Returns           Index of first profile window in which it is loaded, -1 if not loaded in any profile window
//
// Notes             Returns -1 if channel profile is not loaded.
//
// Available         9.7
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iProfileShown_EDB(EDB,      //
                                    string);  // Name of the channel


  
//-----------------------------------------------------------------------------------------------------------
// iGetWindowYAxisDirection_EDB Get the y-axis direction for a window
//
// Returns                      EDB_YAXIS_DIRECTION
//
// Available                    8.3
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iGetWindowYAxisDirection_EDB(EDB,   //
                                               int);  // Profile window number (0 to MAX_PROF_WND-1, see iProfileOpen_EDB)


  
//-----------------------------------------------------------------------------------------------------------
// iWindowProfiles_EDB Get number of profiles in a window
//
// Returns             Number of profiles in a window
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] int iWindowProfiles_EDB(EDB,   //
                                      int);  // Profile window number (0 to MAX_PROF_WND-1, see iProfileOpen_EDB)


  
//-----------------------------------------------------------------------------------------------------------
// LaunchHistogram_EDB Launch histogram tool on a database.
//
// See also            LaunchHistogram_CHIMERA in chimera.gxh
//
// Available           5.0.6
//-----------------------------------------------------------------------------------------------------------

[_public] void LaunchHistogram_EDB(EDB,      // EDB Object
                                   string);  // First chan name


  
//-----------------------------------------------------------------------------------------------------------
// LaunchScatter_EDB Launch scatter tool on a database.
//
// Notes             The scatter tool uses the following INI parameters
//                   
//                   SCATTER.STM       name of the scatter template,"none" for none
//                   SCATTER.STM_NAME  name of last template section, "" for none.
//                   SCATTER.X         name of channel to display in X
//                   SCATTER.Y         name of channel to display in Y
//                   SCATTER.MASK      name of channel to use for mask
//
// See also          LaunchScatter_CHIMERA in chimera.gxh
//
// Available         5.0.6
//-----------------------------------------------------------------------------------------------------------

[_public] void LaunchScatter_EDB(EDB);  // EDB Object


  
//-----------------------------------------------------------------------------------------------------------
// Load_EDB Loads a list of databases into the workspace
//
// Returns  Handle to current edited database, which will be the last
//          database in the list.
//
// Notes    The last listed database will become the current database.
//          
//          Databases may already be loaded.
//          
//          Only the first file in the list may have a directory path.
//          All other files in the list are assumed to be in the same
//          directory as the first file.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] EDB Load_EDB(string);  // List of databases (';' or '|' delimited) to load.


  
//-----------------------------------------------------------------------------------------------------------
// LoadNoActivate_EDB Loads documents into the workspace
//
// Returns            Handle to current edited document, which will be the last
//                    database in the list if multiple files were provided.
//
// Notes              This function acts just like Load_EDB except that the document(s) is not activated (brought to foreground) and no
//                    guarantee is given about which document is currently active.
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] EDB LoadNoActivate_EDB(string);  // List of documents (';' or '|' delimited) to load.


  
//-----------------------------------------------------------------------------------------------------------
// LoadAllChans_EDB Load all channels into current database
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void LoadAllChans_EDB(EDB);  //


  
//-----------------------------------------------------------------------------------------------------------
// LoadChan_EDB Load a channel into current database
//
// Notes        If the channel does not exist, or if channel is already
//              loaded nothing happens.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void LoadChan_EDB(EDB,      // EDB Object
                                string);  // Channel name


  
//-----------------------------------------------------------------------------------------------------------
// LoadNew_EDB Loads a database into the workspace, flags as new.
//
// Returns     Handle to the current edited database.
//
// Notes       See Load_EDB. This is used for brand new databases, to set
//             an internal flag such that if on closing the user chooses
//             not to save changes, the database is deleted.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] EDB LoadNew_EDB(string);  // Database to load.


  
//-----------------------------------------------------------------------------------------------------------
// LoadPass_EDB Loads a database into the editor with login and password.
//
// Returns      Handle to current edited database.
//
// Notes        The loaded database will become the current database.
//              
//              If the database is already loaded, it simply becomes
//              the current database.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] EDB LoadPass_EDB(string,   // Name of database to load
                               string,   // Login Name
                               string);  // Password


  
//-----------------------------------------------------------------------------------------------------------
// LoadWithView_EDB Load an EDB with the view from a current EDB.
//
// Returns          New EDB handle.
//
// Notes            Can only be run in interactive mode. Is used by
//                  dbsubset to create a new database with the same
//                  view as previously.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] EDB LoadWithView_EDB(string,   // Source DB name
                                   EDB);     // EDB to use as the source view


  
//-----------------------------------------------------------------------------------------------------------
// Lock_EDB This method locks the Edited Database.
//
// Returns  Handle to database associated with edited database.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] DB Lock_EDB(EDB);  //


  
//-----------------------------------------------------------------------------------------------------------
// MakeCurrent_EDB Makes this EDB object the current active object to the user.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void MakeCurrent_EDB(EDB);  // EDB to make active


  
//-----------------------------------------------------------------------------------------------------------
// RemoveProfile_EDB Remove a profile from the profile window
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void RemoveProfile_EDB(EDB,   //
                                     int,   // Profile window number (0 to MAX_PROF_WND-1, see iProfileOpen_EDB)
                                     int);  // Profile number in window (see GetProfileRangeY_EDB)


  
//-----------------------------------------------------------------------------------------------------------
// rGetCurFid_EDB This method returns the currently selected fiducial if
//                the user is selecting a fiducial. If not, it returns
//                a dummy.
//
// Returns        x     - Fiducial
//                DUMMY - No Selected Fiducial
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] real rGetCurFid_EDB(EDB);  //


  
//-----------------------------------------------------------------------------------------------------------
// rGetProfileParm_EDB Get real profile parameter
//
// Returns             Real profile parameter
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] real rGetProfileParm_EDB(EDB,   //
                                       int,   // Profile window number (0 to MAX_PROF_WND-1, see iProfileOpen_EDB)
                                       int,   // Profile number in window (see GetProfileRangeY_EDB)
                                       int);  // EDB_PROF


  
//-----------------------------------------------------------------------------------------------------------
// rGetSplit_EDB Get split ratio between spreadsheet and profile sections.
//
// Returns       d = (spreadsheet window height/
//               (spreadsheet window height + entire profile window height))
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] real rGetSplit_EDB(EDB);  //


  
//-----------------------------------------------------------------------------------------------------------
// RunChannelMaker_EDB Run the maker for a single channel.
//
// Notes               Skips channels without makers; will not return an
//                     error if the channel does not exist.
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void RunChannelMaker_EDB(EDB,      //
                                       string);  // Channel name


  
//-----------------------------------------------------------------------------------------------------------
// RunChannelMakers_EDB Recreate channels with makers.
//
// Notes                Skips channels without makers.
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void RunChannelMakers_EDB(EDB);  //


  
//-----------------------------------------------------------------------------------------------------------
// SetCurLine_EDB Set the current line name.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetCurLine_EDB(EDB,      // EDB Object
                                  string);  // Line name


  
//-----------------------------------------------------------------------------------------------------------
// SetCurLineNoMessage_EDB Set Line but do not send a message.
//
// Available               5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetCurLineNoMessage_EDB(EDB,      // EDB Object
                                           string);  // Line name


  
//-----------------------------------------------------------------------------------------------------------
// SetCurMark_EDB Set the current mark.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetCurMark_EDB(EDB,    // EDB Object
                                  real,   // Start fiducial
                                  real);  // End fiducial


  
//-----------------------------------------------------------------------------------------------------------
// SetProfileParmI_EDB Set integer profile parameter
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetProfileParmI_EDB(EDB,   //
                                       int,   // Profile window number (0 to MAX_PROF_WND-1, see iProfileOpen_EDB)
                                       int,   // Profile number in window (see GetProfileRangeY_EDB)
                                       int,   // EDB_PROF
                                       int);  // Setting


  
//-----------------------------------------------------------------------------------------------------------
// SetProfileParmR_EDB Set real profile parameter
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetProfileParmR_EDB(EDB,    //
                                       int,    // Profile window number (0 to MAX_PROF_WND-1, see iProfileOpen_EDB)
                                       int,    // Profile number in window (see GetProfileRangeY_EDB)
                                       int,    // EDB_PROF
                                       real);  // Setting


  
//-----------------------------------------------------------------------------------------------------------
// SetProfileRangeX_EDB Set profile X range and X channel
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetProfileRangeX_EDB(EDB,       //
                                        real,      // Minimum x, rDUMMY for data minimum
                                        real,      // Maximum x, rDUMMY for data maximum
                                        DB_SYMB);  // X axis channel, NULLSYMB to use fids


  
//-----------------------------------------------------------------------------------------------------------
// SetProfileRangeY_EDB Set profile Y range and display option
//
// Notes                If channel is not loaded or displayed, it will
//                      loaded and/or displayed.
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetProfileRangeY_EDB(EDB,    //
                                        int,    // Profile window number (0 to MAX_PROF_WND-1, see iProfileOpen_EDB)
                                        int,    // Profile number in window (see GetProfileRangeY_EDB)
                                        real,   // Minimum y
                                        real,   // Maximum y
                                        int);   // EDB_PROFILE_SCALE


  
//-----------------------------------------------------------------------------------------------------------
// ProfileRescaleAll_EDB Rescale all profiles in a selected window in both X and Y, based on current scaling selections
//
// Available             9.6
//-----------------------------------------------------------------------------------------------------------

[_public_app] void ProfileRescaleAll_EDB(EDB,   //
                                         int);  // Profile window number (0 to MAX_PROF_WND-1, see iProfileOpen_EDB)


  
//-----------------------------------------------------------------------------------------------------------
// SetProfileSplit_EDB Set profile split for 3 windows.
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetProfileSplit_EDB(EDB,    //
                                       real,   // Split d1 (profile window 0 height / entire profile window height)
                                       real);  // Split d2 (profile window 1 height / entire profile window height)


  
//-----------------------------------------------------------------------------------------------------------
// SetProfileSplit5_EDB Set profile split for 5 windows.
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetProfileSplit5_EDB(EDB,    //
                                        real,   // Split d1 (profile window 0 height / entire profile window height)
                                        real,   // Split d2 (profile window 1 height / entire profile window height)
                                        real,   // Split d3 (profile window 2 height / entire profile window height)
                                        real);  // Split d4 (profile window 3 height / entire profile window height)


  
//-----------------------------------------------------------------------------------------------------------
// SetProfileSplitVV_EDB Set profile splits
//
// Notes                 The input VV values are the fractional heights for each
//                       profile window. Values are summed, and normalized (so you can
//                       enter "1,1,1", with a VV of length 3, if you want 3 equal profile windows).
//                       
//                       VV values beyond the maximum number of displayable
//                       profiles (MAX_PROF_WND) are ignored.
//
// Available             5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetProfileSplitVV_EDB(EDB,   //
                                         VV);   // Split VV (REAL) (relative sizes of each profile window)


  
//-----------------------------------------------------------------------------------------------------------
// SetSplit_EDB Set split ratio between spreadsheet and profile sections.
//
// Notes        d = (spreadsheet window height/
//              (spreadsheet window height + entire profile window height))
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetSplit_EDB(EDB,    //
                                real);  // Split d (0.0 <= d <= 1.0).


  
//-----------------------------------------------------------------------------------------------------------
// SetWindowState_EDB Changes the state of the database window
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void SetWindowState_EDB(EDB,   //
                                      int);  // EDB_WINDOW_STATE


  
//-----------------------------------------------------------------------------------------------------------
// ShowProfile_EDB Show a profile in the profile window
//
// Notes           If the symbol is not loaded, it will be loaded.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void ShowProfile_EDB(EDB,       //
                                   int,       // Profile window number (0 to MAX_PROF_WND-1, -1 to plot to the currently selected profile window. See iProfileOpen_EDB)
                                   DB_SYMB);  // Channel symbol


  
//-----------------------------------------------------------------------------------------------------------
// Statistics_EDB Add all currently selected data to the ST.
//
// Notes          Use Histogram_EDB to get median or histogram.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void Statistics_EDB(EDB,   // EDB Object
                                  ST);   // ST handle to update


  
//-----------------------------------------------------------------------------------------------------------
// UnLoad_EDB Unloads an edited database.
//
// Notes      If the database is not loaded, nothing happens.
//            Same as UnLoadVerify_EDB with FALSE to prompt save.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void UnLoad_EDB(string);  // Name of database to unload


  
//-----------------------------------------------------------------------------------------------------------
// UnLoadAll_EDB Unloads all opened databases
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void UnLoadAll_EDB();


  
//-----------------------------------------------------------------------------------------------------------
// UnLoadAllChans_EDB Unload all channels into current database
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void UnLoadAllChans_EDB(EDB);  //


  
//-----------------------------------------------------------------------------------------------------------
// UnLoadChan_EDB Unload a channel into current database
//
// Notes          If the channel does not exist, or if channel is already
//                loaded nothing happens.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void UnLoadChan_EDB(EDB,      // EDB Object
                                  string);  // Channel name


  
//-----------------------------------------------------------------------------------------------------------
// UnLoadDiscard_EDB Unloads a database in the workspace, discards changes.
//
// Notes             If the database is not loaded, nothing happens.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void UnLoadDiscard_EDB(string);  // Name of database to unload


  
//-----------------------------------------------------------------------------------------------------------
// UnLoadVerify_EDB Unloads an edited database, optional prompt to save.
//
// Notes            If the database is not loaded, nothing happens.
//                  The user can be prompted to save before unloading.
//                  If EDB_UNLOAD_NO_PROMPT, data is always saved.
//                  EDB_UNLOAD_MULTIPROMPT is now obsolete and
//                  is equivalent to EDB_UNLOAD_SINGLE_PROMPT.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void UnLoadVerify_EDB(string,   // Name of database to unload
                                    int);     // EDB_UNLOAD


  
//-----------------------------------------------------------------------------------------------------------
// UnLock_EDB This method unlocks the Edited Database.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public_app] void UnLock_EDB(EDB);  //



//===========================================================================================================
//
// External Window Functions
//
//===========================================================================================================



//===========================================================================================================
//
// Obsolete Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// LoadChannelAfter_EDB Loads the channel after specified channel
//
// Notes                If the channel to locate does not exist it will load the channel in the default location.
//                      If the channel to be loaded is already loaded, no changes will be made.
//
// Available            2023.1
//-----------------------------------------------------------------------------------------------------------

[_public_app] void LoadChannelAfter_EDB(EDB,      // EDB Object
                                        string,   // Channel name
                                        string);  // Channel name





//*** endblock Generated


#endif
