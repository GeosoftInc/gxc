//*** extends 'class_empty.gxh'

#ifndef HAGG_GXH_DEFINED
#define HAGG_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class AGG
//
//-----------------------------------------------------------------------------------------------------------
//
// The AGG class is used to handle image display on maps.
// An aggregate contains one or more image layers (LAY) with
// each layer representing a grid or image file. The AGG
// will combine all the layers to form one image
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// AGG_LAYER_ZONE Definitions
//
// Aggregate Layer Zone defines
//
// AGG_LAYER_ZONE_DEFAULT
// If a color table with no color transform is passed
// it will be used with the default zoning
// method of the data, which is usually
// AGG_LAYER_ZONE_EQUALAREA.
//
// AGG_LAYER_ZONE_LINEAR
// Linear Distribution
//
// AGG_LAYER_ZONE_NORMAL
// Normal Distribution
//
// AGG_LAYER_ZONE_EQUALAREA
// Equal Area Distribution
//
// AGG_LAYER_ZONE_SHADE
// If AGG_LAYER_ZONE_SHADE is specified, a shaded relief
// layer is created from the specified grid.  A new grid
// file will also be created to hold the shaded relief
// image data.  This file will have the same name as the
// original grid but with "_s" added to the root name.
// It will always be located in the workspace directory
// regardless of the location of the original source image.
// If the file already exists, it will used as it is.
// Shading is always at inclination = declination = 45 deg.
// with default scaling.  If different shading is desired,
// use the LayerShadeIMG_AGG method.
//
// AGG_LAYER_ZONE_LOGLINEAR
// Log Linear Distribution
//
// AGG_LAYER_ZONE_LAST
// The last ITR used to display this
// data will be used if it exists.  If it
// does not exist, the behaviour is the same
// as AGG_LAYER_ZONE_DEFAULT.
//
//===========================================================================================================


#define AGG_LAYER_ZONE_DEFAULT 0
#define AGG_LAYER_ZONE_LINEAR 1
#define AGG_LAYER_ZONE_NORMAL 2
#define AGG_LAYER_ZONE_EQUALAREA 3
#define AGG_LAYER_ZONE_SHADE 4
#define AGG_LAYER_ZONE_LOGLINEAR 5
#define AGG_LAYER_ZONE_LAST 6


//===========================================================================================================
//
// AGG_MODEL Definitions
//
// Aggregation color model defines
//
// AGG_MODEL_HSV
// Hue Saturation Value
//
// AGG_MODEL_RGB
// Red Green Blue
//
// AGG_MODEL_CMY
// Cyan Magenta Yellow
//
//===========================================================================================================


#define AGG_MODEL_HSV 1
#define AGG_MODEL_RGB 2
#define AGG_MODEL_CMY 3


//===========================================================================================================
//
// AGG_RENDER Definitions
//
// Aggregation rendering modes
//
// AGG_RENDER_ADD
// Add all the colors together
//
// AGG_RENDER_BLEND
// Adds and divides by the number of non-dummy colors
//
// AGG_RENDER_BLEND_ALL
// Adds and divides by the number of colors
//
// AGG_RENDER_FADE
// Multiplies current colors by the input's colors over 255 (input works as the percentage of color to preserve)
//
//===========================================================================================================


#define AGG_RENDER_ADD 0
#define AGG_RENDER_BLEND 1
#define AGG_RENDER_BLEND_ALL 2
#define AGG_RENDER_FADE 3





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// _SetModel_AGG Sets the Color Model
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void _SetModel_AGG(AGG,   //
                             int);  // AGG_MODEL
#define SetModel_AGG _SetModel_AGG


  
//-----------------------------------------------------------------------------------------------------------
// ChangeBrightness_AGG Change the brightness.
//
// Notes                0.0 brightness does nothing.
//                      -1.0 to 0.0 makes colors darker, -1.0 is black
//                      0.0 to 1.0 makes colors lighter, 1.0 is white
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ChangeBrightness_AGG(AGG,    // AGG object
                                    real);  // -1.0 - black; 0.0 no change; 1.0 white


  
//-----------------------------------------------------------------------------------------------------------
// Create_AGG Create an aggregate
//
// Returns    AGG object
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] AGG Create_AGG();


  
//-----------------------------------------------------------------------------------------------------------
// CreateMap_AGG Create AGG from Map with Group name.
//
// Returns       AGG object
//
// Notes         The Agg Group name must include the View name with a
//               backslash separating the view name and group name; e.g.
//               "Data\AGG_test" (when used as a string, the double slash
//               represents as single \).
//
// Available     5.0.5
//-----------------------------------------------------------------------------------------------------------

[_public] AGG CreateMap_AGG(MAP,      // MAP on which to place the view
                            string);  // AGG group name


  
//-----------------------------------------------------------------------------------------------------------
// Destroy_AGG Destroy the AGG handle.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Destroy_AGG(AGG);  // AGG Handle


  
//-----------------------------------------------------------------------------------------------------------
// GetLayerITR_AGG Get the ITR of a layer
//
// Notes           Layers are numbered from 0, consecutively in the order they are
//                 placed in the aggregate.
//                 
//                 An error will occur if the layer does not exist.
//                 
//                 Caller must create/destroy ITR.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetLayerITR_AGG(AGG,   //
                               int,   // Layer number
                               ITR);  //


  
//-----------------------------------------------------------------------------------------------------------
// GetLayerST_AGG Get a ST filled with layer statistics
//
// Returns        ST object
//
// Notes          Layers are numbered from 0, consecutively in the order they are
//                placed in the aggregate.
//                
//                An error will occur if the layer does not exist.
//                
//                Caller must create/destroy ITR.
//
// Available      2021.2
//-----------------------------------------------------------------------------------------------------------

[_public] ST GetLayerST_AGG(AGG,   //
                            int);  // Layer number


  
//-----------------------------------------------------------------------------------------------------------
// ILayerPIC_AGG Add a PIC as a layer in an aggregate.
//
// Notes         This function creates a temporary PNG file in the temp directory.
//               The name is returned so that you can pack the map and remove the file
//               or copy the file elsewhere for later use.
//
// Available     5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void ILayerPIC_AGG(AGG,          //
                             int,          // Note: the PIC object is obsolete
                             var string,   // Temp File name
                             int);         // Max Temp File name length
#define LayerPIC_AGG(agg, pic, name) ILayerPIC_AGG(agg, pic, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// iListImg_AGG Lists file names of all the IMGs inside of the AGG.
//
// Returns      The number of IMGs.
//
// Notes        The returned VV contains the file names.
//
// Available    5.0.6
//-----------------------------------------------------------------------------------------------------------

[_public] int iListImg_AGG(AGG,   // AGG Handle
                           VV);   // VV of type -STR_FILE


  
//-----------------------------------------------------------------------------------------------------------
// iNumLayers_AGG Get the number of layers in an aggregate.
//
// Returns        The number of layers in an aggregate.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iNumLayers_AGG(AGG);  //


  
//-----------------------------------------------------------------------------------------------------------
// LayerIMG_AGG Add an image as a layer in an aggregate.
//
// See also     LayerShadeIMG_AGG
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LayerIMG_AGG(AGG,      //
                            string,   // Grid name
                            int,      // AGG_LAYER_ZONE transform to use if color table has none defined.
                            string,   // Color table name, "" for default This can be a .TBL .ZON .ITR or .AGG file .TBL is the default
                            real);    // Color contour interval or rDUMMY for default


  
//-----------------------------------------------------------------------------------------------------------
// LayerIMGEx_AGG Add an image as a layer in an aggregate.
//
// See also       LayerShadeIMG_AGG
//
// Available      8.2
//-----------------------------------------------------------------------------------------------------------

[_public] void LayerIMGEx_AGG(AGG,      //
                              string,   // Grid name
                              int,      // AGG_LAYER_ZONE transform to use if color table has none defined.
                              string,   // Color table name, "" for default This can be a .TBL .ZON .ITR or .AGG file .TBL is the default
                              real,     // Minimum value or rDUMMY for default
                              real,     // Maximum value or rDUMMY for default
                              real);    // Color contour interval or rDUMMY for default


  
//-----------------------------------------------------------------------------------------------------------
// LayerShadeIMG_AGG Add a shaded image as a layer in an aggregate.
//
// Notes             A new grid file will be created to hold the shaded
//                   image data.  This file will have the same name as the
//                   original grid but with "_s" added to the root name.
//                   It will always be located in the workspace directory
//                   regardless of the location of the original source image.
//                   If the file already exists, it will replaced.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LayerShadeIMG_AGG(AGG,        //
                                 string,     // Grid name
                                 string,     // Color table name, "" for default
                                 real,       // Inclination
                                 real,       // Declination
                                 var real);  // Scale (rDUMMY for default, returns value used)


  
//-----------------------------------------------------------------------------------------------------------
// rGetBrightness_AGG Get the brightness setting of the AGG
//
// Notes              Brightness can range from -1.0 (black) to 1.0 (white).
//                    This brightness control is relative to the normal color
//                    when the AGG is created.
//                    
//                    AGG brightness depends on the brightness of the ITR of each layer.
//                    Calling dGetBright_AGG will poll all layers, and if all have the same
//                    brightness, this is returned.  If any of the layers have a different
//                    brightness, the current brightness of each layer is changed to be
//                    the reference brightness (0.0)and the brightness value of 0.0 is
//                    returned.
//
// See also           ChangeBrightness_AGG, rGetBrightness_AGG, ChangeBrightness_AGG
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetBrightness_AGG(AGG);  // AGG object


  
//-----------------------------------------------------------------------------------------------------------
// SetLayerITR_AGG Set the ITR of a layer
//
// Notes           Layers are numbered from 0, consecutively in the order they are
//                 placed in the aggregate.
//                 
//                 An error will occur if the layer does not exist.
//                 
//                 Caller must create/destroy ITR.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetLayerITR_AGG(AGG,   //
                               int,   // Layer number
                               ITR);  //


  
//-----------------------------------------------------------------------------------------------------------
// SetRenderMethod_AGG Sets the Rendering Method
//
// Available           5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void SetRenderMethod_AGG(AGG,   //
                                   int);  // AGG_RENDER


  
//-----------------------------------------------------------------------------------------------------------
// UpdateThumb_AGG Update the thumbnail of an IMG from an AGG
//
// Available       5.1.5
//-----------------------------------------------------------------------------------------------------------

[_public] void UpdateThumb_AGG(AGG,      // AGG object
                               string,   // Name of the grid to update
                               int);     // Size of the thumbnail in pixels (64 is typical) the minimum size if 16 (16x16)





//*** endblock Generated


#endif
