//*** extends 'class_empty.gxh'

#ifndef HMVIEW_GXH_DEFINED
#define HMVIEW_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class MVIEW
//
//-----------------------------------------------------------------------------------------------------------
//
// A view (MVIEW class) has a 2-D/3-D translation matrix, a map
// projection and a clip region.  A view contains any number of
// "groups", and each "group" contains one or more graphics
// elements (entities).  Different types of groups will contain
// different types of entities:
//
//-----------------------------------------------------------------------------------------------------------
// Notes
//
// CSYMB groups (color symbols) contain data and rules for
// presenting the data as color symbols.  See ColSymbol_MVIEW
// and the CSYMB class.
// 
// AGG groups (aggregates) contain images.  See Aggregate_MVIEW
// and the AGG class.
// 
// Standard groups contain symbols, lines, polylines, and polygons.
// See StartGroup_MVIEW.
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// MAKER Definitions
//
// Maker defines
//
// MAKER_GX
// GX
//
//===========================================================================================================


#define MAKER_GX 0


//===========================================================================================================
//
// MVIEW_CLIP Definitions
//
// Boolean clipping defines
//
// CLIP_ON
// Turn ON clipping
//
// CLIP_OFF
// Turn OFF clipping
//
//===========================================================================================================


#define CLIP_ON 1
#define CLIP_OFF 0


//===========================================================================================================
//
// MVIEW_COLOR Definitions
//
// 24-bit color defines
// The iColor_MVIEW function can be used to create a color int from a
// color string description.
// The iColorXXX_MVIEW macros can be used to create colors from component
// intensities.
//
// C_BLACK
// Black
//
// C_RED
// Red
//
// C_GREEN
// Green
//
// C_BLUE
// Blue
//
// C_CYAN
// Cyan
//
// C_MAGENTA
// Magenta
//
// C_YELLOW
// Yellow
//
// C_GREY
// Grey
//
// C_LT_RED
// Light Red
//
// C_LT_GREEN
// Light Green
//
// C_LT_BLUE
// Light Blue
//
// C_LT_CYAN
// Light Cyan
//
// C_LT_MAGENTA
// Light Magenta
//
// C_LT_YELLOW
// Light Yellow
//
// C_LT_GREY
// Light Grey
//
// C_GREY10
// Grey 10%
//
// C_GREY25
// Grey 25%
//
// C_GREY50
// Grey 50%
//
// C_WHITE
// White
//
// C_TRANSPARENT
// Transparent or no-draw
//
//===========================================================================================================


#define C_BLACK 33554432
#define C_RED 33554687
#define C_GREEN 33619712
#define C_BLUE 50266112
#define C_CYAN 50331903
#define C_MAGENTA 50396928
#define C_YELLOW 67043328
#define C_GREY 41975936
#define C_LT_RED 54542336
#define C_LT_GREEN 54526016
#define C_LT_BLUE 50348096
#define C_LT_CYAN 50331712
#define C_LT_MAGENTA 50348032
#define C_LT_YELLOW 54525952
#define C_LT_GREY 54542400
#define C_GREY10 51910680
#define C_GREY25 54542400
#define C_GREY50 41975936
#define C_WHITE 50331648
#define C_TRANSPARENT 0


//===========================================================================================================
//
// MVIEW_CYLINDER3D Definitions
//
// What parts of the cylinder are closed
//
// MVIEW_CYLINDER3D_OPEN
// 
//
// MVIEW_CYLINDER3D_CLOSESTART
// 
//
// MVIEW_CYLINDER3D_CLOSEEND
// 
//
// MVIEW_CYLINDER3D_CLOSEALL
// 
//
//===========================================================================================================


#define MVIEW_CYLINDER3D_OPEN 0
#define MVIEW_CYLINDER3D_CLOSESTART 1
#define MVIEW_CYLINDER3D_CLOSEEND 2
#define MVIEW_CYLINDER3D_CLOSEALL 3


//===========================================================================================================
//
// MVIEW_DRAW Definitions
//
// Polygon drawing defines
//
// MVIEW_DRAW_POLYLINE
// Draw Polylines
//
// MVIEW_DRAW_POLYGON
// Draw Polygons
//
//===========================================================================================================


#define MVIEW_DRAW_POLYLINE 0
#define MVIEW_DRAW_POLYGON 1


//===========================================================================================================
//
// MVIEW_DRAWOBJ3D_ENTITY Definitions
//
// What types of entities to draw
//
// MVIEW_DRAWOBJ3D_ENTITY_POINTS
// Draw 3D Points (no normals) [1 verticies per object]
//
// MVIEW_DRAWOBJ3D_ENTITY_LINES
// Draw 3D Lines (no normals) [2 verticies per object]
//
// MVIEW_DRAWOBJ3D_ENTITY_LINE_STRIPS
// Draw 3D Line strip (no normals) [2+x verticies per object]
//
// MVIEW_DRAWOBJ3D_ENTITY_LINE_LOOPS
// Draw 3D Line loop (no normals, closes loop with first point) [2+x verticies per object]
//
// MVIEW_DRAWOBJ3D_ENTITY_TRIANGLES
// Draw 3D Triangles [3 verticies per object]
//
// MVIEW_DRAWOBJ3D_ENTITY_TRIANGLE_STRIPS
// Draw 3D Triangle strips [3+x verticies per object]
//
// MVIEW_DRAWOBJ3D_ENTITY_TRIANGLE_FANS
// Draw 3D Triangle fans [3+x verticies per object]
//
// MVIEW_DRAWOBJ3D_ENTITY_QUADS
// Draw 3D Quads (Must be in the same plane) [4 verticies per object]
//
// MVIEW_DRAWOBJ3D_ENTITY_QUADS_STRIPS
// Draw 3D Quad Strips (Must be in the same plane) [4+2x verticies per object]
//
// MVIEW_DRAWOBJ3D_ENTITY_POLYGONS
// Draw 3D Quad Polygones (Must be in the same plane, must be convex and cannot intersect itself)
//
//===========================================================================================================


#define MVIEW_DRAWOBJ3D_ENTITY_POINTS 0
#define MVIEW_DRAWOBJ3D_ENTITY_LINES 1
#define MVIEW_DRAWOBJ3D_ENTITY_LINE_STRIPS 2
#define MVIEW_DRAWOBJ3D_ENTITY_LINE_LOOPS 3
#define MVIEW_DRAWOBJ3D_ENTITY_TRIANGLES 4
#define MVIEW_DRAWOBJ3D_ENTITY_TRIANGLE_STRIPS 5
#define MVIEW_DRAWOBJ3D_ENTITY_TRIANGLE_FANS 6
#define MVIEW_DRAWOBJ3D_ENTITY_QUADS 7
#define MVIEW_DRAWOBJ3D_ENTITY_QUADS_STRIPS 8
#define MVIEW_DRAWOBJ3D_ENTITY_POLYGONS 9


//===========================================================================================================
//
// MVIEW_DRAWOBJ3D_MODE Definitions
//
// What types of entities to draw
//
// MVIEW_DRAWOBJ3D_MODE_FLAT
// Draw flat shaded faces (one normal and color per object)
//
// MVIEW_DRAWOBJ3D_MODE_SMOOTH
// Draw smooth shaded faces (one normal and color per vertex)
//
//===========================================================================================================


#define MVIEW_DRAWOBJ3D_MODE_FLAT 0
#define MVIEW_DRAWOBJ3D_MODE_SMOOTH 1


//===========================================================================================================
//
// MVIEW_EXTENT Definitions
//
// Types of extents defines
//
// MVIEW_EXTENT_ALL
// All objects
//
// MVIEW_EXTENT_CLIP
// Clipping regions
//
// MVIEW_EXTENT_MAP
// Map extents
//
// MVIEW_EXTENT_VISIBLE
// Visible objects
//
//===========================================================================================================


#define MVIEW_EXTENT_ALL 0
#define MVIEW_EXTENT_CLIP 1
#define MVIEW_EXTENT_MAP 2
#define MVIEW_EXTENT_VISIBLE 3


//===========================================================================================================
//
// MVIEW_FIT Definitions
//
// Fit area defines
//
// MVIEW_FIT_MAP
// Fit it to the map area
//
// MVIEW_FIT_VIEW
// Fit it to the view area
//
//===========================================================================================================


#define MVIEW_FIT_MAP 0
#define MVIEW_FIT_VIEW 1


//===========================================================================================================
//
// MVIEW_FONT_WEIGHT Definitions
//
// Font weight defines
//
// MVIEW_FONT_WEIGHT_NORMAL
// 
//
// MVIEW_FONT_WEIGHT_ULTRALIGHT
// 
//
// MVIEW_FONT_WEIGHT_LIGHT
// 
//
// MVIEW_FONT_WEIGHT_MEDIUM
// 
//
// MVIEW_FONT_WEIGHT_BOLD
// 
//
// MVIEW_FONT_WEIGHT_XBOLD
// 
//
// MVIEW_FONT_WEIGHT_XXBOLD
// 
//
//===========================================================================================================


#define MVIEW_FONT_WEIGHT_NORMAL 0
#define MVIEW_FONT_WEIGHT_ULTRALIGHT 1
#define MVIEW_FONT_WEIGHT_LIGHT 2
#define MVIEW_FONT_WEIGHT_MEDIUM 3
#define MVIEW_FONT_WEIGHT_BOLD 4
#define MVIEW_FONT_WEIGHT_XBOLD 5
#define MVIEW_FONT_WEIGHT_XXBOLD 6


//===========================================================================================================
//
// MVIEW_GRID Definitions
//
// Grid Drawing defines
//
// MVIEW_GRID_DOT
// 
//
// MVIEW_GRID_LINE
// 
//
// MVIEW_GRID_CROSS
// 
//
//===========================================================================================================


#define MVIEW_GRID_DOT 0
#define MVIEW_GRID_LINE 1
#define MVIEW_GRID_CROSS 2


//===========================================================================================================
//
// MVIEW_GROUP Definitions
//
// Open Group defines
//
// MVIEW_GROUP_NEW
// New Group (destroy any existing group)
//
// MVIEW_GROUP_APPEND
// Append to an existing Group
//
//===========================================================================================================


#define MVIEW_GROUP_NEW 1
#define MVIEW_GROUP_APPEND 0


//===========================================================================================================
//
// MVIEW_GROUP_LIST Definitions
//
// What groups to list
//
// MVIEW_GROUP_LIST_ALL
// All the groups.
//
// MVIEW_GROUP_LIST_MARKED
// Those groups marked using the various mark functions.
//
// MVIEW_GROUP_LIST_VISIBLE
// Those groups checked as visible in the view/group manager.
//
//===========================================================================================================


#define MVIEW_GROUP_LIST_ALL 0
#define MVIEW_GROUP_LIST_MARKED 1
#define MVIEW_GROUP_LIST_VISIBLE 2


//===========================================================================================================
//
// MVIEW_HIDE Definitions
//
// Boolean hidding defines
//
// HIDE_ON
// Turn ON hidding
//
// HIDE_OFF
// Turn OFF hidding
//
//===========================================================================================================


#define HIDE_ON 1
#define HIDE_OFF 0


//===========================================================================================================
//
// MVIEW_IS Definitions
//
// Defines for mview types
//
// MVIEW_IS_AGG
// 
//
// MVIEW_IS_MOVABLE
// 
//
// MVIEW_IS_CSYMB
// 
//
// MVIEW_IS_LINKED
// 
//
// MVIEW_IS_MADE
// 
//
// MVIEW_IS_HIDDEN
// 
//
// MVIEW_IS_CLIPPED
// 
//
// MVIEW_IS_META
// 
//
// MVIEW_IS_VOXD
// 
//
// MVIEW_IS_SHADOW_2D_INTERPRETATION
// 
//
// MVIEW_IS_VECTOR3D
// 
//
// MVIEW_IS_GENSURF
// 
//
// MVIEW_IS_VOXSURF
// 
//
// MVIEW_IS_CSYMB3D
// 
//
//===========================================================================================================


#define MVIEW_IS_AGG 0
#define MVIEW_IS_MOVABLE 3
#define MVIEW_IS_CSYMB 4
#define MVIEW_IS_LINKED 5
#define MVIEW_IS_MADE 6
#define MVIEW_IS_HIDDEN 7
#define MVIEW_IS_CLIPPED 8
#define MVIEW_IS_META 9
#define MVIEW_IS_VOXD 10
#define MVIEW_IS_SHADOW_2D_INTERPRETATION 11
#define MVIEW_IS_VECTOR3D 12
#define MVIEW_IS_GENSURF 13
#define MVIEW_IS_VOXSURF 14
#define MVIEW_IS_CSYMB3D 15


//===========================================================================================================
//
// MVIEW_LABEL_BOUND Definitions
//
// Label Binding Defines
//
// MVIEW_LABEL_BOUND_NO
// Label Not Bound
//
// MVIEW_LABEL_BOUND_YES
// Label Bound
//
//===========================================================================================================


#define MVIEW_LABEL_BOUND_NO 0
#define MVIEW_LABEL_BOUND_YES 1


//===========================================================================================================
//
// MVIEW_LABEL_JUST Definitions
//
// Label Justification Defines
//
// MVIEW_LABEL_JUST_TOP
// 
//
// MVIEW_LABEL_JUST_BOTTOM
// 
//
// MVIEW_LABEL_JUST_LEFT
// 
//
// MVIEW_LABEL_JUST_RIGHT
// 
//
//===========================================================================================================


#define MVIEW_LABEL_JUST_TOP 0
#define MVIEW_LABEL_JUST_BOTTOM 1
#define MVIEW_LABEL_JUST_LEFT 2
#define MVIEW_LABEL_JUST_RIGHT 3


//===========================================================================================================
//
// MVIEW_LABEL_ORIENT Definitions
//
// Label Orientation Defines
//
// MVIEW_LABEL_ORIENT_HORIZONTAL
// 
//
// MVIEW_LABEL_ORIENT_TOP_RIGHT
// 
//
// MVIEW_LABEL_ORIENT_TOP_LEFT
// 
//
//===========================================================================================================


#define MVIEW_LABEL_ORIENT_HORIZONTAL 0
#define MVIEW_LABEL_ORIENT_TOP_RIGHT 1
#define MVIEW_LABEL_ORIENT_TOP_LEFT 2


//===========================================================================================================
//
// MVIEW_NAME_LENGTH Definitions
//
// Maximum length for view and group names
//
// MVIEW_NAME_LENGTH
// Maximum Length (1040)
//
//===========================================================================================================


#define MVIEW_NAME_LENGTH 1040


//===========================================================================================================
//
// MVIEW_OPEN Definitions
//
// Open MVIEW define
//
// MVIEW_READ
// Read Only - No changes
//
// MVIEW_WRITENEW
// Create new MVIEW - destroys any existing MVIEW
//
// MVIEW_WRITEOLD
// Open existing MVIEW for read/write (must exist)
//
//===========================================================================================================


#define MVIEW_READ 0
#define MVIEW_WRITENEW 1
#define MVIEW_WRITEOLD 2


//===========================================================================================================
//
// MVIEW_PJ Definitions
//
// Projection modes
//
// MVIEW_PJ_OFF
// No reprojection is used and all locations and
// attributes are assumed to be in the view coordinate
// system.
//
// MVIEW_PJ_LOCATION
// Only locations will be transformed to the view
// coordinate system.
//
// MVIEW_PJ_ALL
// Locations and attributes (sizes, thicknesses, angles)
// will be transformed to the view coordinate system.
//
// MVIEW_PJ_ON
// Mode before the last MVIEW_PJ_OFF.
//
//===========================================================================================================


#define MVIEW_PJ_OFF 0
#define MVIEW_PJ_LOCATION 1
#define MVIEW_PJ_ALL 2
#define MVIEW_PJ_ON 3


//===========================================================================================================
//
// MVIEW_RELOCATE Definitions
//
// Relocation Defines
//
// MVIEW_RELOCATE_FIT
// Will fit the image to fill the specified area
//
// MVIEW_RELOCATE_ASPECT
// Will maintain aspect ratio
//
// MVIEW_RELOCATE_ASPECT_CENTER
// Will maintain aspect ratio and center in specified area
//
//===========================================================================================================


#define MVIEW_RELOCATE_FIT 0
#define MVIEW_RELOCATE_ASPECT 1
#define MVIEW_RELOCATE_ASPECT_CENTER 2


//===========================================================================================================
//
// MVIEW_SMOOTH Definitions
//
// Interpolation method to use for drawing line and polygon edges
//
// MVIEW_SMOOTH_NEAREST
// Nearest neighbour
//
// MVIEW_SMOOTH_CUBIC
// Cubic Spline
//
// MVIEW_SMOOTH_AKIMA
// Akima
//
//===========================================================================================================


#define MVIEW_SMOOTH_NEAREST 0
#define MVIEW_SMOOTH_CUBIC 1
#define MVIEW_SMOOTH_AKIMA 2


//===========================================================================================================
//
// MVIEW_TILE Definitions
//
// Tiling defines
//
// MVIEW_TILE_RECTANGULAR
// 
//
// MVIEW_TILE_DIAGONAL
// 
//
// MVIEW_TILE_TRIANGULAR
// 
//
// MVIEW_TILE_RANDOM
// 
//
//===========================================================================================================


#define MVIEW_TILE_RECTANGULAR 0
#define MVIEW_TILE_DIAGONAL 1
#define MVIEW_TILE_TRIANGULAR 2
#define MVIEW_TILE_RANDOM 3


//===========================================================================================================
//
// MVIEW_UNIT Definitions
//
// Coordinate systems defines
//
// MVIEW_UNIT_VIEW
// View coordinates
//
// MVIEW_UNIT_PLOT
// Plot hi-metric (mm*100) on the map.
//
// MVIEW_UNIT_MM
// Plot mm on the map.
//
// MVIEW_UNIT_VIEW_UNWARPED
// View coordinates without a warp if there is one
//
//===========================================================================================================


#define MVIEW_UNIT_VIEW 0
#define MVIEW_UNIT_PLOT 1
#define MVIEW_UNIT_MM 2
#define MVIEW_UNIT_VIEW_UNWARPED 3


//===========================================================================================================
//
// MVIEW_EXTENT_UNIT Definitions
//
// Types of units for extents (these map to the
// MVIEW_UNIT defines directly)
//
// MVIEW_EXTENT_UNIT_VIEW
// MVIEW_UNIT_VIEW
//
// MVIEW_EXTENT_UNIT_PLOT
// MVIEW_UNIT_PLOT
//
// MVIEW_EXTENT_UNIT_MM
// MVIEW_UNIT_MM
//
// MVIEW_EXTENT_UNIT_VIEW_UNWARPED
// MVIEW_UNIT_VIEW_UNWARPED
//
//===========================================================================================================


#define MVIEW_EXTENT_UNIT_VIEW MVIEW_UNIT_VIEW
#define MVIEW_EXTENT_UNIT_PLOT MVIEW_UNIT_PLOT
#define MVIEW_EXTENT_UNIT_MM MVIEW_UNIT_MM
#define MVIEW_EXTENT_UNIT_VIEW_UNWARPED MVIEW_UNIT_VIEW_UNWARPED


//===========================================================================================================
//
// TEXT_REF Definitions
//
// Text reference locations
//
// TEXT_REF_BOTTOM_LEFT
// 
//
// TEXT_REF_BOTTOM_CENTER
// 
//
// TEXT_REF_BOTTOM_RIGHT
// 
//
// TEXT_REF_MIDDLE_LEFT
// 
//
// TEXT_REF_MIDDLE_CENTER
// 
//
// TEXT_REF_MIDDLE_RIGHT
// 
//
// TEXT_REF_TOP_LEFT
// 
//
// TEXT_REF_TOP_CENTER
// 
//
// TEXT_REF_TOP_RIGHT
// 
//
//===========================================================================================================


#define TEXT_REF_BOTTOM_LEFT 0
#define TEXT_REF_BOTTOM_CENTER 1
#define TEXT_REF_BOTTOM_RIGHT 2
#define TEXT_REF_MIDDLE_LEFT 3
#define TEXT_REF_MIDDLE_CENTER 4
#define TEXT_REF_MIDDLE_RIGHT 5
#define TEXT_REF_TOP_LEFT 6
#define TEXT_REF_TOP_CENTER 7
#define TEXT_REF_TOP_RIGHT 8


//===========================================================================================================
//
// MVIEW_3D_RENDER Definitions
//
// 3D Geometry rendering defines. These flags only affect mixed geometry groups and not the data
// specific groups (e.g. voxels, vector voxels surfaces etc.). Each of those groups 
// has predefined optimum behaviour and any changes to these flags are ignored.
//
// MVIEW_3D_RENDER_BACKFACES
// This flag is enabled if the backfaces of geometry should be rendered
//
// MVIEW_3D_DONT_SCALE_GEOMETRY
// If the exaggeration scales of the 3D view in X, Y and/or Z is set to anything other than 1.0
// any geometric objects (spheres, cubes etc.) for 3D groups with the following flags 
// will render untransformed while only the centers of the objects are changed.
// This ensures the objects appear in the correct place with respect to other data being rendered (and scaled).
//
//===========================================================================================================


#define MVIEW_3D_RENDER_BACKFACES 1
#define MVIEW_3D_DONT_SCALE_GEOMETRY 2





//===========================================================================================================
//
// 3D Entity Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// Box3D_MVIEW Draw a 3D box
//
// Notes       The Fill color is used to color the box.
//
// Available   5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void Box3D_MVIEW(MVIEW,   //
                           real,    // Min X
                           real,    // Min Y
                           real,    // Min Z
                           real,    // Max X
                           real,    // Max Y
                           real);   // Max Z


  
//-----------------------------------------------------------------------------------------------------------
// CRCView_MVIEW Generate an XML CRC of a View
//
// Available     6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void CRCView_MVIEW(MVIEW,     // MAP object
                             var int,   // CRC returned
                             string);   // Name of xml to generate (.zip added)


  
//-----------------------------------------------------------------------------------------------------------
// CRCViewGroup_MVIEW Generate an XML CRC of a Group
//
// Available          6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void CRCViewGroup_MVIEW(MVIEW,     // MAP object
                                  string,    // Name of Group
                                  var int,   // CRC returned
                                  string);   // Name of xml to generate (.zip added)


  
//-----------------------------------------------------------------------------------------------------------
// ViewGroupJSON_MVIEW Generate a JSON representation of a Group.
//
// Available           9.7
//-----------------------------------------------------------------------------------------------------------

[_public] void ViewGroupJSON_MVIEW(MVIEW,    // MAP object
                                   string,   // Name of Group
                                   string);  // Name of JSON file to generate.


  
//-----------------------------------------------------------------------------------------------------------
// Cylinder3D_MVIEW Draw a 3D cylinder
//
// Notes            The Fill color is used to color the cylinder.
//                  The flags determine if the cylinder is open and what
//                  end are closed. Note that you can create cones by
//                  specifying a 0 radius for one of the ends.
//
// Available        5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void Cylinder3D_MVIEW(MVIEW,   //
                                real,    // Start X
                                real,    // Start Y
                                real,    // Start Z
                                real,    // End X
                                real,    // End Y
                                real,    // End Z
                                real,    // Start Radius (can be zero)
                                real,    // End Radius (can be zero)
                                int);    // MVIEW_CYLINDER3D


  
//-----------------------------------------------------------------------------------------------------------
// DrawObject3D_MVIEW Draw a 3D object optimized for rendering
//
// Available          6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void DrawObject3D_MVIEW(MVIEW,   //
                                  int,     // MVIEW_DRAWOBJ3D_ENTITY
                                  int,     // MVIEW_DRAWOBJ3D_MODE
                                  int,     // Number of Objects
                                  int,     // Default Count (if variable and not specified)
                                  VV,      // Verticies X
                                  VV,      // Verticies Y
                                  VV,      // Verticies Z
                                  VV,      // Normals X (can be NULL)
                                  VV,      // Normals Y (can be NULL)
                                  VV,      // Normals Z (can be NULL)
                                  VV,      // Colors VV (can be NULL)
                                  VV,      // Index  VV (can be NULL)
                                  VV);     // Count  VV (can be NULL)


  
//-----------------------------------------------------------------------------------------------------------
// DrawSurface3DEx_MVIEW Draw a 3D object built from triangles
//
// Notes                 Provide one normal per vertex.
//                       Triangles are defined by indices into the set of vertices.
//
// Available             7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DrawSurface3DEx_MVIEW(MVIEW,    //
                                     string,   // Group name
                                     VV,       // Vertices X (GS_REAL)
                                     VV,       // Vertices Y (GS_REAL)
                                     VV,       // Vertices Z (GS_REAL)
                                     VV,       // Normals X (GS_REAL)
                                     VV,       // Normals Y (GS_REAL)
                                     VV,       // Normals Z (GS_REAL)
                                     VV,       // Colors VV (GS_INT) [can be NULL]
                                     int,      // Color used if above VV is NULL [0 for MVIEW's fill color]
                                     VV,       // Triangles Point 1 (GS_INT)
                                     VV,       // Triangles Point 2 (GS_INT)
                                     VV,       // Triangles Point 3 (GS_INT)
                                     IPJ);     // Native IPJ of 3D object


  
//-----------------------------------------------------------------------------------------------------------
// DrawSurface3DFromFile_MVIEW Draw a 3D object from a surface file
//
// Available                   7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DrawSurface3DFromFile_MVIEW(MVIEW,    //
                                           string,   // Group name
                                           string);  // Surface file


  
//-----------------------------------------------------------------------------------------------------------
// FontWeightLST_MVIEW Fill a LST with the different font weights.
//
// Available           5.1
//-----------------------------------------------------------------------------------------------------------

[_public] void FontWeightLST_MVIEW(LST);  // LST object


  
//-----------------------------------------------------------------------------------------------------------
// GetAGGFileNames_MVIEW Get the names of grid files stored in an AGG.
//
// Notes                 The group must be an AGG group. Check this using
//                       iIsGroup_MVIEW and MVIEW_IS_AGG.
//
// Available             5.1.5
//-----------------------------------------------------------------------------------------------------------

[_public] void GetAGGFileNames_MVIEW(MVIEW,    // View
                                     string,   // Group name
                                     VV);      // Returned string VV of type -STR_FILE


  
//-----------------------------------------------------------------------------------------------------------
// IGetMeta_MVIEW Retrieves Metadata from a group
//
// Returns        META Object
//
// Available      5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] META IGetMeta_MVIEW(MVIEW,        // MVIEW object
                              string,       // Group Name
                              var string,   // Meta name
                              int);         // Length of Meta name variable
#define GetMeta_MVIEW(mview, group, meta) IGetMeta_MVIEW(mview, group, meta, sizeof(meta))


  
//-----------------------------------------------------------------------------------------------------------
// MeasureText_MVIEW Compute the bounding rectangle in view units of the text using the current attributes.
//
// Notes             Area will be 0 if error occurred (does not fail).
//                   This will return the bounding rectangle as if the text was placed at 0,0 and adjusted according to
//                   the current text alignment and angle set for the view. Also see notes for TextSize_MVIEW.
//
// Available         6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void MeasureText_MVIEW(MVIEW,      // MVIEW handle
                                 string,     // Text string
                                 var real,   // X minimum
                                 var real,   // Y minimum
                                 var real,   // X maximum
                                 var real);  // Y maximum


  
//-----------------------------------------------------------------------------------------------------------
// Point3D_MVIEW Draw a 3D point.
//
// Notes         The Line color and line thickness will affect rendering.
//
// Available     5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void Point3D_MVIEW(MVIEW,   //
                             real,    // X
                             real,    // Y
                             real);   // Z


  
//-----------------------------------------------------------------------------------------------------------
// PolyLine3D_MVIEW Draw a 3D polyline.
//
// Notes            Dummies are not allowed in the line.
//                  Line Color, Thickness is supported on rendering
//
// Available        5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void PolyLine3D_MVIEW(MVIEW,   //
                                VV,      // X coordinates.
                                VV,      // Y coordinates.
                                VV);     // Z coordinates.


  
//-----------------------------------------------------------------------------------------------------------
// RelocateGroup_MVIEW Re-locate a group in a view.
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void RelocateGroup_MVIEW(MVIEW,    // View
                                   string,   // Group name
                                   real,     // Area X minimum
                                   real,     // Area Y minimum
                                   real,     // Area X maximum
                                   real,     // Area Y maximum
                                   int);     // MVIEW_RELOCATE


  
//-----------------------------------------------------------------------------------------------------------
// SetMeta_MVIEW Update the META in this group with the new meta object.
//
// Available     5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void SetMeta_MVIEW(MVIEW,    // MVIEW object
                             string,   // Group Name
                             META,     // META object
                             string);  // Meta name of Object


  
//-----------------------------------------------------------------------------------------------------------
// Sphere3D_MVIEW Draw a 3D sphere
//
// Notes          The Fill color is used to color the sphere.
//
// Available      5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void Sphere3D_MVIEW(MVIEW,   //
                              real,    // Center X
                              real,    // Center Y
                              real,    // Center Z
                              real);   // Radius


  
//-----------------------------------------------------------------------------------------------------------
// UpdateMETAfromGroup_MVIEW Fill the META with group dataset information
//
// Available                 5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void UpdateMETAfromGroup_MVIEW(MVIEW,    // MVIEW object
                                         string,   // Group Name
                                         META);    // META object to fill



//===========================================================================================================
//
// 3D Plane Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// DeletePlane_MVIEW Delete a plane in a view
//
// Notes             If the groups on the plane are not deleted, they will remain in the
//                   3D view as "New" groups but will be unassigned to a plane.  The
//                   SetAllNewGroupsToPlane  function can be used to assign these groups
//                   to a different plane.
//
// Available         5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void DeletePlane_MVIEW(MVIEW,   // MVIEW object
                                 int,     // Plane number to delete
                                 int);    // TRUE to delete all groups on the plane


  
//-----------------------------------------------------------------------------------------------------------
// GetPlaneClipPLY_MVIEW Get the Plane Clip Region
//
// Notes                 By default it is the View's Clip Region
//
// Available             6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetPlaneClipPLY_MVIEW(MVIEW,   // MVIEW object
                                     int,     // Plane index
                                     PLY);    // Clip Region


  
//-----------------------------------------------------------------------------------------------------------
// GetPlaneEquation_MVIEW Get the equation of a plane
//
// Available              5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void GetPlaneEquation_MVIEW(MVIEW,      // MVIEW object
                                      int,        // Plane index
                                      var real,   // Rotation about X (Y toward Z +ve, between -360 and 360)
                                      var real,   // Rotation about Y (Z toward X +ve, between -360 and 360)
                                      var real,   // Rotation about Z (Y toward X +ve, between -360 and 360)
                                      var real,   // X offset of plane
                                      var real,   // Y offset of plane
                                      var real,   // Z offset of plane
                                      var real,   // X scale
                                      var real,   // Y scale
                                      var real);  // Z scale


  
//-----------------------------------------------------------------------------------------------------------
// GetViewPlaneEquation_MVIEW Get the View's Plane Equation
//
// Available                  5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void GetViewPlaneEquation_MVIEW(MVIEW,      // View
                                          var real,   // Angle in X
                                          var real,   // Angle in Y
                                          var real,   // Angle in Z
                                          var real,   // Offset in X
                                          var real,   // Offset in Y
                                          var real,   // Offset in Z
                                          var real,   // Scale in X
                                          var real,   // Scale in Y
                                          var real);  // Scale in Z


  
//-----------------------------------------------------------------------------------------------------------
// iCreatePlane_MVIEW Create a 3D Plane for 2D Groups
//
// Returns            x - Index of plane
//
// Available          5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iCreatePlane_MVIEW(MVIEW,    // MVIEW object
                                 string);  // Name of Plane


  
//-----------------------------------------------------------------------------------------------------------
// iFindPlane_MVIEW Find a plane in a view
//
// Returns          Plane number, -1 if not found
//
// Available        5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iFindPlane_MVIEW(MVIEW,    // MVIEW object
                               string);  // Name of the plane


  
//-----------------------------------------------------------------------------------------------------------
// iIsSurfacePlane_MVIEW Is a surface plane?
//
// Available             9.7
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsSurfacePlane_MVIEW(MVIEW,    // MVIEW object
                                    string);  // Name of the plane


  
//-----------------------------------------------------------------------------------------------------------
// iIsPlaneVisible_MVIEW Is the plane visible?
//
// Available             9.7
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsPlaneVisible_MVIEW(MVIEW,    // MVIEW object
                                    string);  // Name of the plane


  
//-----------------------------------------------------------------------------------------------------------
// IGetDefPlane_MVIEW Get the default drawing plane.
//
// Notes              2D drawing to a 3D View will always be placed on the
//                    default drawing plane.  If no default drawing plane
//                    has been set, the first valid plane in the view is
//                    used as the default drawing plane.
//
// Available          5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetDefPlane_MVIEW(MVIEW,        // MVIEW handle
                                  var string,   // Name
                                  int);         // Maximum name length
#define GetDefPlane_MVIEW(mview, name) IGetDefPlane_MVIEW(mview, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// iIsView3D_MVIEW Is the view 3D?
//
// Returns         TRUE if view is 3D
//
// Available       5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsView3D_MVIEW(MVIEW);  // MVIEW object


  
//-----------------------------------------------------------------------------------------------------------
// iIsSection_MVIEW Is the view a section view?
//
// Returns          TRUE if view is a section view.
//
// Notes            Section views are recognized because their projection contains one of the following orientations:
//                  
//                  IPJ_ORIENT_SECTION - Target-type sections with Z projection horizontally
//                  IPJ_ORIENT_SECTION_NORMAL - Like IPJ_ORIENT_SECTION, but Z projects
//                  perpendicular to the secton plane.
//                  IPJ_ORIENT_SECTION_CROOKED - Crooked sections
//                  IPJ_ORIENT_3D - Some Sections extracted from a voxel - e.g. VoxelToGrids,
//                  as the voxel can have any orientation in 3D.
//
// Available        8.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsSection_MVIEW(MVIEW);  // MVIEW object


  
//-----------------------------------------------------------------------------------------------------------
// ListPlaneGroups_MVIEW List all groups in a specific plane of a 3D view
//
// Notes                 The group names are placed in the list names, group
//                       numbers are placed in the list values.
//                       
//                       Groups are added to the end of the LST.
//
// Available             5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ListPlaneGroups_MVIEW(MVIEW,   // MVIEW object
                                     int,     // Plane number
                                     LST);    // List of plane names and numbers


  
//-----------------------------------------------------------------------------------------------------------
// ListPlanes_MVIEW List all planes in a 3D view
//
// Notes            The plane names are placed in the list names, plane
//                  numbers are placed in the list values.
//                  
//                  Planes are added to the end of the LST.
//
// Available        5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ListPlanes_MVIEW(MVIEW,   // MVIEW object
                                LST);    // List of plane names and numbers


  
//-----------------------------------------------------------------------------------------------------------
// SetAllGroupsToPlane_MVIEW Set all groups to be within one plane
//
// Available                 5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetAllGroupsToPlane_MVIEW(MVIEW,   // MVIEW object
                                         int);    // Plane Index to set all groups to


  
//-----------------------------------------------------------------------------------------------------------
// SetAllNewGroupsToPlane_MVIEW Set all groups that are not in any plane to this plane
//
// Available                    5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetAllNewGroupsToPlane_MVIEW(MVIEW,   // MVIEW object
                                            int);    // Plane Index to set all groups to


  
//-----------------------------------------------------------------------------------------------------------
// SetDefPlane_MVIEW Set the default drawing plane.
//
// Notes             2D drawing to a 3D View will always be placed on the
//                   default drawing plane.  If no default drawing plane
//                   has been set, the first valid plane in the view is
//                   used as the default drawing plane.
//
// Available         5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetDefPlane_MVIEW(MVIEW,    // MVIEW handle
                                 string);  // Name


  
//-----------------------------------------------------------------------------------------------------------
// SetGroupToPlane_MVIEW Set a group to a plane
//
// Available             5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetGroupToPlane_MVIEW(MVIEW,    // MVIEW object
                                     int,      // Plane Index to set all groups to
                                     string);  // Name of group to set


  
//-----------------------------------------------------------------------------------------------------------
// SetH3DN_MVIEW Set the 3DN object for this view
//
// Notes         To make the view a 2D view, set a 3DN of NULL.
//
// Available     5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetH3DN_MVIEW(MVIEW,   // MVIEW object
                             H3DN);   // 3DN to set (NULL for 2D view)


  
//-----------------------------------------------------------------------------------------------------------
// Get3DPointOfView_MVIEW Get 3D point of view (values are will be rDUMMY if view for 2D views)
//
// Available              9.2
//-----------------------------------------------------------------------------------------------------------

[_public] void Get3DPointOfView_MVIEW(MVIEW,      // MVIEW Handle
                                      var real,   // X center
                                      var real,   // Y center
                                      var real,   // Z center
                                      var real,   // Distance from center
                                      var real,   // Declination, 0 to 360 CW from Y
                                      var real);  // Inclination, -90 to +90


  
//-----------------------------------------------------------------------------------------------------------
// Set3DPointOfView_MVIEW Set 3D point of view (no effect on 2D views)
//
// Available              9.2
//-----------------------------------------------------------------------------------------------------------

[_public] void Set3DPointOfView_MVIEW(MVIEW,   // MVIEW Handle
                                      real,    // X center
                                      real,    // Y center
                                      real,    // Z center
                                      real,    // Distance from center
                                      real,    // Declination, 0 to 360 CW from Y
                                      real);   // Inclination, -90 to +90


  
//-----------------------------------------------------------------------------------------------------------
// SetPlaneClipPLY_MVIEW Set the Plane Clip Region
//
// Notes                 By default it is the View's Clip Region
//
// Available             5.1.4
//-----------------------------------------------------------------------------------------------------------

[_public] void SetPlaneClipPLY_MVIEW(MVIEW,   // MVIEW object
                                     int,     // Plane index
                                     PLY);    // Clip Region


  
//-----------------------------------------------------------------------------------------------------------
// SetPlaneEquation_MVIEW Set the equation of a plane
//
// Notes                  For a grid with the "Y" axis giving elevation:
//                        use rotations = (-90, 0, 0) for a section with azimuth 90 (E-W)
//                        use rotations = (-90, 0, -90) for a section with azimuth 0 (N-S)
//
// Available              5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetPlaneEquation_MVIEW(MVIEW,   // MVIEW object
                                      int,     // Plane index
                                      real,    // Rotation about X (Z toward Y +ve, between -360 and 360)
                                      real,    // Rotation about Y (Z toward X +ve, between -360 and 360)
                                      real,    // Rotation about Z (Y toward X +ve, between -360 and 360)
                                      real,    // X offset of plane
                                      real,    // Y offset of plane
                                      real,    // Z offset of plane
                                      real,    // X scale
                                      real,    // Y scale
                                      real);   // Z scale


  
//-----------------------------------------------------------------------------------------------------------
// SetPlaneSurface_MVIEW Set the surface image of a plane
//
// Available             5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetPlaneSurface_MVIEW(MVIEW,    // MVIEW object
                                     int,      // Plane index
                                     string);  // Optional surface image/grid name, can be empty


  
//-----------------------------------------------------------------------------------------------------------
// GetPlaneSurface_MVIEW Get the surface image of a plane
//
// Available             9.9
//-----------------------------------------------------------------------------------------------------------

[_public] void GetPlaneSurface_MVIEW(MVIEW,        // MVIEW object
                                     int,          // Plane index
                                     var string,   // Optional surface image/grid name, can be empty
                                     int);         // Size of surface image/grid name buffer.
#define _GetPlaneSurface_MVIEW(mview, plane, surface) GetPlaneSurface_MVIEW(mview, plane, surface, sizeof(surface))


  
//-----------------------------------------------------------------------------------------------------------
// SetPlaneSurfInfo_MVIEW Set the surface information
//
// Available              5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetPlaneSurfInfo_MVIEW(MVIEW,   // MVIEW object
                                      int,     // Plane index
                                      int,     // Sample rate (>=1)
                                      real,    // Base
                                      real,    // Scale
                                      real,    // Min
                                      real);   // Max


  
//-----------------------------------------------------------------------------------------------------------
// GetPlaneSurfInfo_MVIEW Get the surface information
//
// Available              9.9
//-----------------------------------------------------------------------------------------------------------

[_public] void GetPlaneSurfInfo_MVIEW(MVIEW,      // MVIEW object
                                      int,        // Plane index
                                      var int,    // Sample rate (>=1)
                                      var real,   // Base
                                      var real,   // Scale
                                      var real,   // Min
                                      var real);  // Max



//===========================================================================================================
//
// 3D Rendering 2D Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// DefinePlane3D_MVIEW Define a 2D drawing plane based on point and normal
//
// Notes               2D rendering commands are translated to 3D commands
//                     based on the plane.
//
// Available           5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void DefinePlane3D_MVIEW(MVIEW,   //
                                   real,    // Center point X
                                   real,    // Center point Y
                                   real,    // Center point Z
                                   real,    // X Vector X
                                   real,    // X Vector Y
                                   real,    // X Vector Z
                                   real,    // Y Vector X
                                   real,    // Y Vector Y
                                   real);   // Y Vector Z


  
//-----------------------------------------------------------------------------------------------------------
// DefineViewerAxis3D_MVIEW Define a 2D drawing plane based on the user's view that
//                          oriented around the vector.
//
// Available                5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void DefineViewerAxis3D_MVIEW(MVIEW,   //
                                        real,    // Center point X
                                        real,    // Center point Y
                                        real,    // Center point Z
                                        real,    // Directional Point X
                                        real,    // Directional Point Y
                                        real);   // Directional Point Z


  
//-----------------------------------------------------------------------------------------------------------
// DefineViewerPlane3D_MVIEW Define a 2D drawing plane based on the user's view.
//
// Notes                     The plane is always facing the viewer. Otherwise the
//                           this is identical to the previous
//
// Available                 5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void DefineViewerPlane3D_MVIEW(MVIEW,   //
                                         real,    // Center point X
                                         real,    // Center point Y
                                         real);   // Center point Z



//===========================================================================================================
//
// 3D Snapshots Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// Get3DSnapshots_MVIEW Get the list of 3D snapshots in a 3D view.
//
// Returns              LST object
//
// Notes                Returns name/guid pairs.
//
// Available            9.9
//-----------------------------------------------------------------------------------------------------------

[_public] LST Get3DSnapshots_MVIEW(MVIEW);  // View


  
//-----------------------------------------------------------------------------------------------------------
// Restore3DSnapshot_MVIEW Restore 3D view to specific snapshot state.
//
// Available               9.9
//-----------------------------------------------------------------------------------------------------------

[_public] void Restore3DSnapshot_MVIEW(MVIEW,    // View
                                       string);  // Snapshot GUID


  
//-----------------------------------------------------------------------------------------------------------
// Capture3DSnapshot_MVIEW Capture current 3D view state to a snapshot.
//
// Available               9.9
//-----------------------------------------------------------------------------------------------------------

[_public] void Capture3DSnapshot_MVIEW(MVIEW,        // View
                                       string,       // Snapshot name
                                       string,       // Snapshot description
                                       int,          // Is this a light weight snapshot, i.e. just captures view orientation and type and not group visibility/clipping etc.
                                       var string,   // Snapshot GUID
                                       int);         // Size of GUID buffer.
#define _Capture3DSnapshot_MVIEW(mview, name, description, light_weight, guid) Capture3DSnapshot_MVIEW(mview, name, description, light_weight, guid, sizeof(guid))



//===========================================================================================================
//
// Clipping Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// _ClipPolyEx_MVIEW Add a polygon to the clip region.
//
// Notes             The polygon will be added to the current clip region.
//                   The VV's cannot have any dummy elements.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void _ClipPolyEx_MVIEW(MVIEW,   // MVIEW handle
                                 VV,      // X VV
                                 VV,      // Y VV
                                 int,     // MVIEW_UNIT
                                 int);    // Exclude
#define ClipPolyEx_MVIEW _ClipPolyEx_MVIEW


  
//-----------------------------------------------------------------------------------------------------------
// _ClipRectEx_MVIEW Add a rectangle to the clip region.
//
// Notes             The rectangle will be added to the current clip region.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void _ClipRectEx_MVIEW(MVIEW,   // MVIEW handle
                                 real,    // X minimum
                                 real,    // Y minimum
                                 real,    // X maximum
                                 real,    // Y maximum
                                 int,     // MVIEW_UNIT
                                 int);    // Exclude
#define ClipRectEx_MVIEW _ClipRectEx_MVIEW


  
//-----------------------------------------------------------------------------------------------------------
// ClipClear_MVIEW Remove/clear the view clip region.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ClipClear_MVIEW(MVIEW);  // MVIEW handle


  
//-----------------------------------------------------------------------------------------------------------
// ClipGroups_MVIEW Set the Clipping mode on/off for all groups.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ClipGroups_MVIEW(MVIEW,   // MVIEW handle
                                int);    // MVIEW_CLIP


  
//-----------------------------------------------------------------------------------------------------------
// ClipMarkedGroups_MVIEW Set the Clipping mode on/off for marked groups.
//
// Available              5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ClipMarkedGroups_MVIEW(MVIEW,   // MVIEW handle
                                      int);    // MVIEW_CLIP


  
//-----------------------------------------------------------------------------------------------------------
// ClipPoly_MVIEW Add a polygon to the clip region.
//
// Notes          The polygon will be added to the current clip region.
//                The VV's cannot have any dummy elements.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ClipPoly_MVIEW(MVIEW,   // MVIEW handle
                              VV,      // X VV
                              VV,      // Y VV
                              int);    // MVIEW_UNIT


  
//-----------------------------------------------------------------------------------------------------------
// ClipRect_MVIEW Add a rectangle to the clip region.
//
// Notes          The rectangle will be added to the current clip region.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ClipRect_MVIEW(MVIEW,   // MVIEW handle
                              real,    // X minimum
                              real,    // Y minimum
                              real,    // X maximum
                              real,    // Y maximum
                              int);    // MVIEW_UNIT


  
//-----------------------------------------------------------------------------------------------------------
// DeleteExtClipPLY_MVIEW Deletes an extended clip PLY object used by this view.
//
// Available              6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DeleteExtClipPLY_MVIEW(MVIEW,   // MVIEW object
                                      int);    // Extended ClipPLY number


  
//-----------------------------------------------------------------------------------------------------------
// ExtClipPLYList_MVIEW Get the names of existing extended clip PLY objects in this view as list.
//
// Available            6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ExtClipPLYList_MVIEW(MVIEW,   // MVIEW object
                                    LST);    //


  
//-----------------------------------------------------------------------------------------------------------
// GetClipPLY_MVIEW Get clipping polygons, in the user projection
//
// Notes            The returned PLY is recast into the User projection.
//                  For oriented views (especially sections), use
//                  GetPLY_MVIEW, which returns the Clip PLY in the view's native
//                  projection (e.g. the one set using SetIPJ_MVIEW).
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetClipPLY_MVIEW(MVIEW,   // MVIEW handle
                                PLY);    // Poly


  
//-----------------------------------------------------------------------------------------------------------
// GetExtClipPLY_MVIEW Get an extended clip PLY object used by this view.
//
// Available           6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetExtClipPLY_MVIEW(MVIEW,   // MVIEW object
                                   int,     // Extended ClipPLY number
                                   PLY);    // PLY object to get


  
//-----------------------------------------------------------------------------------------------------------
// GetGroupExtClipPLY_MVIEW Gets extended clip information for group in view.
//
// Available                6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetGroupExtClipPLY_MVIEW(MVIEW,     // MVIEW object
                                        string,    // Group Name
                                        var int);  // Extended PLY number (returned, -1 if not set)


  
//-----------------------------------------------------------------------------------------------------------
// GetPLY_MVIEW Get clipping polygons, in the base projection
//
// Notes        This should be used to get the clipping polygon for
//              oriented views (especially sections).
//
// Available    6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetPLY_MVIEW(MVIEW,   // MVIEW handle
                            PLY);    // Poly


  
//-----------------------------------------------------------------------------------------------------------
// GroupClipMode_MVIEW Set the Clipping mode on or off for new groups.
//
// Notes               All new groups will be clipped.
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GroupClipMode_MVIEW(MVIEW,   // MVIEW handle
                                   int);    // MVIEW_CLIP


  
//-----------------------------------------------------------------------------------------------------------
// IGetNameExtClipPLY_MVIEW Get the name of the extended clip PLY object in this view.
//
// Available                6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetNameExtClipPLY_MVIEW(MVIEW,        // MVIEW object
                                        int,          // Extended ClipPLY number
                                        var string,   // Name
                                        int);         // Length of Name variable
#define GetNameExtClipPLY_MVIEW(mview, ext_ply, name) IGetNameExtClipPLY_MVIEW(mview, ext_ply, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// iNumExtClipPLY_MVIEW Get the number of extended clip PLY objects in this view.
//
// Returns              Number of PLYs
//
// Available            6.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iNumExtClipPLY_MVIEW(MVIEW);  // MVIEW object


  
//-----------------------------------------------------------------------------------------------------------
// iSetExtClipPLY_MVIEW Set an extended clip PLY object used by this view.
//
// Returns              Index of new or changed PLY, -1 on error
//
// Available            6.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iSetExtClipPLY_MVIEW(MVIEW,    // MVIEW object
                                   int,      // Extended ClipPLY number, If greater or equal to the return value of iNumExtClipPLY_MVIEW it will be added to the end of the current list
                                   string,   // Name (Has to be unique, otherwise error will be returned)
                                   PLY);     // PLY object to set, use a null PLY to rename an existing object


  
//-----------------------------------------------------------------------------------------------------------
// SetClipPLY_MVIEW Set clipping region to a PLY
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetClipPLY_MVIEW(MVIEW,   // MVIEW handle
                                PLY);    // Poly


  
//-----------------------------------------------------------------------------------------------------------
// SetGroupExtClipPLY_MVIEW Sets extended clip information for group in view.
//
// Available                6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetGroupExtClipPLY_MVIEW(MVIEW,    // MVIEW object
                                        string,   // Group Name
                                        int);     // Extended PLY number (-1 to clear)



//===========================================================================================================
//
// Color Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// Color2RGB_MVIEW Convert to RGB values.
//
// Notes           Color component intensities will be in the range 0-255.
//
// See also        iColor_MVIEW
//
// Available       6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void Color2RGB_MVIEW(int,       // Color value
                               var int,   // Red
                               var int,   // Green
                               var int);  // Blue


  
//-----------------------------------------------------------------------------------------------------------
// ColorDescr_MVIEW Convert a color to a color string label
//
// Notes            See iColor_MVIEW.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ColorDescr_MVIEW(int,          // COL_ANY variable
                                var string,   // Color descriptor returned
                                int);         // Length of the string
#define _ColorDescr_MVIEW(color, color_descr) ColorDescr_MVIEW(color, color_descr, sizeof(color_descr))


  
//-----------------------------------------------------------------------------------------------------------
// iColor_MVIEW Get a color from a color string label
//
// Returns      Color int
//
// Notes        Color strings may be "R","G","B","C","M","Y",
//              "H","S","V", or "K" or a combination of these
//              characters, each followed by up to three digits
//              specifying a number between 0 and 255.
//              An empty string produce C_ANY_NONE.
//              
//              You must stay in the same color model, RGB, CMY,
//              HSV or K.
//              
//              For example "R", "R127G22", "H255S127V32"
//              
//              Characters are not case sensitive.
//
// See also     iColorXXX_MVIEW macros
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iColor_MVIEW(string);  // Color name string


  
//-----------------------------------------------------------------------------------------------------------
// iColorCMY_MVIEW Return CMY color.
//
// Returns         Color int based on color model.
//
// Notes           Color component intensities must be in the range 0-255.
//
// See also        iColor_MVIEW
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iColorCMY_MVIEW(int,   // Cyan
                              int,   // Magenta
                              int);  // Yellow


  
//-----------------------------------------------------------------------------------------------------------
// iColorHSV_MVIEW Return HSV color.
//
// Returns         Color int based on color model.
//
// Notes           Color component intensities must be in the range 0-255.
//
// See also        iColor_MVIEW
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iColorHSV_MVIEW(int,   // Hue
                              int,   // Saturation
                              int);  // Color


  
//-----------------------------------------------------------------------------------------------------------
// iColorRGB_MVIEW Return RGB color.
//
// Returns         Color int based on color model.
//
// Notes           Color component intensities must be in the range 0-255.
//
// See also        iColor_MVIEW
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iColorRGB_MVIEW(int,   // Red
                              int,   // Green
                              int);  // Blue



//===========================================================================================================
//
// Drawing Attribute Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// ClipMode_MVIEW Set the view clipping mode on or off.
//
// Notes          Entitles that follow in this group will be clipped
//                or not clipped depending on this mode.
//                
//                The montaj editor cannot change the clip mode of
//                embedded clipped/unclipped enties that are controlled
//                by this call.  Use the Group clipping functions
//                instead.
//                
//                It is highly recommended that you use the GroupClipMode_MVIEW
//                function to control clipping on a group-by-group basis, instead
//                of using ClipMode_MVIEW when inside a group, as it is impossible
//                to determine the  true visible extents of a group. In such cases, the
//                "zoom to full map extents" command may give incorrect results.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ClipMode_MVIEW(MVIEW,   // MVIEW handle
                              int);    // MVIEW_CLIP


  
//-----------------------------------------------------------------------------------------------------------
// FillColor_MVIEW Set the fill color.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void FillColor_MVIEW(MVIEW,   // MVIEW handle
                               int);    // Color


  
//-----------------------------------------------------------------------------------------------------------
// LineColor_MVIEW Set the line color.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LineColor_MVIEW(MVIEW,   // MVIEW handle
                               int);    // Color


  
//-----------------------------------------------------------------------------------------------------------
// LineSmooth_MVIEW Set the line edge smoothing.
//
// Available        6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void LineSmooth_MVIEW(MVIEW,   //
                                int);    // MVIEW_SMOOTH


  
//-----------------------------------------------------------------------------------------------------------
// LineStyle_MVIEW Set the style of a line.
//
// Notes           Line styles are selected by ordinal value (line style #)
//                 from those defined in default.lpt.  If default.lpt does
//                 not have a the style specified, the file user.lpt is
//                 searched.  If this file does not contain the line style
//                 solid is assumed.
//                 
//                 Note that line styles from default.lpt and user.lpt are
//                 read into the map at the time the map is created, not
//                 at display time.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LineStyle_MVIEW(MVIEW,   //
                               int,     // Line Style #, see default.lpt
                               real);   // Pitch in view units


  
//-----------------------------------------------------------------------------------------------------------
// LineThick_MVIEW Set the line thickness.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LineThick_MVIEW(MVIEW,   // MVIEW handle
                               real);   // Line thickness in view space units


  
//-----------------------------------------------------------------------------------------------------------
// PatAngle_MVIEW Sets the pattern angle
//
// Notes          Allows the user to apply a rotation to the basic
//                pattern. Care should be taken to ensure that the
//                tiling remains continuous; i.e. if the pattern
//                consists of horizontal lines, only angles of
//                -90, 0, 90, 180 (etc.) would give seamless tiling.
//                However, simple, closed figure, such as a star,
//                could be given any angle.
//                Rotations about the center point (0.5, 0.5) of the
//                unit cell are performed prior to applying PatSize.
//                The default value is 0.0.
//                Setting an angle of -999 inititates the random angle
//                feature, and each pattern tile is rotated to a different
//                angle. Using this along with PatStyle(View, MVIEW_TILE_RANDOM)
//                can give a "hand-drawn" effect to geological fills.
//                
//                See the IMPORTANT note for sPatNumber_MVIEW().
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void PatAngle_MVIEW(MVIEW,   //
                              real);   // Angle


  
//-----------------------------------------------------------------------------------------------------------
// PatDensity_MVIEW Sets the tiling density.
//
// Notes            This number is the ratio between the plotted unit cell size and the
//                  distance between the plotted tile centers. The default value is 1.
//                  A value larger than 1 increases the density of the pattern, while
//                  values less than 1 make the pattern more "spread out".
//                  This can be used along with sPatStyleMethod to create more complicated
//                  fills from simple patterns.
//                  
//                  See the IMPORTANT note for sPatNumber_MVIEW().
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void PatDensity_MVIEW(MVIEW,   //
                                real);   // Relative density (default = 1).


  
//-----------------------------------------------------------------------------------------------------------
// PatNumber_MVIEW Sets the pattern number
//
// Notes           Pattern 0 is solid fill.(default)
//                 Set the pattern color using FillColor_MVIEW.
//                 
//                 Patterns are selected by ordinal value (pattern number)
//                 from those defined in default.pat.  If default.pat does
//                 not have a the pattern specified, the file user.pat is
//                 searched.  If this file does not contain the pattern
//                 solid is assumed.
//                 
//                 Note that patterns from default.pat and user.pat are
//                 read into the map at the time the map is created, not
//                 at display time.
//                 
//                 IMPORTANT: A call to this function resets all the various
//                 pattern attributes to those defined for the selected pattern.
//                 If you want to modify any attributes, call that function (e.g.
//                 sPatSize_MVIEW(), AFTER you call sPatNumber_MVIEW().
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void PatNumber_MVIEW(MVIEW,   //
                               int);    // Pattern number


  
//-----------------------------------------------------------------------------------------------------------
// PatSize_MVIEW Sets the pattern unit cell size (X)
//
// Notes         See the IMPORTANT note for sPatNumber_MVIEW().
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void PatSize_MVIEW(MVIEW,   //
                             real);   // Pattern size in view units


  
//-----------------------------------------------------------------------------------------------------------
// PatStyle_MVIEW Sets the tiling method (i.e. rectangle, triangle)
//
// Notes          Normally, the unit cell is duplicated across the fill area
//                like floor tiles (MVIEW_TILE_RECTANGULAR).
//                DIAGONAL tiling rotates the tiling positions (but not the tiles)
//                by 45 degrees.
//                TRIANGULAR tiling
//                Offsets each succeeding row by half the unit cell size, and
//                lessens the vertical offset, so that the unit cell centers
//                form a triangular grid pattern.
//                RANDOM tiling adds small random offsets in both directions to give
//                the diffuse effect seen on many geological maps.
//                
//                NOTE: Some patterns are designed to be interlocking and may only
//                work "correctly" with one tiling method.
//                
//                See the IMPORTANT note for sPatNumber_MVIEW().
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void PatStyle_MVIEW(MVIEW,   //
                              int);    // MVIEW_TILE


  
//-----------------------------------------------------------------------------------------------------------
// PatThick_MVIEW Sets the pattern line thickness
//
// Notes          See the IMPORTANT note for sPatNumber_MVIEW().
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void PatThick_MVIEW(MVIEW,   //
                              real);   // Line thickness as fraction of pattern size (ie. 0.05)


  
//-----------------------------------------------------------------------------------------------------------
// SymbAngle_MVIEW Set the Symb angle.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SymbAngle_MVIEW(MVIEW,   // MVIEW handle
                               real);   // Angle in degrees CCW from +X


  
//-----------------------------------------------------------------------------------------------------------
// SymbColor_MVIEW Set the Symbol color.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SymbColor_MVIEW(MVIEW,   // MVIEW handle
                               int);    // Color


  
//-----------------------------------------------------------------------------------------------------------
// SymbFillColor_MVIEW Set the Symbol color fill.
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SymbFillColor_MVIEW(MVIEW,   // MVIEW handle
                                   int);    // Color


  
//-----------------------------------------------------------------------------------------------------------
// SymbFont_MVIEW Set the symbol font and style.
//
// Notes          If the font cannot be found, the DEFAULT_SYMBOL_FONT
//                specified in the [MONTAJ] section of GEOSOFT.INI
//                will be used.
//                
//                See TextFont_MVIEW for the font name syntax.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SymbFont_MVIEW(MVIEW,    // MVIEW handle
                              string,   // Face name
                              int,      // Geosoft font?
                              int,      // MVIEW_FONT_WEIGHT
                              int);     // Italic font?


  
//-----------------------------------------------------------------------------------------------------------
// SymbNumber_MVIEW Set the Symbol number.
//
// Notes            The lower 16 bits of the number is interpreted as UTF-16 with a valid Unicode character
//                  code point. GFN fonts wil produce valid symbols depending on the font for 0x01-0x7f and the degree,
//                  plus-minus and diameter symbol(latin small letter o with stroke) for 0xB0, 0xB1 and 0xF8 respectively.
//                  
//                  It is possible to check if a character is valid using iIsValidUTF16Char_UNC. The high 16-bits are reserved
//                  for future use. Also see: iValidSymbol_UNC and ValidateSymbols_UNC.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SymbNumber_MVIEW(MVIEW,   // MVIEW handle
                                int);    // Symbol number


  
//-----------------------------------------------------------------------------------------------------------
// SymbSize_MVIEW Set the Symb size.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SymbSize_MVIEW(MVIEW,   // MVIEW handle
                              real);   // Size in view units


  
//-----------------------------------------------------------------------------------------------------------
// TextAngle_MVIEW Set the text angle.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void TextAngle_MVIEW(MVIEW,   // MVIEW handle
                               real);   // Angle in degrees CCW from +X


  
//-----------------------------------------------------------------------------------------------------------
// TextColor_MVIEW Set the Text color.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void TextColor_MVIEW(MVIEW,   // MVIEW handle
                               int);    // Color


  
//-----------------------------------------------------------------------------------------------------------
// TextFont_MVIEW Set the text font.
//
// Notes          Font characteristics can be defined using the function parameters,
//                or may be defined as decorations in the font name.  A decorated font
//                name has the following format:
//                
//                font_name(type,weight,italics,charset)
//                
//                where
//                type     - "TT" or "GFN"
//                weight   - last word from MVIEW_FONT_WEIGHT_ (ie. "LIGHT")
//                italics  - "ITALICS" for for italics
//                charset  - Before version 6.2. this decoration was honoured and it affected the display
//                of characters above ASCII 127. 6.2. introduced Unicode in the core
//                montaj engine that eliminated the need for such a setting. All strings
//                on the GX API level are encoded in UTF8 during runtime which makes it possible
//                to represent all possible characters without using character sets. This decoration
//                will now be ignored.
//                
//                Qualifiers take precidence over passed parameters.
//                The order of qualifiers is not relevant.
//                
//                examples:
//                
//                "sr(GFN,ITALICS)"  - geosoft GFN font, normal weight, italics
//                "Arial(TT,XBOLD)"  - TrueType font, bold
//                "Times(TT,ITALICS,_EastEurope)"
//                - TrueType font, italics, Eastern Europe charcters
//                
//                Decorated name qualifiers take precedence over passed parameters.
//                
//                If the font cannot be found, or if "Default" is used, the DEFAULT_MAP_FONT
//                specified in the [MONTAJ] section of GEOSOFT.INI
//                will be used.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void TextFont_MVIEW(MVIEW,    // MVIEW handle
                              string,   // Font face name
                              int,      // Geosoft font? (TRUE or FALSE)
                              int,      // MVIEW_FONT_WEIGHT
                              int);     // Italic font? (TRUE or FALSE)


  
//-----------------------------------------------------------------------------------------------------------
// TextRef_MVIEW Set the text plot reference point.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void TextRef_MVIEW(MVIEW,   // MVIEW handle
                             int);    // TEXT_REF


  
//-----------------------------------------------------------------------------------------------------------
// TextSize_MVIEW Set the text size.
//
// Notes          Because views may have differing X and Y scales this size can only make sense in one of these directions
//                otherwise text would appear warped on these kinds of views. The X direction was chosen to represent the
//                font size. For instance if the X scale is 1 unit/mm and my Y scale is 2 units/mm a font size of 3.0 view
//                units will result in un-rotated text that appears 6 view units or 3mm high in the Y direction.
//                
//                Another important thing to keep in mind that this size represents what is known as the "ascent" height
//                of the font. The full height of the text may be higher if characters with accents or lower extension
//                (e.g. the lowercase y) appear in the text. For TrueType fonts the mapping system will do a best effort
//                positioning and sizing of the text using the alignment set and information about the font that it queries
//                from the operating system. For instance; if Arial text "Blog" is placed at (0,0) and the alignment
//                setting is Left-Bottom the left side of the B should be aligned at 0 in the X direction and the
//                bottom of all the letters except y will be at 0 in the Y direction. The lower part of the y will extend
//                below 0 in the Y (this is known as the "descent" height of the font at this size). The letters B and l
//                should be very close to the size set here (this may differ slightly for different fonts).
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void TextSize_MVIEW(MVIEW,   // MVIEW handle
                              real);   // Size in view units


  
//-----------------------------------------------------------------------------------------------------------
// Transparency_MVIEW Sets the transparency for new objects.
//
// Notes              1.0 Renders completely opaque objects while 0.0 will be transparent.
//                    Objects written after this will have a combined transparency value with the
//                    group transparency if it is set (e.g. 0.5 for group and 0.8 stream will result in 0.4).
//
// Available          6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Transparency_MVIEW(MVIEW,   //
                                  real);   // Transparency (1.0 - Opaque, 0.0 - Transparent)


  
//-----------------------------------------------------------------------------------------------------------
// ZValue_MVIEW Sets Z-value info.
//
// Notes        This number is stored in map mainly for exports to other vector formats (e.g ShapeFiles)
//              A contour map that's exported to a shape file will use this value as a Z-value attributes for its shapes.
//
// Available    6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ZValue_MVIEW(MVIEW,   //
                            real);   // Z-Value



//===========================================================================================================
//
// Drawing Entity Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// Arc_MVIEW Draw an arc.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Arc_MVIEW(MVIEW,   // MVIEW handle
                         real,    // Center x
                         real,    // Center y
                         real,    // Radius
                         real,    // Ratio x/y
                         real,    // Angle
                         real,    // Start angle
                         real);   // End angle


  
//-----------------------------------------------------------------------------------------------------------
// Chord_MVIEW Draw a filled arc.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Chord_MVIEW(MVIEW,   // MVIEW handle
                           real,    // Center x
                           real,    // Center y
                           real,    // Radius
                           real,    // Ratio x/y
                           real,    // Angle
                           real,    // Start angle
                           real);   // End angle


  
//-----------------------------------------------------------------------------------------------------------
// ClassifiedSymbols_MVIEW Plot classified symbols
//
// Notes                   For example, to plot three levels <95, 95-100 and
//                         100-120, three string arguments would be:
//                         
//                         "95,100,120"      maximums of each class
//                         "2.0,2.5,3.0"     sizes in mm
//                         "y,g,r"           fill colors
//
// Available               5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ClassifiedSymbols_MVIEW(MVIEW,    // MVIEW object
                                       VV,       // X VV
                                       VV,       // Y VV
                                       VV,       // Data VV
                                       real,     // Scale factor to convert mm to view units
                                       real,     // Classified minimum Z to plot
                                       string,   // Comma delimited list of Z maximums
                                       string,   // Comma delimited list of sizes in mm
                                       string);  // Comma delimited list of color strings


  
//-----------------------------------------------------------------------------------------------------------
// ComplexPolygon_MVIEW Draw a polygon with holes in it.
//
// Notes                You pass a VV with polygon sizes and 2 point vvs.
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ComplexPolygon_MVIEW(MVIEW,   //
                                    VV,      // VV of type int holding the number of points for each polygon
                                    VV,      // X coordinates.
                                    VV);     // Y coordinates.


  
//-----------------------------------------------------------------------------------------------------------
// Ellipse_MVIEW Draw an ellipse
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Ellipse_MVIEW(MVIEW,   // MVIEW handle
                             real,    // Center x
                             real,    // Center y
                             real,    // Radius
                             real,    // Ratio x/y
                             real);   // Angle


  
//-----------------------------------------------------------------------------------------------------------
// Line_MVIEW Draw a line.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Line_MVIEW(MVIEW,   // MVIEW handle
                          real,    // X0
                          real,    // Y0
                          real,    // X1
                          real);   // Y1


  
//-----------------------------------------------------------------------------------------------------------
// LineVV_MVIEW Draw line segments stored in a GS_D2LINE VV.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LineVV_MVIEW(MVIEW,   // MVIEW handle
                            VV);     // VV for GS_D2LINE


  
//-----------------------------------------------------------------------------------------------------------
// PolygonDm_MVIEW Like PolyLineDm, but draw polygons.
//
// Available       5.0.6
//-----------------------------------------------------------------------------------------------------------

[_public] void PolygonDm_MVIEW(MVIEW,   //
                               VV,      // X coordinates.
                               VV);     // Y coordinates.


  
//-----------------------------------------------------------------------------------------------------------
// PolygonPLY_MVIEW Draw a complex polygon from PLY.
//
// Available        5.1
//-----------------------------------------------------------------------------------------------------------

[_public] void PolygonPLY_MVIEW(MVIEW,   //
                                PLY);    //


  
//-----------------------------------------------------------------------------------------------------------
// PolygonMPLY_MVIEW Draw multiple complex polygons from MPLY.
//
// Available         9.5
//-----------------------------------------------------------------------------------------------------------

[_public] void PolygonMPLY_MVIEW(MVIEW,   //
                                 MPLY);   //


  
//-----------------------------------------------------------------------------------------------------------
// PolyLine_MVIEW Draw a polyline or polygon (dummies deleted).
//
// Notes          Dummies in X and/or Y VV are deleted and it results
//                in 'solid' line. Using PolyLineDm_MVIEW (below) function
//                if gaps from dummies are to be kept.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void PolyLine_MVIEW(MVIEW,   //
                              int,     // MVIEW_DRAW
                              VV,      // X coordinates.
                              VV);     // Y coordinates.


  
//-----------------------------------------------------------------------------------------------------------
// PolyLineDm_MVIEW Draw a polyline with gaps defined by dummies in X/Y VVs
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void PolyLineDm_MVIEW(MVIEW,   //
                                VV,      // X coordinates.
                                VV);     // Y coordinates.


  
//-----------------------------------------------------------------------------------------------------------
// PolyWrap_MVIEW Draw wrapped polylines from X and Y VV's.
//
// Notes          Convert a given VVy into a wrapped VVy using
//                the current view window as the wrap region.
//                Then draw polylines from it.
//
// See also       PolyLine_MVIEW
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void PolyWrap_MVIEW(MVIEW,   //
                              VV,      // X coordinates.
                              VV);     // Y coordinates.


  
//-----------------------------------------------------------------------------------------------------------
// Rectangle_MVIEW Draw a rectangle.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Rectangle_MVIEW(MVIEW,   // MVIEW handle
                               real,    // X0
                               real,    // Y0
                               real,    // X1
                               real);   // Y1


  
//-----------------------------------------------------------------------------------------------------------
// Segment_MVIEW Draw a filled segment of an ellipse.
//
// Available     5.0.7
//-----------------------------------------------------------------------------------------------------------

[_public] void Segment_MVIEW(MVIEW,   // MVIEW handle
                             real,    // Center x
                             real,    // Center y
                             real,    // Radius
                             real,    // Ratio x/y
                             real,    // Angle
                             real,    // Start angle
                             real);   // End angle


  
//-----------------------------------------------------------------------------------------------------------
// SizeSymbols_MVIEW Plot sized symbols
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SizeSymbols_MVIEW(MVIEW,   // View
                                 VV,      // X
                                 VV,      // Y
                                 VV);     // Symbol sizes (in view units)


  
//-----------------------------------------------------------------------------------------------------------
// Symbol_MVIEW Plot a symbol
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Symbol_MVIEW(MVIEW,   // View
                            real,    // X
                            real);   // Y


  
//-----------------------------------------------------------------------------------------------------------
// Symbols_MVIEW Plot symbols
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Symbols_MVIEW(MVIEW,   // View
                             VV,      // X
                             VV);     // Y


  
//-----------------------------------------------------------------------------------------------------------
// SymbolsITR_MVIEW Plot symbols using an ITR
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SymbolsITR_MVIEW(MVIEW,    // View
                                string,   // ITR file name (ZON or ITR)
                                VV,       // X
                                VV,       // Y
                                VV);      // Z


  
//-----------------------------------------------------------------------------------------------------------
// Text_MVIEW Draw text.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Text_MVIEW(MVIEW,    // MVIEW handle
                          string,   // Text to plot
                          real,     // X location of text
                          real);    // Y location of text



//===========================================================================================================
//
// Drawing Object Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// Aggregate_MVIEW Add an aggregate to a view.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Aggregate_MVIEW(MVIEW,    // View
                               AGG,      // Aggregate
                               string);  // Aggregate name Maximum length is MVIEW_NAME_LENGTH


  
//-----------------------------------------------------------------------------------------------------------
// GetAggregate_MVIEW Get an existing Aggregate object from the view.
//
// Returns            AGG object
//
// Notes              This method returns a cached object owned by the MVIEW and will be destroyed automatically when the MVIEW is disposed
//
// Available          9.2
//-----------------------------------------------------------------------------------------------------------

[_public] AGG GetAggregate_MVIEW(MVIEW,   // View
                                 int);    // Group number


  
//-----------------------------------------------------------------------------------------------------------
// ChangeLineMessage_MVIEW Change the specified line in a view.
//
// Notes                   The line name can be created by calling LineLabel_DB using
//                         DB_LINE_LABEL_FORMAT_LINK. This insures that the label is
//                         created is the same way as used in the database.
//
// Available               5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ChangeLineMessage_MVIEW(MVIEW,    // MVIEW object
                                       string);  // Change to this line


  
//-----------------------------------------------------------------------------------------------------------
// ColSymbol_MVIEW Add a colored symbol object to a view.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ColSymbol_MVIEW(MVIEW,    //
                               string,   // Name of the color symbol group
                               CSYMB);   // CSYMB object


  
//-----------------------------------------------------------------------------------------------------------
// GetColSymbol_MVIEW Get an existing colored symbol object from the view.
//
// Returns            CSYMB object
//
// Notes              This method returns a cached object owned by the MVIEW and will be destroyed automatically when the MVIEW is disposed
//
// Available          9.2
//-----------------------------------------------------------------------------------------------------------

[_public] CSYMB GetColSymbol_MVIEW(MVIEW,   // View
                                   int);    // Group number


  
//-----------------------------------------------------------------------------------------------------------
// DATALINKD_MVIEW Add a Data Link Display (DATALINKD) object to the view.
//
// Available       6.4
//-----------------------------------------------------------------------------------------------------------

[_public] void DATALINKD_MVIEW(MVIEW,       // View
                               DATALINKD,   //
                               string);     // Name Maximum length is MVIEW_NAME_LENGTH


  
//-----------------------------------------------------------------------------------------------------------
// GetDATALINKD_MVIEW Get an existing Data Link Display (DATALINKD) object from the view.
//
// Returns            DATALINKD object
//
// Notes              This method returns a cached object owned by the MVIEW and will be destroyed automatically when the MVIEW is disposed
//
// Available          9.2
//-----------------------------------------------------------------------------------------------------------

[_public] DATALINKD GetDATALINKD_MVIEW(MVIEW,   // View
                                       int);    // Group number


  
//-----------------------------------------------------------------------------------------------------------
// EasyMaker_MVIEW Used for GX makers which use both maps and databases.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void EasyMaker_MVIEW(MVIEW,    // MVIEW object
                               string,   // Maker name, used in menu prompt
                               string);  // INI groups (terminate each with a ";")


  
//-----------------------------------------------------------------------------------------------------------
// GetMakerName_MVIEW Used to retrieve the maker for a particular view group.
//
// Available          9.7
//-----------------------------------------------------------------------------------------------------------

[_public] void GetMakerName_MVIEW(MVIEW,        // MVIEW object
                                  int,          // Group number
                                  var string,   // String in which to place the maker name
                                  int);         // Maximum maker name size.
#define _GetMakerName_MVIEW(mview, group, str_val) GetMakerName_MVIEW(mview, group, str_val, sizeof(str_val))


  
//-----------------------------------------------------------------------------------------------------------
// EMFObject_MVIEW Add an EMF file data object to the view.
//
// Available       6.4
//-----------------------------------------------------------------------------------------------------------

[_public] void EMFObject_MVIEW(MVIEW,    // View
                               real,     // Min X
                               real,     // Min Y
                               real,     // Max X
                               real,     // Max Y
                               string);  // EMF File holding data


  
//-----------------------------------------------------------------------------------------------------------
// ExternalStringObject_MVIEW Add an external string data object to the view.
//
// Available                  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ExternalStringObject_MVIEW(MVIEW,    // View
                                          real,     // Min X
                                          real,     // Min Y
                                          real,     // Max X
                                          real,     // Max Y
                                          string,   // Name of external object
                                          string,   // Class of external object
                                          string);  // String data of external object


  
//-----------------------------------------------------------------------------------------------------------
// Link_MVIEW Make a link to a database.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Link_MVIEW(MVIEW,    // MVIEW object
                          DB,       // Database handle
                          string);  // Link name


  
//-----------------------------------------------------------------------------------------------------------
// Maker_MVIEW Generates a Maker for the database and/or map.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Maker_MVIEW(MVIEW,    // MVIEW object
                           int,      // Database required? (0 = No, 1 = Yes)
                           int,      // Map required?      (0 = No, 1 = Yes)
                           string,   // Program name
                           int,      // MAKER
                           string,   // Maker name, used in menu prompt
                           string);  // INI groups (terminate each with a ";")


  
//-----------------------------------------------------------------------------------------------------------
// Meta_MVIEW Store Metadata in a group
//
// Available  5.1.3
//-----------------------------------------------------------------------------------------------------------

[_public] void Meta_MVIEW(MVIEW,    // MVIEW object
                          META,     // META object
                          string);  // Menu name of Object


  
//-----------------------------------------------------------------------------------------------------------
// VOXD_MVIEW Add a Voxel Display (VOXD) object to the view.
//
// Available  6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void VOXD_MVIEW(MVIEW,    // View
                          VOXD,     //
                          string);  // Name Maximum length is MVIEW_NAME_LENGTH


  
//-----------------------------------------------------------------------------------------------------------
// GetVOXD_MVIEW Get an existing VOXD object from the view.
//
// Returns       VOXD object
//
// Notes         This method returns a cached object owned by the MVIEW and will be destroyed automatically when the MVIEW is disposed
//
// Available     8.2
//-----------------------------------------------------------------------------------------------------------

[_public] VOXD GetVOXD_MVIEW(MVIEW,   // View
                             int);    // Group number


  
//-----------------------------------------------------------------------------------------------------------
// DrawVectorVoxelVectors_MVIEW Display vectors from a vector voxel in the view.
//
// Returns                      Each data value in a vector voxel contains X, Y and Z components of a vector. The amplitudes do NOT necessarily correspond to the spatial size of the voxel.
//
// Notes                        This will result in a VECTOR3D group object within the view
//
// Available                    7.6
//-----------------------------------------------------------------------------------------------------------

[_public] void DrawVectorVoxelVectors_MVIEW(MVIEW,    // View
                                            VOX,      //
                                            string,   // View group name Maximum length is MVIEW_NAME_LENGTH
                                            ITR,      // Image transform - must contain zones
                                            real,     // Vector length scale factor - w.r.t. the voxel minimum horizontal cell size (default 1)
                                            real,     // Ratio of the vector cone height to its base (default 4)
                                            real,     // Ratio of maximum base size to minimum horizontal cell size (default 0.25)
                                            real,     // Cutoff value - do not plot vectors with amplitudes less than this value (rDUMMY or 0 to plot all)
                                            int);     // Maximum number of vectors - decimate as required to reduce (iDUMMY to plot all)


  
//-----------------------------------------------------------------------------------------------------------
// GetVECTOR3D_MVIEW Get an existing VECTOR3D object from the view.
//
// Returns           VECTOR3D object
//
// Notes             This method returns a cached object owned by the MVIEW and will be destroyed automatically when the MVIEW is disposed
//
// Available         9.3
//-----------------------------------------------------------------------------------------------------------

[_public] VECTOR3D GetVECTOR3D_MVIEW(MVIEW,   // View
                                     int);    // Group number


  
//-----------------------------------------------------------------------------------------------------------
// DrawVectors3D_MVIEW Display vectors in the view.
//
// Returns             Plot vectors as cones scaled in area to the maximum amplitude
//
// Available           8.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] void DrawVectors3D_MVIEW(MVIEW,    // View
                                   string,   // View group name Maximum length is MVIEW_NAME_LENGTH
                                   VV,       // X locations
                                   VV,       // Y locations
                                   VV,       // Z locations
                                   VV,       // Vector X component
                                   VV,       // Vector Y component
                                   VV,       // Vector Z component
                                   ITR,      // Image transform - must contain zones
                                   real,     // Scale factor for the longest vector in map units / vector units. Vector lengths for the rest of the vectors scale by the square root of the vector amplitudes.
                                               // This results in the apparent (viewed) area of the vector being proportional to the amplitude.
                                   real,     // Ratio of the vector cone height to its base (default 4)
                                   real);    // Maximum base size in view units. Leave blank (dummy) for no limit. If applied this can make larger vectors skinnier, but does not reduce the length, so they don't obscure other vectors as much.


  
//-----------------------------------------------------------------------------------------------------------
// CSYMB3D_MVIEW Add a 3D coloured symbol (CSYMB3D) object to the view.
//
// Available     2024.1
//-----------------------------------------------------------------------------------------------------------

[_public] void CSYMB3D_MVIEW(MVIEW,     // View
                             CSYMB3D,   //
                             string);   // Name Maximum length is MVIEW_NAME_LENGTH


  
//-----------------------------------------------------------------------------------------------------------
// GetCSYMB3D_MVIEW Get an existing 3D coloured symbol CSYMB3D object from the view.
//
// Returns          CSYMB3D object
//
// Notes            This method returns a cached object owned by the MVIEW and will be destroyed automatically when the MVIEW is disposed
//
// Available        2024.1
//-----------------------------------------------------------------------------------------------------------

[_public] CSYMB3D GetCSYMB3D_MVIEW(MVIEW,   // View
                                   int);    // Group number



//===========================================================================================================
//
// Group Methods Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// SetGroupITR_MVIEW Set group ITR
//
// Notes             A group ITR associate a color distribution with mixed vector groups (e.g. Drillhole Lithology tubes) groups. Used by legend UI support in 3D.
//                   Note that modifying this information does not currently change the group contents and a group needs to be regenerated (e.g. with maker) 
//                   to refresh the objects.
//
// Available         9.3
//-----------------------------------------------------------------------------------------------------------

[_public] void SetGroupITR_MVIEW(MVIEW,   // View
                                 int,     // Group number
                                 ITR);    //


  
//-----------------------------------------------------------------------------------------------------------
// GetGroupITR_MVIEW Get group ITR
//
// Notes             A group ITR associate a color distribution with mixed vector groups (e.g. Drillhole Lithology tubes) groups. Used by legend UI support in 3D.
//                   Note that modifying this information does not currently change the group contents and a group needs to be regenerated (e.g. with maker) 
//                   to refresh the objects.
//
// Available         9.3
//-----------------------------------------------------------------------------------------------------------

[_public] ITR GetGroupITR_MVIEW(MVIEW,   // View
                                int);    // Group number


  
//-----------------------------------------------------------------------------------------------------------
// iGroupITRExists_MVIEW Determine if group ITR exists.
//
// Returns               1 - ITR exists, 0 - ITR does not exist
//
// Notes                 A group ITR associate a color distribution with mixed vector groups (e.g. Drillhole Lithology tubes) groups. Used by legend UI support in 3D.
//                       Note that modifying this information does not currently change the group contents and a group needs to be regenerated (e.g. with maker) 
//                       to refresh the objects.
//
// Available             9.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iGroupITRExists_MVIEW(MVIEW,   // View
                                    int);    // Group number


  
//-----------------------------------------------------------------------------------------------------------
// DeleteGroupITR_MVIEW Deletes existing ITR associated with a group.
//
// Notes                A group ITR associate a color distribution with mixed vector groups (e.g. Drillhole Lithology tubes) groups. Used by legend UI support in 3D.
//                      Note that modifying this information does not currently change the group contents and a group needs to be regenerated (e.g. with maker) 
//                      to refresh the objects.
//
// Available            9.3
//-----------------------------------------------------------------------------------------------------------

[_public] void DeleteGroupITR_MVIEW(MVIEW,   // View
                                    int);    // Group number


  
//-----------------------------------------------------------------------------------------------------------
// SetGroupTPAT_MVIEW Set group TPAT
//
// Notes              A group TPAT associate a thematic color map with mixed vector groups (e.g. Drillhole Lithology tubes) groups. Used by legend UI support in 3D.
//                    Note that modifying this information does not currently change the group contents and a group needs to be regenerated (e.g. with maker) 
//                    to refresh the objects.
//
// Available          9.3
//-----------------------------------------------------------------------------------------------------------

[_public] void SetGroupTPAT_MVIEW(MVIEW,   // View
                                  int,     // Group number
                                  TPAT);   //


  
//-----------------------------------------------------------------------------------------------------------
// GetGroupTPAT_MVIEW Get group TPAT
//
// Notes              A group TPAT associate a thematic color map with mixed vector groups (e.g. Drillhole Lithology tubes) groups. Used by legend UI support in 3D.
//                    Note that modifying this information does not currently change the group contents and a group needs to be regenerated (e.g. with maker) 
//                    to refresh the objects.
//
// Available          9.3
//-----------------------------------------------------------------------------------------------------------

[_public] TPAT GetGroupTPAT_MVIEW(MVIEW,   // View
                                  int);    // Group number


  
//-----------------------------------------------------------------------------------------------------------
// iGroupTPATExists_MVIEW Determine if group TPAT exists.
//
// Returns                1 - TPAT exists, 0 - TPAT does not exist
//
// Notes                  A group TPAT associate a thematic color map with mixed vector groups (e.g. Drillhole Lithology tubes) groups. Used by legend UI support in 3D.
//                        Note that modifying this information does not currently change the group contents and a group needs to be regenerated (e.g. with maker) 
//                        to refresh the objects.
//
// Available              9.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iGroupTPATExists_MVIEW(MVIEW,   // View
                                     int);    // Group number


  
//-----------------------------------------------------------------------------------------------------------
// DeleteGroupTPAT_MVIEW Deletes existing TPAT associated with a group.
//
// Notes                 A group TPAT associate a thematic color map with mixed vector groups (e.g. Drillhole Lithology tubes) groups. Used by legend UI support in 3D.
//                       Note that modifying this information does not currently change the group contents and a group needs to be regenerated (e.g. with maker) 
//                       to refresh the objects.
//
// Available             9.3
//-----------------------------------------------------------------------------------------------------------

[_public] void DeleteGroupTPAT_MVIEW(MVIEW,   // View
                                     int);    // Group number


  
//-----------------------------------------------------------------------------------------------------------
// iGroupStorageExists_MVIEW Determine if generic storage associated with a group exists.
//
// Returns                   1 - storage exists, 0 - storage does not exist
//
// Notes                     External API users should not use storage names starting with "Geosoft"
//
// Available                 9.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iGroupStorageExists_MVIEW(MVIEW,    // View
                                        int,      // Group number
                                        string);  // Storage name


  
//-----------------------------------------------------------------------------------------------------------
// ReadGroupStorage_MVIEW Reads existing generic storage associated with a group into an in-memory BF.
//
// Returns                BF Object
//
// Notes                  External API users should not use storage names starting with "Geosoft"
//
// Available              9.3
//-----------------------------------------------------------------------------------------------------------

[_public] BF ReadGroupStorage_MVIEW(MVIEW,    // View
                                    int,      // Group number
                                    string);  // Storage name


  
//-----------------------------------------------------------------------------------------------------------
// DeleteGroupStorage_MVIEW Deletes existing generic storage associated with a group.
//
// Notes                    External API users should not use storage names starting with "Geosoft"
//
// Available                9.3
//-----------------------------------------------------------------------------------------------------------

[_public] void DeleteGroupStorage_MVIEW(MVIEW,    // View
                                        int,      // Group number
                                        string);  // Storage name


  
//-----------------------------------------------------------------------------------------------------------
// WriteGroupStorage_MVIEW Open generic existing storage associated with a group for reading.
//
// Notes                   External API users should not use storage names starting with "Geosoft"
//
// Available               9.3
//-----------------------------------------------------------------------------------------------------------

[_public] void WriteGroupStorage_MVIEW(MVIEW,    // View
                                       int,      // Group number
                                       string,   // Storage name
                                       BF);      // BF to read from


  
//-----------------------------------------------------------------------------------------------------------
// CopyMarkedGroups_MVIEW Copies all marked groups from one view into another view
//
// Notes                  Projections in source and destination views are used to copy the
//                        entities. Entities are clipped by the destination view's clipping
//                        region.
//
// Available              5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void CopyMarkedGroups_MVIEW(MVIEW,   // Source MVIEW
                                      MVIEW);  // Destination MVIEW


  
//-----------------------------------------------------------------------------------------------------------
// CopyRawMarkedGroups_MVIEW Copies all marked groups raw from one view into another
//
// Notes                     The projections, and clipping is completly ignored.
//
// Available                 5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void CopyRawMarkedGroups_MVIEW(MVIEW,   // Source MVIEW
                                         MVIEW);  // Destination MVIEW


  
//-----------------------------------------------------------------------------------------------------------
// CRCGroup_MVIEW Compute CRC for a group.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] CRC CRCGroup_MVIEW(MVIEW,    // View
                             string,   // Group name
                             CRC);     // CRC to start (use CRC_INIT_VALUE)


  
//-----------------------------------------------------------------------------------------------------------
// DeleteGroup_MVIEW Delete a group.
//
// Notes             Does nothing if the group does not already exist.
//
// Available         5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] void DeleteGroup_MVIEW(MVIEW,    // MVIEW handle
                                 string);  // Group name


  
//-----------------------------------------------------------------------------------------------------------
// DelMarkedGroups_MVIEW Delete marked groups.
//
// Available             5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DelMarkedGroups_MVIEW(MVIEW);  // MVIEW handle


  
//-----------------------------------------------------------------------------------------------------------
// GetGroupExtent_MVIEW Get extent of a group in a view
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetGroupExtent_MVIEW(MVIEW,      // MVIEW object
                                    string,     // Group name
                                    var real,   // Minimum X, returned
                                    var real,   // Minimum Y, returned
                                    var real,   // Maximum X, returned
                                    var real,   // Maximum Y, returned
                                    int);       // MVIEW_UNIT


  
//-----------------------------------------------------------------------------------------------------------
// GetGroupTransparency_MVIEW Gets the transparency value of group
//
// Available                  6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetGroupTransparency_MVIEW(MVIEW,      //
                                          string,     // Group name
                                          var real);  // Transparency (1.0 - Opaque, 0.0 - Transparent)


  
//-----------------------------------------------------------------------------------------------------------
// GroupToPLY_MVIEW Save all polygons in group into PLY obj.
//
// Notes            The coordinates will be in the working coordinate system
//                  of the view.  The SetWorkingIPJ_MVIEW method can be used
//                  to change the working coordinate system. This function will
//                  return an empty PLY if the group is hidden.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GroupToPLY_MVIEW(MVIEW,    // View
                                string,   // Group name
                                PLY);     // PLY to add to


  
//-----------------------------------------------------------------------------------------------------------
// HideMarkedGroups_MVIEW Hide/Show marked groups.
//
// Available              5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void HideMarkedGroups_MVIEW(MVIEW,   // MVIEW handle
                                      int);    // MVIEW_HIDE


  
//-----------------------------------------------------------------------------------------------------------
// HideShadow2DInterpretations_MVIEW Hide/Show 2d shadow interpretations.
//
// Available                         8.5
//-----------------------------------------------------------------------------------------------------------

[_public] void HideShadow2DInterpretations_MVIEW(MVIEW,   // MVIEW handle
                                                 int);    // MVIEW_HIDE


  
//-----------------------------------------------------------------------------------------------------------
// iExistGroup_MVIEW Checks to see if a group exists.
//
// Returns           0  - group does not exist.
//                   1  - group exists.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iExistGroup_MVIEW(MVIEW,    // MVIEW handle
                                string);  // Group name


  
//-----------------------------------------------------------------------------------------------------------
// IGenNewGroupName_MVIEW Generate the name of a group from a base name that
//                        is new. (always unique and won't overwrite existing
//                        objects).
//
// Available              5.0.8
//-----------------------------------------------------------------------------------------------------------

[_public] void IGenNewGroupName_MVIEW(MVIEW,        // MVIEW object
                                      string,       // Base Name of group
                                      var string,   // New Name of group
                                      int);         // Size of buffer.
#define GenNewGroupName_MVIEW(mview, group, new_name) IGenNewGroupName_MVIEW(mview, group, new_name, sizeof(new_name))


  
//-----------------------------------------------------------------------------------------------------------
// iIsGroup_MVIEW Query a status or characteristic of a group
//
// Returns        TRUE or FALSE (1 or 0)
//
// Available      5.0.5
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsGroup_MVIEW(MVIEW,    // MVIEW handle
                             string,   // Group name
                             int);     // MVIEW_IS


  
//-----------------------------------------------------------------------------------------------------------
// iIsGroupEmpty_MVIEW Is the group empty?
//
// Returns             TRUE or FALSE (1 or 0)
//
// Available           6.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsGroupEmpty_MVIEW(MVIEW,    // MVIEW handle
                                  string);  // Group name


  
//-----------------------------------------------------------------------------------------------------------
// iIsMovable_MVIEW Is this view movable?
//
// Notes            Views are always physically movable in the API, this
//                  flag is for preventing accidental moving in the GUI.
//                  By default views are not movable.
//
// Available        6.4
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsMovable_MVIEW(MVIEW);  //


  
//-----------------------------------------------------------------------------------------------------------
// iIsVisible_MVIEW Is this view visible?
//
// Available        6.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsVisible_MVIEW(MVIEW);  //


  
//-----------------------------------------------------------------------------------------------------------
// iListGroups_MVIEW Get a list of the groups in a view.
//
// Returns           Number of groups in the list
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iListGroups_MVIEW(MVIEW,   // MVIEW object
                                LST,     // List
                                int);    // MVIEW_GROUP_LIST


  
//-----------------------------------------------------------------------------------------------------------
// iRenderOrder_MVIEW Query the view render order
//
// Returns            Render order
//
// Notes              Views with lower numbers should render first, iDUMMY is undefined
//
// Available          6.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iRenderOrder_MVIEW(MVIEW);  //


  
//-----------------------------------------------------------------------------------------------------------
// IsGroupExportable_MVIEW Query whether the group is an exportable type.
//
// Returns                 TRUE or FALSE (1 or 0)
//
// Available               9.7
//-----------------------------------------------------------------------------------------------------------

[_public] int IsGroupExportable_MVIEW(MVIEW,    // MVIEW handle
                                      string);  // Group name


  
//-----------------------------------------------------------------------------------------------------------
// MarkAllGroups_MVIEW Mark or unmark all groups.
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void MarkAllGroups_MVIEW(MVIEW,   // MVIEW handle
                                   int);    // 0 - unmark, 1 - mark


  
//-----------------------------------------------------------------------------------------------------------
// MarkEmptyGroups_MVIEW Mark/unmark all empty groups.
//
// Available             6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void MarkEmptyGroups_MVIEW(MVIEW,   // MVIEW handle
                                     int);    // 0 - unmark, 1 - mark


  
//-----------------------------------------------------------------------------------------------------------
// MarkGroup_MVIEW Mark or unmark a specific group
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void MarkGroup_MVIEW(MVIEW,    // MVIEW handle
                               string,   // Group name
                               int);     // 0 - unmark, 1 - mark


  
//-----------------------------------------------------------------------------------------------------------
// MoveGroupBackward_MVIEW Move the group backward one position (render sooner).
//
// Available               5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void MoveGroupBackward_MVIEW(MVIEW,    // View
                                       string);  // Group name


  
//-----------------------------------------------------------------------------------------------------------
// MoveGroupForward_MVIEW Move the group forward one position (render later).
//
// Available              5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void MoveGroupForward_MVIEW(MVIEW,    // View
                                      string);  // Group name


  
//-----------------------------------------------------------------------------------------------------------
// MoveGroupToBack_MVIEW Move the group to the back (render first).
//
// Available             5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void MoveGroupToBack_MVIEW(MVIEW,    // View
                                     string);  // Group name


  
//-----------------------------------------------------------------------------------------------------------
// MoveGroupToFront_MVIEW Move the group to the front (render last).
//
// Available              5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void MoveGroupToFront_MVIEW(MVIEW,    // View
                                      string);  // Group name


  
//-----------------------------------------------------------------------------------------------------------
// RenameGroup_MVIEW Rename a group.
//
// Notes             Does nothing if the group does not already exist.
//
// Available         5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void RenameGroup_MVIEW(MVIEW,    // MVIEW handle
                                 string,   // Old group name
                                 string);  // New group name


  
//-----------------------------------------------------------------------------------------------------------
// SetGroupMoveable_MVIEW Set the movable attribute of a group.
//
// Available              5.0.5
//-----------------------------------------------------------------------------------------------------------

[_public] void SetGroupMoveable_MVIEW(MVIEW,    // MVIEW handle
                                      string,   // Group name
                                      int);     // 0 - not movable, 1 - movable


  
//-----------------------------------------------------------------------------------------------------------
// SetGroupTransparency_MVIEW Sets the transparency value of group
//
// Available                  6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetGroupTransparency_MVIEW(MVIEW,    //
                                          string,   // Group name
                                          real);    // Transparency  (1.0 - Opaque, 0.0 - Transparent)


  
//-----------------------------------------------------------------------------------------------------------
// SetMarkMoveable_MVIEW Set the movable attribute of marked groups.
//
// Available             5.0.5
//-----------------------------------------------------------------------------------------------------------

[_public] void SetMarkMoveable_MVIEW(MVIEW,   // MVIEW handle
                                     int);    // 0 - not movable, 1 - movable


  
//-----------------------------------------------------------------------------------------------------------
// SetMovability_MVIEW Set the view movability
//
// Notes               Views are always physically movable in the API, this
//                     flag is for preventing accidental moving in the GUI.
//                     By default views are not movable.
//
// Available           6.4
//-----------------------------------------------------------------------------------------------------------

[_public] void SetMovability_MVIEW(MVIEW,   //
                                   int);    //


  
//-----------------------------------------------------------------------------------------------------------
// SetRenderOrder_MVIEW Set the view render order
//
// Notes                Views with lower numbers should render first, iDUMMY is undefined
//
// Available            6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void SetRenderOrder_MVIEW(MVIEW,   //
                                    int);    // Render order


  
//-----------------------------------------------------------------------------------------------------------
// SetVisibility_MVIEW Set the view visibility
//
// Available           6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void SetVisibility_MVIEW(MVIEW,   //
                                   int);    //


  
//-----------------------------------------------------------------------------------------------------------
// StartGroup_MVIEW Start a group.
//
// Notes            Line and fill colors and thickness must be set
//                  before drawing to a group.
//                  
//                  If the group name is NULL, output will be sent to
//                  the primary group stream and the MVIEW_GROUP is
//                  ignored.
//                  
//                  Group names must be different from view names.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void StartGroup_MVIEW(MVIEW,    // MVIEW handle
                                string,   // Group name, can be NULL, Maximum length is MVIEW_NAME_LENGTH
                                int);     // MVIEW_GROUP


  
//-----------------------------------------------------------------------------------------------------------
// GetGroupGUID_MVIEW Gets a GUID of a group in the MVIEW.
//
// Notes              If a GUID was never queried a new one will be assigned and the map will be modified. Only if the map is saved will this value then persist.
//
// Available          9.3
//-----------------------------------------------------------------------------------------------------------

[_public] void GetGroupGUID_MVIEW(MVIEW,        // MVIEW Object
                                  int,          // Group number
                                  var string,   // GUID
                                  int);         // Size of GUID buffer.
#define _GetGroupGUID_MVIEW(mview, group, guid) GetGroupGUID_MVIEW(mview, group, guid, sizeof(guid))


  
//-----------------------------------------------------------------------------------------------------------
// GetFolderItems3D_MVIEW Get the list of folders in the MVIEW.
//
// Notes                  Returns name/guid pairs. Empty GUID indicates item is a group.
//
// Available              9.10
//-----------------------------------------------------------------------------------------------------------

[_public] LST GetFolderItems3D_MVIEW(MVIEW,    // MVIEW Object
                                     string);  // Folder parent GUID, or empty string for parent MVIEW


  
//-----------------------------------------------------------------------------------------------------------
// GetFolderItems2D_MVIEW Get the list of key-value pairs representing the name(key) and the type(value) of all children in the specified parent folders in the MVIEW.
//
// Notes                  Returns name/type pairs. Types can be 'Folder', 'Group' or 'Unknown'
//
// Available              9.10
//-----------------------------------------------------------------------------------------------------------

[_public] LST GetFolderItems2D_MVIEW(MVIEW,    // MVIEW Object
                                     string);  // Parent folder name, or empty string for root MVIEW


  
//-----------------------------------------------------------------------------------------------------------
// AddFolder3D_MVIEW Add a 3DView folder to the MVIEW.
//
// Available         9.10
//-----------------------------------------------------------------------------------------------------------

[_public] void AddFolder3D_MVIEW(MVIEW,        // MVIEW Object
                                 string,       // Folder name
                                 string,       // Folder parent GUID, or empty string for parent MVIEW.
                                 var string,   // GUID
                                 int);         // Size of GUID buffer.
#define _AddFolder3D_MVIEW(mview, name, parent_guid, guid) AddFolder3D_MVIEW(mview, name, parent_guid, guid, sizeof(guid))


  
//-----------------------------------------------------------------------------------------------------------
// AddFolder2D_MVIEW Add a Map folder to the MVIEW.
//
// Available         2022.1
//-----------------------------------------------------------------------------------------------------------

[_public] void AddFolder2D_MVIEW(MVIEW,    // MVIEW Object
                                 string,   // Folder name
                                 string);  // Parent folder name, or empty string for root MVIEW.


  
//-----------------------------------------------------------------------------------------------------------
// MoveGroupToFolder3D_MVIEW Add group to a 3DView folder in MVIEW.
//
// Available                 9.10
//-----------------------------------------------------------------------------------------------------------

[_public] void MoveGroupToFolder3D_MVIEW(MVIEW,    // MVIEW Object
                                         string,   // Folder parent GUID, or empty string for parent MVIEW.
                                         int);     // Group number


  
//-----------------------------------------------------------------------------------------------------------
// MoveGroupToFolder2D_MVIEW Add group to a Map folder in MVIEW.
//
// Available                 2022.1
//-----------------------------------------------------------------------------------------------------------

[_public] void MoveGroupToFolder2D_MVIEW(MVIEW,    // MVIEW Object
                                         string,   // Parent folder name, or empty string for root MVIEW.
                                         int);     // Group number


  
//-----------------------------------------------------------------------------------------------------------
// DeleteFolder3D_MVIEW Delete a Map folder.
//
// Available            9.10
//-----------------------------------------------------------------------------------------------------------

[_public] void DeleteFolder3D_MVIEW(MVIEW,    // MVIEW handle
                                    string);  // Folder GUID.


  
//-----------------------------------------------------------------------------------------------------------
// DeleteFolder2D_MVIEW Delete a 3DView folder.
//
// Available            2022.1
//-----------------------------------------------------------------------------------------------------------

[_public] void DeleteFolder2D_MVIEW(MVIEW,    // MVIEW handle
                                    string);  // Folder name.


  
//-----------------------------------------------------------------------------------------------------------
// iFindGroupByGUID_MVIEW Find a Group by name.
//
// Returns                Group Number.
//
// Available              9.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iFindGroupByGUID_MVIEW(MVIEW,    // View
                                     string);  // GUID



//===========================================================================================================
//
// Projection Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// _SetWorkingIPJ_MVIEW Set the working projection of the view.
//
// Notes                The working projection is the coordinate system of coordinates drawn to
//                      the view.  The working coordinate system can be different than the view
//                      coordinate system, in which case the coordinates are re-projected to the
//                      view coordinate system before they are placed in the view.
//
// See also             ModePJ_MVIEW to control use of the working projection.
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void _SetWorkingIPJ_MVIEW(MVIEW,   // View
                                    IPJ);    // The input projection
#define SetWorkingIPJ_MVIEW _SetWorkingIPJ_MVIEW


  
//-----------------------------------------------------------------------------------------------------------
// ClearESRILDTs_MVIEW Clear ESRI local datum transformations currently in use.
//
// Available           7.1
//-----------------------------------------------------------------------------------------------------------

[_public] void ClearESRILDTs_MVIEW(MVIEW);  // View


  
//-----------------------------------------------------------------------------------------------------------
// iIsProjectionEmpty_MVIEW Returns 1 if the view projection and view user projection are both empty (undefined).
//
// Returns                  1 if the view projection and view user projection are both empty.
//
// Notes                    Use, for instance, to see if the map view contains projection information. The first time you add data that
//                          has projection information you should set up an empty view projection so that subsequent data added with a different
//                          projection is properly displayed in relation to the initial data.
//
// Available                9.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsProjectionEmpty_MVIEW(MVIEW);  // MVIEW object


  
//-----------------------------------------------------------------------------------------------------------
// GetIPJ_MVIEW Get the projection of the view.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetIPJ_MVIEW(MVIEW,   // MVIEW object
                            IPJ);    // IPJ in which to place the view IPJ


  
//-----------------------------------------------------------------------------------------------------------
// GetUserIPJ_MVIEW Get the user projection of the view.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetUserIPJ_MVIEW(MVIEW,   // View
                                IPJ);    // IPJ in which to place the view IPJ


  
//-----------------------------------------------------------------------------------------------------------
// ModePJ_MVIEW Set the working projection mode
//
// Notes        This controls how your coordinates and attributes will be interpreted.
//              A working projection must be set useing SetWorkingIPJ_MVIEW for this
//              method to have any effect.
//
// See also     SetWorkingIPJ
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ModePJ_MVIEW(MVIEW,   // MVIEW object
                            int);    // MVIEW_PJ


  
//-----------------------------------------------------------------------------------------------------------
// rNorth_MVIEW Returns North direction at center of view.
//
// Returns      North direction id deg. azimuth relative to view Y.
//
// Notes        North is calculated from the IPJ North direction.
//              It will be rDUMMY if IPJ is unknown.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rNorth_MVIEW(MVIEW);  // MVIEW object


  
//-----------------------------------------------------------------------------------------------------------
// SetIPJ_MVIEW Set the projection of the view.
//
// Notes        This function also sets the User IPJ,
//              and automatically clears the WARP before doing so.
//              This would be equivalent to calling :func:`_ClearWarp_IPJ'
//              followed by SetUserIPJ_MVIEW on the view.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetIPJ_MVIEW(MVIEW,   // View
                            IPJ);    // IPJ to place in the view


  
//-----------------------------------------------------------------------------------------------------------
// SetUserIPJ_MVIEW Set the user projection of the view.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetUserIPJ_MVIEW(MVIEW,   // View
                                IPJ);    // IPJ to place in the view



//===========================================================================================================
//
// Render Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// iGet3DGroupFlags_MVIEW Get a 3D geometry group's 3D rendering flags.
//
// Returns                Combination of MVIEW_3D_RENDER flags or 0
//
// Available              9.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iGet3DGroupFlags_MVIEW(MVIEW,   // View
                                     int);    // Group number


  
//-----------------------------------------------------------------------------------------------------------
// Set3DGroupFlags_MVIEW Set a 3D geometry group's 3D rendering flags.
//
// Available             9.1
//-----------------------------------------------------------------------------------------------------------

[_public] void Set3DGroupFlags_MVIEW(MVIEW,   // View
                                     int,     // Group number
                                     int);    // Combination of MVIEW_3D_RENDER flags or 0


  
//-----------------------------------------------------------------------------------------------------------
// _GetGroupFreezeScale_MVIEW Get a scale freezing value for the group (rDUMMY for disabled).
//
// Available                  7.2
//-----------------------------------------------------------------------------------------------------------

[_public] void _GetGroupFreezeScale_MVIEW(MVIEW,      // View
                                          int,        // Group number
                                          var real);  // Variable to fill with freeze scale
#define GetGroupFreezeScale_MVIEW _GetGroupFreezeScale_MVIEW


  
//-----------------------------------------------------------------------------------------------------------
// _SetFreezeScale_MVIEW Set a scale freezing value into stream (rDUMMY for disabled).
//
// Notes                 Objects written after this will override any scale freezing set for the group
//
// Available             7.2
//-----------------------------------------------------------------------------------------------------------

[_public] void _SetFreezeScale_MVIEW(MVIEW,   // View
                                     real);   // Freeze Scale value
#define SetFreezeScale_MVIEW _SetFreezeScale_MVIEW


  
//-----------------------------------------------------------------------------------------------------------
// _SetGroupFreezeScale_MVIEW Set a scale freezing value for the group (rDUMMY for disabled).
//
// Available                  7.2
//-----------------------------------------------------------------------------------------------------------

[_public] void _SetGroupFreezeScale_MVIEW(MVIEW,   // View
                                          int,     // Group number
                                          real);   // Variable to fill with freeze scale
#define SetGroupFreezeScale_MVIEW _SetGroupFreezeScale_MVIEW


  
//-----------------------------------------------------------------------------------------------------------
// iFindGroup_MVIEW Find a Group by name.
//
// Returns          Group Number.
//
// Available        7.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iFindGroup_MVIEW(MVIEW,    // View
                               string);  // Group name


  
//-----------------------------------------------------------------------------------------------------------
// IGroupName_MVIEW Get a group name
//
// Available        7.2
//-----------------------------------------------------------------------------------------------------------

[_public] void IGroupName_MVIEW(MVIEW,        // MVIEW object
                                int,          // Group number, error if not valid
                                var string,   // Group Name
                                int);         // Maximum name length
#define GroupName_MVIEW(mview, group_num, group_name) IGroupName_MVIEW(mview, group_num, group_name, sizeof(group_name))



//===========================================================================================================
//
// Utility Drawing Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// _SetUFac_MVIEW Set the unit conversion of a view.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void _SetUFac_MVIEW(MVIEW,   // View to set UFac to
                              real);   // New UFac value
#define SetUFac_MVIEW _SetUFac_MVIEW


  
//-----------------------------------------------------------------------------------------------------------
// AxisX_MVIEW Draw an X axis
//
// Notes       All coordinates are in view units.
//
// See also    rOptimumTick_MVIEW
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void AxisX_MVIEW(MVIEW,   // View
                           real,    // Y location in view units
                           real,    // Left  X
                           real,    // Right X
                           real,    // Major tick interval
                           real,    // Minor tick interval (half size of major)
                           real);   // Tick size in view units (negative for down ticks)


  
//-----------------------------------------------------------------------------------------------------------
// AxisY_MVIEW Draw a  Y axis
//
// Notes       All coordinates are in view units.
//
// See also    rOptimumTick_MVIEW
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void AxisY_MVIEW(MVIEW,   // View
                           real,    // X location in view units
                           real,    // Bottom Y
                           real,    // Top    Y
                           real,    // Major tick interval
                           real,    // Minor tick interval (half size of major)
                           real);   // Tick size in view units (negative for left ticks)


  
//-----------------------------------------------------------------------------------------------------------
// Grid_MVIEW Draw a grid in the current window
//
// Notes      The grid will be drawn in the current window specified
//            by the last SetWindow call.
//
// See also   AxisX_MVIEW, AxisY_MVIEW, OptimumTick_MVIEW
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Grid_MVIEW(MVIEW,   // View
                          real,    // X grid increment
                          real,    // Y grid increment
                          real,    // dX dot increment/cross X size
                          real,    // dY dot increment/cross Y size
                          int);    // MVIEW_GRID


  
//-----------------------------------------------------------------------------------------------------------
// LabelFid_MVIEW Label fiducials on a profile
//
// Notes          A 1mm long vertical tick is drawn at the place
//                where a label is present. The label is drawn
//                below the tick.
//                
//                The incoming X VV is used to define the place for
//                label.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LabelFid_MVIEW(MVIEW,   // View
                              VV,      // X VV
                              real,    // Fiducial start
                              real,    // Fiducial increment
                              real,    // Fiducial label interval, default 100.0
                              real,    // Y location in view unit
                              real);   // Y scale


  
//-----------------------------------------------------------------------------------------------------------
// LabelX_MVIEW Label annotations on the X axis
//
// Notes        Label bounding will justify edge labels to be inside
//              the bar limits. But bounding does not apply if
//              labels are drawn vertically (top right or top left)
//
// See also     AxisX_MVIEW, AxisY_MVIEW, OptimumTick_MVIEW
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LabelX_MVIEW(MVIEW,   // View
                            real,    // Y location in view units
                            real,    // Left  X
                            real,    // Right X
                            real,    // Label interval
                            int,     // MVIEW_LABEL_JUST
                            int,     // MVIEW_LABEL_BOUND
                            int);    // MVIEW_LABEL_ORIENT


  
//-----------------------------------------------------------------------------------------------------------
// LabelY_MVIEW Label annotations on the Y axis
//
// Notes        Label bounding will justify edge labels to be inside
//              the bar limits. But bounding does not apply if
//              labels are drawn vertically (top right or top left)
//
// See also     AxisX_MVIEW, AxisY_MVIEW, OptimumTick_MVIEW
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LabelY_MVIEW(MVIEW,   // View
                            real,    // X location in view units
                            real,    // Bottom Y
                            real,    // Top    Y
                            real,    // Label interval
                            int,     // MVIEW_LABEL_JUST
                            int,     // MVIEW_LABEL_BOUND
                            int);    // MVIEW_LABEL_ORIENT


  
//-----------------------------------------------------------------------------------------------------------
// OptimumTick_MVIEW Return a default optimum tick interval
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void OptimumTick_MVIEW(real,       // Minimum of range
                                 real,       // Maximum
                                 var real);  // Optimum interval



//===========================================================================================================
//
// View Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// Create_MVIEW Create MVIEW.
//
// Returns      MVIEW, aborts if creation fails
//
// Notes        View scaling is set to mm on the map and the view
//              origin is set to the map origin.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] MVIEW Create_MVIEW(MAP,      // MAP on which to place the view
                             string,   // View name (maximum MVIEW_NAME_LENGTH)
                             int);     // MVIEW_OPEN


  
//-----------------------------------------------------------------------------------------------------------
// CreateCrookedSection_MVIEW Creates a new crooked section view.
//
// Returns                    MVIEW, aborts if creation fails
//
// Notes                      A crooked section is a section running vertically beneath
//                            a path of (X, Y) locations, like a river. This view supports
//                            linking to other plan, section, or 3D views.
//                            The data view coordinates are set up so that vertical coordinate
//                            corresponds to elevation, and the X coordinate is the distance along
//                            the crooked feature, beginning at zero on the left, but the
//                            status bar will show the true (X, Y, Z) location.
//                            
//                            If the scale is set to rDUMMY, then it will be calculated so that
//                            the points will all fit horizontally.
//
// Available                  7.2
//-----------------------------------------------------------------------------------------------------------

[_public] MVIEW CreateCrookedSection_MVIEW(MAP,      // MAP Object
                                           IPJ,      // Geographic projection of input X, Y locations below (without orientation)
                                           string,   // View Name
                                           real,     // Base view bottom left corner X (mm)
                                           real,     // Base view bottom left corner Y (mm)
                                           real,     // Base view size in X (mm)
                                           real,     // Base view size in Y (mm)
                                           real,     // Map horizontal scale (X-axis)
                                           real,     // Vertical exaggeration (1.0 is normal, must be >0.0)
                                           real,     // Starting distance at the left side of the view.
                                           real,     // Elevation at TOP of the view
                                           VV,       // Cumulative distances along the secton
                                           VV,       // True X locations along the section
                                           VV);      // True Y locations along the section


  
//-----------------------------------------------------------------------------------------------------------
// CreateCrookedSectionDataProfile_MVIEW Creates a new crooked section data profile view.
//
// Returns                               MVIEW, aborts if creation fails
//
// Notes                                 This is the same as CreateCrookedSection_MVIEW, except that the
//                                       vertical axis plots a data value, not elevation, and allows for
//                                       logarithmic scaling.
//                                       
//                                       See Also: CreateCrookedSection_MVIEW.
//
// Available                             7.2
//-----------------------------------------------------------------------------------------------------------

[_public] MVIEW CreateCrookedSectionDataProfile_MVIEW(MAP,      // MAP Object
                                                      IPJ,      // Geographic projection of input X, Y locations below (without orientation)
                                                      string,   // View Name
                                                      real,     // Base view bottom left corner X (mm)
                                                      real,     // Base view bottom left corner Y (mm)
                                                      real,     // Base view size in X (mm)
                                                      real,     // Base view size in Y (mm)
                                                      real,     // Map horizontal scale (X-axis)
                                                      real,     // Starting distance at the left side of the view.
                                                      real,     // Data value at bottom of the view
                                                      real,     // Data value at top of the view
                                                      int,      // Make logarithmic Y-axis (0:No, 1:Yes)?
                                                      VV,       // Cumulative distances along the secton
                                                      VV,       // True X locations along the section
                                                      VV);      // True Y locations along the section


  
//-----------------------------------------------------------------------------------------------------------
// Destroy_MVIEW Destroy the MVIEW handle.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Destroy_MVIEW(MVIEW);  // MVIEW Handle


  
//-----------------------------------------------------------------------------------------------------------
// Extent_MVIEW Get the view extents
//
// Notes        The CLIP region is the current view window or the limits
//              of the current clip polygon.
//              
//              If MVIEW_EXTENT_ALL is requested and the view has no groups, the
//              clip extents are returned.
//              
//              If clip extents are requested and there are no clip extents, an
//              area 0.0,0.0 1.0,1.0 is returned.
//              
//              The MVIEW_EXTENT_VISIBLE flag will return the union of the MVIEW_EXTENT_CLIP area and the
//              extents of all non-masked visible groups in the view.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Extent_MVIEW(MVIEW,      // View
                            int,        // MVIEW_EXTENT
                            int,        // MVIEW_EXTENT_UNIT
                            var real,   // X minimum
                            var real,   // Y minimum
                            var real,   // X maximum
                            var real);  // Y maximum


  
//-----------------------------------------------------------------------------------------------------------
// GetMAP_MVIEW Get the MAP of the view.
//
// Returns      The MAP of the View.
//
// Available    7.2
//-----------------------------------------------------------------------------------------------------------

[_public] MAP GetMAP_MVIEW(MVIEW);  // View handle


  
//-----------------------------------------------------------------------------------------------------------
// GetREG_MVIEW Get the REG of the view.
//
// Returns      The REG of the View.
//
// Available    5.0.5
//-----------------------------------------------------------------------------------------------------------

[_public] REG GetREG_MVIEW(MVIEW);  // View handle


  
//-----------------------------------------------------------------------------------------------------------
// IGetName_MVIEW Gets the name of a view.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetName_MVIEW(MVIEW,        // View handle
                              var string,   // View name returned
                              int);         // View name string size
#define GetName_MVIEW(mview, name) IGetName_MVIEW(mview, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// GetGUID_MVIEW Gets the GUID of the MVIEW.
//
// Notes         If a GUID was never queried a new one will be assigned and the map will be modified. Only if the map is saved will this value then persist.
//
// Available     9.3
//-----------------------------------------------------------------------------------------------------------

[_public] void GetGUID_MVIEW(MVIEW,        // MVIEW Object
                             var string,   // GUID
                             int);         // Size of GUID buffer.
#define _GetGUID_MVIEW(mview, guid) GetGUID_MVIEW(mview, guid, sizeof(guid))



//===========================================================================================================
//
// View Control Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// _PlotToView_MVIEW Convert a plot coordinate in mm to a VIEW coordinate.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void _PlotToView_MVIEW(MVIEW,      // View
                                 var real,   // X in plot mm, returned in View coordinates
                                 var real);  // Y in plot mm, returned in View coordinates
#define PlotToView_MVIEW _PlotToView_MVIEW


  
//-----------------------------------------------------------------------------------------------------------
// _SetThinRes_MVIEW Set polyline/polygon thinning resolution
//
// Notes             The thinning resolution controls the removal of
//                   redundant points from polylines and polygons.  Points
//                   that deviate from a straight line by less than the
//                   thinning resolution are removed.  This can significantly
//                   reduce the size of a MAP file.
//                   We recommend that you set the thinning resolution to
//                   0.02 mm.
//                   
//                   By default, the thinning resolution is set to 0.05mm.
//                   
//                   Set resolution to 0.0 to remove colinear points only.
//                   
//                   To turn off thinning after turning it on, call
//                   SetThinRes_MVIEW with a resolution of -1.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void _SetThinRes_MVIEW(MVIEW,   // View
                                 real);   // Thinning resolution in mm, -1.0 to turn off.
#define SetThinRes_MVIEW _SetThinRes_MVIEW


  
//-----------------------------------------------------------------------------------------------------------
// _ViewToPlot_MVIEW Convert a VIEW coordinate to a plot coordinate in mm.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void _ViewToPlot_MVIEW(MVIEW,      // View
                                 var real,   // X in View, returned in mm from plot origin
                                 var real);  // Y in View, returned in mm from plot origin
#define ViewToPlot_MVIEW _ViewToPlot_MVIEW


  
//-----------------------------------------------------------------------------------------------------------
// BestFitWindow_MVIEW Fit an area in ground coordinates centered to an area in mm on map or vise versa
//                     keeping X and Y scales the same.
//
// Notes               X and Y scales will be redefined and units will remain unchanged.
//                     The final X and Y ranges (if changed) are returned.
//
// See also            FitWindow_MVIEW
//
// Available           5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] void BestFitWindow_MVIEW(MVIEW,      // View
                                   var real,   // X minimum (mm) of the area in map relative to map origin
                                   var real,   // Y minimum  ..
                                   var real,   // X maximum  ..
                                   var real,   // Y maximum  ..
                                   var real,   // Min X in ground coordinate to fit to the area defined above
                                   var real,   // Min Y in ground coordinate ..
                                   var real,   // Max X in ground coordinate ..
                                   var real,   // Max Y in ground coordinate ..
                                   int);       // MVIEW_FIT


  
//-----------------------------------------------------------------------------------------------------------
// FitMapWindow3D_MVIEW Set the 2D view window for a 3D view.
//
// Notes                3D views are placed in 2D maps within a 2D mapping window
//                      that is analgous to a 2D View.  This allows all 2D functions
//                      (such as changing a view location and size) to treat a 3D
//                      view just like a 2D view.
//                      
//                      The FitMapWindow3D_MVIEW function allows you to
//                      locate and set the "apparent" 2D mapping of a 3D view on
//                      the map. An intial map window is established
//                      as specified on the map, and the view scaling is
//                      established to fit the specified area within that
//                      map area.
//
// Available            5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void FitMapWindow3D_MVIEW(MVIEW,   // View (3D)
                                    real,    // X minimum (mm) of the area in map relative to map origin
                                    real,    // Y minimum  ..
                                    real,    // X maximum  ..
                                    real,    // Y maximum  ..
                                    real,    // Min X in ground coordinate to fit to the area defined above
                                    real,    // Min Y in ground coordinate ..
                                    real,    // Max X in ground coordinate ..
                                    real);   // Max Y in ground coordinate ..


  
//-----------------------------------------------------------------------------------------------------------
// FitWindow_MVIEW Fit an area in ground coordinates to an area in mm on map.
//
// Notes           X and Y scales will be redefined and the units will be set to <unknown>.
//                 Coordinate ranges must be greater than 0.0.
//
// See also        SetWindow_MVIEW
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void FitWindow_MVIEW(MVIEW,   // View
                               real,    // X minimum (mm) of the area in map relative to map origin
                               real,    // Y minimum  ..
                               real,    // X maximum  ..
                               real,    // Y maximum  ..
                               real,    // Min X in ground coordinate to fit to the area defined above
                               real,    // Min Y in ground coordinate ..
                               real,    // Max X in ground coordinate ..
                               real);   // Max Y in ground coordinate ..


  
//-----------------------------------------------------------------------------------------------------------
// IGetClassName_MVIEW Get a class name.
//
// Notes               MVIEW class names are intended to be used to record the
//                     names of certain classes in the view, such as "Plane"
//                     for the default drawing plane.
//
// Available           5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetClassName_MVIEW(MVIEW,        // MVIEW handle
                                   string,       // Class
                                   var string,   // Name
                                   int);         // Maximum name length
#define GetClassName_MVIEW(mview, cl, name) IGetClassName_MVIEW(mview, cl, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// MapOrigin_MVIEW Get the map origin from a view
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void MapOrigin_MVIEW(MVIEW,      // MVIEW object
                               var real,   // Returned map origin - X
                               var real);  // Returned map origin - Y


  
//-----------------------------------------------------------------------------------------------------------
// ReScale_MVIEW Change the scale of a view.
//
// Notes         The view size is multiplied by the scale factor.
//               The view location will move relative to the map origin
//               by the scale factor.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ReScale_MVIEW(MVIEW,   // MVIEW object
                             real);   // Scale factor (> 0.0)


  
//-----------------------------------------------------------------------------------------------------------
// rGetMapScale_MVIEW Get the current map scale of the view
//
// Returns            The current map scale to 6 significant digits
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetMapScale_MVIEW(MVIEW);  // MVIEW Handle


  
//-----------------------------------------------------------------------------------------------------------
// rScaleMM_MVIEW Get the horizontal scale in view X units/mm
//
// Returns        Returns horizontal scale in view X units/mm
//
// Notes          The scale factor is intended to be used by methods
//                that would like to specify sizes in mm.  Examples
//                would be text sizes, line thicknesses and line
//                pitch.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rScaleMM_MVIEW(MVIEW);  // MVIEW Handle


  
//-----------------------------------------------------------------------------------------------------------
// rScalePjMM_MVIEW Get horizontal scale in projected user units/mm
//
// Returns          Returns horizontal scale in projected user units/mm
//
// Notes            The scale factor is intended to be used by methods
//                  that would like to specify sizes in mm.  Examples
//                  would be text sizes, line thicknesses and line
//                  pitch.
//                  Same as rScaleMM if working projection not defined
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rScalePjMM_MVIEW(MVIEW);  // MVIEW Handle


  
//-----------------------------------------------------------------------------------------------------------
// rScaleYMM_MVIEW Get the vertical scale in Y units/mm
//
// Returns         Returns vertical scale in view Y units/mm
//
// Notes           The scale factor is intended to be used by methods
//                 that would like to specify sizes in mm.  Examples
//                 would be text sizes, line thicknesses and line
//                 pitch.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rScaleYMM_MVIEW(MVIEW);  // MVIEW Handle


  
//-----------------------------------------------------------------------------------------------------------
// ScaleAllGroup_MVIEW Scale all groups (except for GRID) in a view
//
// Notes               X (and Y) scale is the ratio of the new dimension over
//                     the old dimension of a reference object. For example, if a horizontal
//                     straight line of 10m long becomes 20m, X scale should be 2.
//                     
//                     The view is then scaled back so that the view occupies the same
//                     area size as before.  The view's clip area is updated as well.
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ScaleAllGroup_MVIEW(MVIEW,   // View
                                   real,    // X scale
                                   real);   // Y scale


  
//-----------------------------------------------------------------------------------------------------------
// ScaleWindow_MVIEW Assign view coordinates to define a window.
//
// Notes             The provided coordinates are converted to map mm
//                   using the current view translation and scaling.
//                   SetWindow is effectively called.
//
// See also          SetWindow_MVIEW, ScaleWindow_MVIEW, TranScale_MVIEW
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ScaleWindow_MVIEW(MVIEW,   // View
                                 real,    // X minimum in view coordinates
                                 real,    // Y minimum
                                 real,    // X maximum
                                 real,    // Y maximum
                                 real,    // X minimum in plot coordinates
                                 real,    // Y minimum
                                 real,    // Horizontal scale (view unit/plot unit in mm)
                                 real);   // Vertical scale


  
//-----------------------------------------------------------------------------------------------------------
// SetClassName_MVIEW Set a class name.
//
// Notes              MVIEW class names are intended to be used to record the
//                    names of certain classes in the view, such as "Plane"
//                    for the default drawing plane.
//
// Available          5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetClassName_MVIEW(MVIEW,    // MVIEW handle
                                  string,   // Class
                                  string);  // Name


  
//-----------------------------------------------------------------------------------------------------------
// SetWindow_MVIEW Set the view window
//
// Notes           The current clip region will be set to the clip
//                 window.
//
// See also        FitWindow_MVIEW, ScaleWindow_MVIEW, Extent_MVIEW.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetWindow_MVIEW(MVIEW,   // View
                               real,    // X minimum
                               real,    // Y minimum
                               real,    // X maximum
                               real,    // Y maximum
                               int);    // MVIEW_UNIT


  
//-----------------------------------------------------------------------------------------------------------
// TranScale_MVIEW Set the view translation and scaling
//
// Notes           Warning. For reasons unknown (and maybe a bug), this
//                 function resets the view IPJ units. It is a good idea
//                 to call the SetUnits_IPJ function after calling this
//                 function in order to restore them. This will be addressed
//                 in v6.4.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void TranScale_MVIEW(MVIEW,   // View
                               real,    // X origin (user X to be placed at map 0)
                               real,    // Y origin (user Y to be placed at map 0)
                               real,    // X mm/user unit
                               real);   // Y mm/user unit


  
//-----------------------------------------------------------------------------------------------------------
// UserToView_MVIEW Convert a USERplot in mm to a VIEW coordinate
//
// See also         SetUserIPJ_MVIEW
//                  GetUserIPJ_MVIEW
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void UserToView_MVIEW(MVIEW,      // View
                                var real,   // X in USER, returned in View coordinates
                                var real);  // Y in USER, returned in View coordinates


  
//-----------------------------------------------------------------------------------------------------------
// ViewToUser_MVIEW Convert a VIEW coordinate to a USER coordinate.
//
// See also         SetUserIPJ_MVIEW
//                  GetUserIPJ_MVIEW
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ViewToUser_MVIEW(MVIEW,      // View
                                var real,   // X in View, returned in user coordinates
                                var real);  // Y in View, returned in user coordinates



//===========================================================================================================
//
// Obsolete Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// GetSurfaceFilename_MVIEW Get the surface filename.
//
// Notes                    The group must be a SURFACE group. Check this using
//                          iIsGroup_MVIEW and MVIEW_IS_GENSURF or MVIEW_IS_VOXSURF .
//
// Available                9.7
//-----------------------------------------------------------------------------------------------------------

[_public] void GetSurfaceFilename_MVIEW(MVIEW,        // MVIEW object
                                        string,       // Group name
                                        var string,   // filename returned
                                        int);         // Maximum name length
#define _GetSurfaceFilename_MVIEW(mview, group, filename) GetSurfaceFilename_MVIEW(mview, group, filename, sizeof(filename))


  
//-----------------------------------------------------------------------------------------------------------
// IsSurfaceItemVisible_MVIEW Is the surface item visible?
//
// Available                  9.7
//-----------------------------------------------------------------------------------------------------------

[_public] int IsSurfaceItemVisible_MVIEW(MVIEW,    // MVIEW object
                                         string,   // Group name
                                         string);  // Item GUID





//*** endblock Generated


#endif
