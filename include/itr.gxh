//*** extends 'class_empty.gxh'

#ifndef HITR_GXH_DEFINED
#define HITR_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class ITR
//
//-----------------------------------------------------------------------------------------------------------
//
// The ITR class provides access to ITR files. An ITR file maps
// ranges of values to specific colors. The ITR object is typically
// used in conjunction with MVIEW objects (see MVIEW and MVU).
//
//-----------------------------------------------------------------------------------------------------------
// Notes
//
// Histogram ranges and color zone ranges
// 
// Histogram bins are defined with inclusive minima and exclusive maxima;
// for instance if Min = 0 and Inc = 1, then the second bin would include
// all values z such that  0 <= z < 1 (the first bin has all values < 0).
// 
// Color zones used in displaying grids (ITR, ZON etc...) are the
// opposite, with exclusive minima and inclusive maxima.
// For instance, if a zone is defined from 0 to 1, then it would
// contain all values of z such that 0 < z <= 1.
// 
// These definitions mean that it is impossible to perfectly assign
// ITR colors to individual bars of a histogram. The best work-around
// when the data values are integers is to define the color zones using
// 0.5 values between the integers. A general work-around is to make the
// number of histogram bins much larger than the number of color zones.
// 
// The ITR_NULL is used to hold a NULL handle to an ITR class.
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// ITR_COLOR_MODEL Definitions
//
// ITR Color Model defines
//
// ITR_COLOR_MODEL_HSV
// 
//
// ITR_COLOR_MODEL_RGB
// 
//
// ITR_COLOR_MODEL_CMY
// 
//
//===========================================================================================================


#define ITR_COLOR_MODEL_HSV 1
#define ITR_COLOR_MODEL_RGB 2
#define ITR_COLOR_MODEL_CMY 3


//===========================================================================================================
//
// ITR_NULL Definitions
//
// Null ITR object
//
//===========================================================================================================


#define ITR_NULL ((ITR)0)



//===========================================================================================================
//
// ITR_POWER Definitions
//
// Power Zoning defines
//
// ITR_POWER_10
// Power of 10
//
// ITR_POWER_EXP
// Exponential
//
//===========================================================================================================


#define ITR_POWER_10 0
#define ITR_POWER_EXP 1


//===========================================================================================================
//
// ITR_ZONE Definitions
//
// Zoning Methods
//
// ITR_ZONE_DEFAULT
// 
//
// ITR_ZONE_LINEAR
// 
//
// ITR_ZONE_NORMAL
// 
//
// ITR_ZONE_EQUALAREA
// 
//
// ITR_ZONE_SHADE
// 
//
// ITR_ZONE_LOGLINEAR
// 
//
//===========================================================================================================


#define ITR_ZONE_DEFAULT 0
#define ITR_ZONE_LINEAR 1
#define ITR_ZONE_NORMAL 2
#define ITR_ZONE_EQUALAREA 3
#define ITR_ZONE_SHADE 4
#define ITR_ZONE_LOGLINEAR 5


//===========================================================================================================
//
// ITR_ZONE_MODEL Definitions
//
// ITR Zone Model defines
//
// ITR_ZONE_MODEL_NOZONE
// The ITR has no numeric zones defined (e.g. from a TBL file)
//
// ITR_ZONE_MODEL_NONE
// There is no specific zone model defined.
//
// ITR_ZONE_MODEL_LINEAR
// The ITR is set up with a linear transform.
//
// ITR_ZONE_MODEL_NORMAL
// The ITR is set up with a normal distribution transform.
//
// ITR_ZONE_MODEL_EQUAL
// The ITR is set up with an equal area transform.
//
// ITR_MODEL_LOGLIN
// The ITR is set up with a log-linear transform.
//
// ITR_ZONE_MODEL_LOGLIN
// The ITR is set up with a log-linear transform.
//
//===========================================================================================================


#define ITR_ZONE_MODEL_NOZONE -1
#define ITR_ZONE_MODEL_NONE 0
#define ITR_ZONE_MODEL_LINEAR 1
#define ITR_ZONE_MODEL_NORMAL 2
#define ITR_ZONE_MODEL_EQUAL 3
#define ITR_MODEL_LOGLIN 4
#define ITR_ZONE_MODEL_LOGLIN 4





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// SetName_ITR Set the name of the ITR.
//
// Available   2021.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetName_ITR(ITR,      // ITR object
                           string);  // Name to set


  
//-----------------------------------------------------------------------------------------------------------
// IGetName_ITR Get the name of the ITR.
//
// Available    2021.2
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetName_ITR(ITR,          // ITR object
                            var string,   // Name returned
                            int);         // Name size
#define GetName_ITR(itr, name) IGetName_ITR(itr, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// ChangeBrightness_ITR Change the brightness.
//
// Notes                0.0 brightness does nothing.
//                      -1.0 to 0.0 makes colors darker, -1.0 is black
//                      0.0 to 1.0 makes colors lighter, 1.0 is white
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ChangeBrightness_ITR(ITR,    // ITR object
                                    real);  // -1.0 - black; 0.0 no change; 1.0 white


  
//-----------------------------------------------------------------------------------------------------------
// ColorVV_ITR Get color transform of a VV.
//
// Notes       If the input value is a dummy, then the output color
//             is 0 (no color).
//
// Available   5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void ColorVV_ITR(ITR,   //
                           VV,    // Input VV of values (none-string)
                           VV);   // Output VV of colors (type INT)


  
//-----------------------------------------------------------------------------------------------------------
// Copy_ITR Copies ITRs
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Copy_ITR(ITR,   // ITR Destination
                        ITR);  // ITR Source


  
//-----------------------------------------------------------------------------------------------------------
// Create_ITR Create an ITR object
//
// Returns    ITR object
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] ITR Create_ITR();


  
//-----------------------------------------------------------------------------------------------------------
// CreateFile_ITR Create an ITR object from an itr, tbl, zon, lut file.
//
// Returns        ITR object
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] ITR CreateFile_ITR(string);  // File name, type determined from extension


  
//-----------------------------------------------------------------------------------------------------------
// CreateIMG_ITR Create an ITR for an image.
//
// Returns       ITR object
//
// Notes         The ITR_ZONE_DEFAULT model will ask the IMG to provide
//               a model if it can.
//               
//               If a shaded relief model is selected, a shaded image
//               will be created and a shaded image file will be created with
//               the same name as the original grid but with the suffux "_s"
//               added to the name part of the grid.
//
// Available     5.1
//-----------------------------------------------------------------------------------------------------------

[_public] ITR CreateIMG_ITR(IMG,      //
                            string,   // Color table name, NULL for default
                            int,      // ITR_ZONE
                            real);    // Color contour interval or rDUMMY


  
//-----------------------------------------------------------------------------------------------------------
// CreateMap_ITR Create ITR from Map with AGG Group name.
//
// Returns       ITR object
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] ITR CreateMap_ITR(MAP,      // MAP on which to place the view
                            string);  // AGG Group name


  
//-----------------------------------------------------------------------------------------------------------
// CreateS_ITR Create an ITR object from a BF
//
// Returns     ITR object
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] ITR CreateS_ITR(BF);  // BF to serialize from


  
//-----------------------------------------------------------------------------------------------------------
// Destroy_ITR Destroy the ITR handle.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Destroy_ITR(ITR);  // ITR Handle


  
//-----------------------------------------------------------------------------------------------------------
// EqualArea_ITR Calculate an equal area transform.
//
// Notes         If the number of individual populated zones calculated using an equal-area ITR is less than the number
//               of colours in the ITR, then an error message is displayed to that effect. If you want
//               to avoid this error message in your work-flow, call EqualAreaOrLinear_ITR, which
//               will apply a linear transform with the input number of colours, covering the whole range,
//               should the equal-area transform have a problem, and no error message will appear, even if
//               there is no valid data at all.
//
// Available     5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void EqualArea_ITR(ITR,    // ITR object
                             ST,     // Stat object with a histogram
                             real);  // Color contour interval or dummy for none


  
//-----------------------------------------------------------------------------------------------------------
// EqualAreaOrLinear_ITR Calculate an equal area transform.
//
// Notes                 If the number of individual populated zones calculated using an equal-area ITR is less than the number
//                       of colours in the ITR, then EqualArea_ITR displays an error message is displayed to that effect. If you want
//                       to avoid this error message in your work-flow, call this function, EqualAreaOrLinear_ITR, which
//                       will apply a linear transform with the input number of colours, covering the whole range,
//                       should the equal-area transform have a problem, and no error message will appear, even if
//                       there is no valid data at all.
//
// Available             2022.2
//-----------------------------------------------------------------------------------------------------------

[_public] void EqualAreaOrLinear_ITR(ITR,    // ITR object
                                     ST,     // Stat object with a histogram
                                     real);  // Color contour interval or dummy for none


  
//-----------------------------------------------------------------------------------------------------------
// GetDataLimits_ITR Get ITR max/min data limits.
//
// Notes             In some ITRs, especially those defined and
//                   embedded inside grid (IMG) objects, the
//                   actual data minimum and maximum values are
//                   stored. This function retrieves those values.
//                   This is NOT true of all ITR objects, and in
//                   those cases dummy values will be returned.
//
// Available         6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetDataLimits_ITR(ITR,        //
                                 var real,   // Data minimum value (or rDUMMY if not set)
                                 var real);  // Data maximum value (or rDUMMY if not set)


  
//-----------------------------------------------------------------------------------------------------------
// GetREG_ITR Get the ITR's REG
//
// Returns    REG object
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] REG GetREG_ITR(ITR);  // ITR object


  
//-----------------------------------------------------------------------------------------------------------
// GetZoneColor_ITR Get the color in a zone of the ITR
//
// Notes            Valid indices are 0 to N-1, where N is the size of the ITR.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetZoneColor_ITR(ITR,       // ITR object
                                int,       // Number of the zone to set.
                                var int);  // MVIEW_COLOR


  
//-----------------------------------------------------------------------------------------------------------
// GetZoneBaseColor_ITR Get the base color in a zone of the ITR
//
// Notes                Valid indices are 0 to N-1, where N is the size of the ITR.
//                      The base colour is the colour in the ITR before any brightness is applied.
//
// Available            2021.2
//-----------------------------------------------------------------------------------------------------------

[_public] void GetZoneBaseColor_ITR(ITR,       // ITR object
                                    int,       // Number of the zone to set.
                                    var int);  // MVIEW_COLOR


  
//-----------------------------------------------------------------------------------------------------------
// iColorValue_ITR Transform single data value to color
//
// Returns         MVIEW_COLOR
//
// Available       5.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iColorValue_ITR(ITR,    //
                              real);  // Data value


  
//-----------------------------------------------------------------------------------------------------------
// iGetShade_ITR Get the shading parameters of the ITR
//
// Returns       Returns 1 if shading is enabled and defined, 0 otherwise
//
// Available     2025.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetShade_ITR(ITR,          // ITR object
                            var real,     // Shading inclination - DUMMY if not defined
                            var real,     // Shading declination - DUMMY if not defined
                            var real,     // Shading scale - DUMMY if not defined
                            var string,   // Origin returned - empty if not defined
                            int);         // Origin size
#define _iGetShade_ITR(itr, inclination, declination, scale, origin) iGetShade_ITR(itr, inclination, declination, scale, origin, sizeof(origin))


  
//-----------------------------------------------------------------------------------------------------------
// SetShade_ITR Set the shading parameters of the ITR
//
// Available    2025.1
//-----------------------------------------------------------------------------------------------------------

[_public] void SetShade_ITR(ITR,      // ITR object
                            real,     // Shading inclination
                            real,     // Shading declination
                            real,     // Shading scale
                            string);  // Origin returned


  
//-----------------------------------------------------------------------------------------------------------
// iGetSize_ITR Get the number of zones in an ITR
//
// Returns      The number of zones.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetSize_ITR(ITR);  // The ITR object


  
//-----------------------------------------------------------------------------------------------------------
// iGetZoneModelType_ITR Get the ITR zone model (e.g. Linear, LogLin, Equal Area).
//
// Returns               ITR_ZONE_MODEL
//
// Notes                 This function may be used to determine if a color
//                       transform is included in an ITR.
//
// Available             6.4
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetZoneModelType_ITR(ITR);  // ITR object


  
//-----------------------------------------------------------------------------------------------------------
// GetZoneModel_ITR Get the ITR zone model (e.g. Linear, LogLin, Equal Area) and the accompanying values (if defined)
//
// Notes            The following parameters are returned for the following values returned for ITR_ZONE_MODEL:
//                  ITR_ZONE_MODEL_LINEAR: [0]: Contour, [1]: Min, [2]: Max
//                  ITR_ZONE_MODEL_LOGLIN: [0]: Contour, [1]: Min, [2]: Max
//                  ITR_ZONE_MODEL_NORMAL: [0]: Contour, [1]: Mean, [2]: Standard Deviation, [3]: Exponent
//                  ITR_ZONE_MODEL_EQUAL: [0]: Contour
//                  All other types do not return any values (the VV will be empty).
//
// Available        2021.2
//-----------------------------------------------------------------------------------------------------------

[_public] void GetZoneModel_ITR(ITR,       // ITR object
                                var int,   // ITR_ZONE_MODEL
                                VV);       // VV object (REAL): see notes for values returned


  
//-----------------------------------------------------------------------------------------------------------
// SetZoneModel_ITR Set the ITR zone model (e.g. Linear, LogLin, Equal Area) and the accompanying values (if defined)
//
// Notes            The following parameters are required for the following values of ITR_ZONE_MODEL:
//                  ITR_ZONE_MODEL_LINEAR: [0]: Contour, [1]: Min, [2]: Max
//                  ITR_ZONE_MODEL_LOGLIN: [0]: Contour, [1]: Min, [2]: Max
//                  ITR_ZONE_MODEL_NORMAL: [0]: Contour, [1]: Mean, [2]: Standard Deviation, [3]: Exponent
//                  ITR_ZONE_MODEL_EQUAL: [0]: Contour
//                  All other types do not require any values (the VV will be empty).
//                  NOTE: This will not change the actual ranges, so care is needed when using this function that the input
//                  specification accurately reflects the actual ranges.
//
// Available        2021.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetZoneModel_ITR(ITR,   // ITR object
                                int,   // ITR_ZONE_MODEL
                                VV);   // VV object (REAL): see notes for values returned


  
//-----------------------------------------------------------------------------------------------------------
// Linear_ITR Calculate a linear transform.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Linear_ITR(ITR,    // ITR object
                          real,   // Minimum
                          real,   // Maximum
                          real);  // Color contour interval or dummy for none


  
//-----------------------------------------------------------------------------------------------------------
// LoadA_ITR Load to an ASCII file, ZON, TBL or ER-Mapper LUT
//
// Available 5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void LoadA_ITR(ITR,      //
                         string);  // File name


  
//-----------------------------------------------------------------------------------------------------------
// LogLinear_ITR Calculate a log transform.
//
// Notes         The function name is a misnomer. This is a pure log transform.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LogLinear_ITR(ITR,    // ITR object
                             real,   // Minimum ( > 0)
                             real,   // Maximum ( > minimum)
                             real);  // Color contour interval or dummy for none


  
//-----------------------------------------------------------------------------------------------------------
// Normal_ITR Calculate a normal distribution transform.
//
// Available  5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void Normal_ITR(ITR,    // ITR object
                          real,   // Standard deviation
                          real,   // Mean
                          real,   // Expansion, normally 1.0
                          real);  // Color contour interval or dummy for none


  
//-----------------------------------------------------------------------------------------------------------
// PowerZone_ITR Modified ITR zone values to 10 (or e) raized to the power of the values
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void PowerZone_ITR(ITR,   // ITR object
                             int);  // ITR_POWER


  
//-----------------------------------------------------------------------------------------------------------
// rGetBrightness_ITR Get the brightness setting of the ITR
//
// Returns            The brightness setting of the ITR
//
// Notes              Brightness can range from -1.0 (black) to 1.0 (white).
//                    This brightness control is relative to the normal color
//                    when the ITR is created.
//
// See also           ChangeBrightness_ITR, rGetContrast_ITR, SetBrightContrast_ITR
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetBrightness_ITR(ITR);  // ITR object


  
//-----------------------------------------------------------------------------------------------------------
// rGetContrast_ITR Get the contrast setting of the ITR
//
// Returns          The contrast setting of the ITR
//
// Notes            Brightness can range from 0.0 (flat) to 1.0 (normal full contrast).
//
// See also         ChangeBrightness_ITR, rGetBrightness_AGG, SetBrightContrast_ITR
//
// Available        2021.2
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetContrast_ITR(ITR);  // ITR object


  
//-----------------------------------------------------------------------------------------------------------
// rGetContour_ITR Get the contour value associated with the current transform model of the ITR
//
// Returns         The contour setting of the ITR
//
// Notes           The Linear, Normal and Equal-Area transforms accept a contour value as part of their definitions on creation.
//                 All the colour-breaks are rounded to the nearest integral multiple of the contour value (if defined).
//                 This function returns the value defined, and rDUMMY if none is defined.
//
// Available       2021.2
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetContour_ITR(ITR);  // ITR object


  
//-----------------------------------------------------------------------------------------------------------
// rGetZoneValue_ITR Get the value in a zone of the ITR
//
// Returns           The value of the specified zone.
//
// Notes             Valid indices are 0 to N-2, where N is the size of the ITR.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetZoneValue_ITR(ITR,   // ITR object
                                 int);  // Number of the zone to set.


  
//-----------------------------------------------------------------------------------------------------------
// SaveA_ITR Save to an ASCII file, ZON, TBL or ER-Mapper LUT
//
// Available 5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SaveA_ITR(ITR,      //
                         string);  // File name


  
//-----------------------------------------------------------------------------------------------------------
// SaveFile_ITR Save to any type (based on the extension of the input file name).
//
// Available    8.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SaveFile_ITR(ITR,      //
                            string);  // File name


  
//-----------------------------------------------------------------------------------------------------------
// Serial_ITR Serialize an ITR to a BF
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Serial_ITR(ITR,   // ITR object to serialize
                          BF);   // BF to serialize to


  
//-----------------------------------------------------------------------------------------------------------
// SetAggMap_ITR Set ITR to an AGG in map
//
// Notes         See the CreateMap_ITR function
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetAggMap_ITR(MAP,      // MAP on which to place the view
                             string,   // AGG group name
                             ITR);     // ITR object to set


  
//-----------------------------------------------------------------------------------------------------------
// SetBrightContrast_ITR Set the brightness of the ITR colors
//
// Notes                 Brightness settings:
//                       0.0   - black
//                       0.5   - normal (no change)
//                       1.0   - white
//                       
//                       Contrast
//                       0.0   - flat
//                       1.0   - full contrast (normal)
//
// Available             5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetBrightContrast_ITR(ITR,    // ITR object
                                     real,   // 0.0 - black; 0.5 normal; 1.0 white
                                     real);  // 0.0 - flat; 1.0 normal


  
//-----------------------------------------------------------------------------------------------------------
// SetColorModel_ITR Set the color model of an ITR.
//
// Available         5.0.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetColorModel_ITR(ITR,   // ITR object
                                 int);  // ITR_COLOR_MODEL


  
//-----------------------------------------------------------------------------------------------------------
// iDefaultColorMethod_ITR Return the user-defined global default color method.
//
// Returns                 One of ITR_ZONE_EQUALAREA, ITR_ZONE_LINEAR, ITR_ZONE_NORMAL or ITR_ZONE_LOGLINEAR
//
// Available               9.4
//-----------------------------------------------------------------------------------------------------------

[_public] int iDefaultColorMethod_ITR();


  
//-----------------------------------------------------------------------------------------------------------
// SetDataLimits_ITR Set ITR max/min data limits.
//
// Available         6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void SetDataLimits_ITR(ITR,    //
                                 real,   // Data minimum value
                                 real);  // Data maximum value


  
//-----------------------------------------------------------------------------------------------------------
// SetSize_ITR Set the number of zones in an ITR
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetSize_ITR(ITR,   // ITR object
                           int);  // Number of zones to set ITR to.


  
//-----------------------------------------------------------------------------------------------------------
// SetZoneColor_ITR Set the color in a zone of the ITR
//
// Notes            "
//                                 Valid indices are 0 to N-1, where N is the size of the ITR.
//                                 This function modifies the colours as rendered, including applied
//                                 brightness, and triggers an internal reset of the ITR brightness
//                                 to zero, with all the "rendered" colours becoming the "base" colours.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetZoneColor_ITR(ITR,   // ITR object
                                int,   // Number of the zone to set.
                                int);  // MVIEW_COLOR


  
//-----------------------------------------------------------------------------------------------------------
// SetZoneBaseColor_ITR Set the color in a zone of the ITR
//
// Notes                "
//                                     Valid indices are 0 to N-1, where N is the size of the ITR.
//                                     This function modifies the "base" colours directly. The base colours have
//                                     the current brightness applied to produce the rendered colours. The 
//                                     internal brightness remains unchanged.
//
// Available            2021.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetZoneBaseColor_ITR(ITR,   // ITR object
                                    int,   // Number of the zone to set.
                                    int);  // MVIEW_COLOR


  
//-----------------------------------------------------------------------------------------------------------
// SetZoneActive_ITR Set whether a zone of the ITR is active (1) or rendered trasparent (0)
//
// Notes             Valid indices are 0 to N-1, where N is the size of the ITR.
//
// Available         2021.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetZoneActive_ITR(ITR,   // ITR object
                                 int,   // Number of the zone to set.
                                 int);  // 1: active, 0: inactive (transparent)


  
//-----------------------------------------------------------------------------------------------------------
// iGetZoneActive_ITR Get whether a zone of the ITR is active (1) or rendered trasparent (0)
//
// Notes              Valid indices are 0 to N-1, where N is the size of the ITR.
//
// Available          2021.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetZoneActive_ITR(ITR,   // ITR object
                                 int);  // Number of the zone to set.


  
//-----------------------------------------------------------------------------------------------------------
// SetZoneValue_ITR Set the value in a zone of the ITR
//
// Notes            Valid indices are 0 to N-2, where N is the size of the ITR.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetZoneValue_ITR(ITR,    // ITR object
                                int,    // Number of the zone to set.
                                real);  // The value to set





//*** endblock Generated


#endif
