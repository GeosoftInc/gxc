//*** extends 'class_empty.gxh'

#ifndef HMULTIGRID3DUTIL_GXH_DEFINED
#define HMULTIGRID3DUTIL_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class MULTIGRID3DUTIL
//
//-----------------------------------------------------------------------------------------------------------
//
// High Performance 3D Grid.
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// RBFKERNEL Definitions
//
// Math kernel to use in the RBF Computation
//
// RBFKERNEL_DISTANCE
// Distance
//
// RBFKERNEL_MULTIQUADRATIC
// Multiquadratic
//
//===========================================================================================================


#define RBFKERNEL_DISTANCE 0
#define RBFKERNEL_MULTIQUADRATIC 1





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// ImportFromXYZ_MULTIGRID3DUTIL Import XYZ file into a Multi-Voxset
//
// Available                     9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportFromXYZ_MULTIGRID3DUTIL(string,   // Name of output Voxel file
                                             RA,       // RA To import from
                                             int,      // Data Type GS_TYPES
                                             IPJ);     // Projection


  
//-----------------------------------------------------------------------------------------------------------
// ExportToXYZ_MULTIGRID3DUTIL Export a MULTIGRID3D to an XYZ File
//
// Available                   9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportToXYZ_MULTIGRID3DUTIL(string,   // Input Voxel file
                                           string,   // File Name
                                           int,      // DIRECTION3D
                                           int,      // Reverse X?
                                           int,      // Reverse Y?
                                           int,      // Reverse Z?
                                           int);     // Write Dummies?


  
//-----------------------------------------------------------------------------------------------------------
// ExportToBinary_MULTIGRID3DUTIL Export contents of MULTIGRID3D to a Binary File.
//
// Available                      9.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExportToBinary_MULTIGRID3DUTIL(string,   // Input Voxel file
                                                string,   // Binary file to write to
                                                int,      // DIRECTION3D
                                                int,      // Reverse X?
                                                int,      // Reverse Y?
                                                int,      // Reverse Z?
                                                int,      // Swap Bytes?
                                                int);     // Output Type (Geosoft Type)


  
//-----------------------------------------------------------------------------------------------------------
// ExportToBinaryEx_MULTIGRID3DUTIL Export contents of MULTIGRID3D to a Binary File, with dummy replacement.
//
// Available                        9.7
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExportToBinaryEx_MULTIGRID3DUTIL(string,   // Input Voxel file
                                                  string,   // Binary file to write to
                                                  int,      // DIRECTION3D
                                                  int,      // Reverse X?
                                                  int,      // Reverse Y?
                                                  int,      // Reverse Z?
                                                  int,      // Swap Bytes?
                                                  real,     // Replace dummy values with this value on export
                                                  int);     // Output Type (Geosoft Type)


  
//-----------------------------------------------------------------------------------------------------------
// ExportToXML_MULTIGRID3DUTIL Export a MULTIGRID3D to XML
//
// Available                   9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportToXML_MULTIGRID3DUTIL(string,   // Voxel file
                                           string);  // XML file


  
//-----------------------------------------------------------------------------------------------------------
// CheckEqualToLegacyVoxel_MULTIGRID3DUTIL Compare MULTIGRID3D to Legacy Voxel
//
// Available                               9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void CheckEqualToLegacyVoxel_MULTIGRID3DUTIL(string,   // Voxel file
                                                       string);  // Legacy Voxel file


  
//-----------------------------------------------------------------------------------------------------------
// ImportFromUBC_MULTIGRID3DUTIL Import UBC file into a MultiVoxset
//
// Available                     9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportFromUBC_MULTIGRID3DUTIL(string,   // Name of output VOX
                                             string,   // Name of UBC Mesh File
                                             string,   // Name of UBC Mod File
                                             real,     // Dummy Value
                                             IPJ);     // Projection


  
//-----------------------------------------------------------------------------------------------------------
// ImportFromGOCAD_MULTIGRID3DUTIL Imports a MultiVoxset from a GOCAD File
//
// Available                       9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportFromGOCAD_MULTIGRID3DUTIL(string,   // Name of output VOX
                                               string,   // Name of GOCAD Voxel file
                                               string,   // Propert name to import
                                               IPJ,      //
                                               int);     // GOCAD_ORIENTATION OBSOLETE as of 9.7. The UVW axes and ZPOSITIVE values are read from the *.vo header and are handled on import automatically. By default ZPOSITIVE Elevation is assumed


  
//-----------------------------------------------------------------------------------------------------------
// ListPropertiesGOCAD_MULTIGRID3DUTIL List all the properties available in this GOCAD file.
//
// Available                           9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ListPropertiesGOCAD_MULTIGRID3DUTIL(string,   // Name of GOCAD Voxel file
                                                   LST);     // List object to populate


  
//-----------------------------------------------------------------------------------------------------------
// ImportFromGDB_MULTIGRID3DUTIL Imports from a Geosoft Database
//
// Available                     9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportFromGDB_MULTIGRID3DUTIL(string,    // Name of output Voxel file
                                             DB,        // DB To import from
                                             DB_SYMB);  // Symbol to import data from


  
//-----------------------------------------------------------------------------------------------------------
// ImportFromGDBIgnoreStoredVoxelGeometry_MULTIGRID3DUTIL Imports from a Geosoft Database, but ignores any stored internal geometry
//
// Available                                              2021.1
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportFromGDBIgnoreStoredVoxelGeometry_MULTIGRID3DUTIL(string,    // Name of output Voxel file
                                                                      DB,        // DB To import from
                                                                      DB_SYMB);  // Symbol to import data from


  
//-----------------------------------------------------------------------------------------------------------
// iDatabaseContainsVoxelGeometry_MULTIGRID3DUTIL Returns 1 if the original voxel geometry is stored inside the database
//
// Available                                      2021.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iDatabaseContainsVoxelGeometry_MULTIGRID3DUTIL(DB);  // DB To import from


  
//-----------------------------------------------------------------------------------------------------------
// ImportFromVectorGDB_MULTIGRID3DUTIL Imports from a Vector Geosoft Database
//
// Available                           9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportFromVectorGDB_MULTIGRID3DUTIL(string,    // Voxel Name
                                                   DB,        // DB To import from
                                                   int,       // VECTOR_IMPORTImport XYZ, UVW or Amplitude/Inclination/Declination channels
                                                   DB_SYMB,   // Symbol to import X, U or Amplitude data from
                                                   DB_SYMB,   // Symbol to import Y, V or Inclination data from
                                                   DB_SYMB,   // Symbol to import Z, W or Declination data from
                                                   real,      // Inclination value for VOX_VECTORVOX_UVW (-90° to 90°)
                                                   real);     // Declination value for VOX_VECTORVOX_UVW (-180° to 180°)


  
//-----------------------------------------------------------------------------------------------------------
// ExportToSEGY_MULTIGRID3DUTIL Export To SEGY
//
// Available                    9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportToSEGY_MULTIGRID3DUTIL(string,   // Input Voxel file
                                            string,   // Output Segy file
                                            real);    // Sampling Internal


  
//-----------------------------------------------------------------------------------------------------------
// ExportToGDB_MULTIGRID3DUTIL Export To GDB
//
// Available                   9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportToGDB_MULTIGRID3DUTIL(string,   // Input Voxel file
                                           DB,       // Database
                                           string,   // Channel Name
                                           int,      // DIRECTION3D
                                           int,      // Reverse X?
                                           int,      // Reverse Y?
                                           int,      // Reverse Z?
                                           int);     // Write Dummies?


  
//-----------------------------------------------------------------------------------------------------------
// ExportToWA_MULTIGRID3DUTIL Export To GDB
//
// Available                  9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportToWA_MULTIGRID3DUTIL(string,   // Input Voxel file
                                          WA,       // WA File
                                          int,      // DIRECTION3D
                                          int,      // Reverse X?
                                          int,      // Reverse Y?
                                          int,      // Reverse Z?
                                          string);  // The Dummy string to write


  
//-----------------------------------------------------------------------------------------------------------
// ConvertDoubleToVector_MULTIGRID3DUTIL Convert 3 Double Voxels to a Vector Voxel
//
// Available                             9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ConvertDoubleToVector_MULTIGRID3DUTIL(string,   // Input X Voxel file
                                                     string,   // Input Y Voxel file
                                                     string,   // Input Z Voxel file
                                                     string,   // Output Vector Voxel file
                                                     real,     // Inclination
                                                     real,     // Declination
                                                     int);     // Rotated?


  
//-----------------------------------------------------------------------------------------------------------
// ConvertVectorToDouble_MULTIGRID3DUTIL Convert a Vector Voxel to 3 double Voxels
//
// Available                             9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ConvertVectorToDouble_MULTIGRID3DUTIL(string,   // Input Vector Voxel file
                                                     string,   // Output X Voxel file
                                                     string,   // Output Y Voxel file
                                                     string,   // Output Z Voxel file
                                                     int);     // Rotated?


  
//-----------------------------------------------------------------------------------------------------------
// ConvertVectorToDoubleUsingRotation_MULTIGRID3DUTIL Convert a Vector Voxel to 3 double Voxels using an external rotation. Internal rotations are ignored.
//
// Available                                          9.5
//-----------------------------------------------------------------------------------------------------------

[_public] void ConvertVectorToDoubleUsingRotation_MULTIGRID3DUTIL(string,   // Input Vector Voxel file
                                                                  string,   // Output X Voxel file
                                                                  string,   // Output Y Voxel file
                                                                  string,   // Output Z Voxel file
                                                                  real,     // Inclination
                                                                  real);    // Declination


  
//-----------------------------------------------------------------------------------------------------------
// ConvertThematicToDouble_MULTIGRID3DUTIL Convert Thematic MultiVoxset to Double MultiVoxset
//
// Available                               9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ConvertThematicToDouble_MULTIGRID3DUTIL(string,   // Input grid3d filename
                                                       VV,       // Translation VV handle
                                                       string);  // Output grid3d filename


  
//-----------------------------------------------------------------------------------------------------------
// ConvertDoubleToThematic_MULTIGRID3DUTIL Convert Double MultiVoxset to Thematic MultiVoxset
//
// Available                               9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ConvertDoubleToThematic_MULTIGRID3DUTIL(string,   // Input grid3d filename
                                                       VV,       // Translation VV handle
                                                       TPAT,     // TPAT object
                                                       string);  // Output grid3d filename


  
//-----------------------------------------------------------------------------------------------------------
// ConvertVelocityToDensity_MULTIGRID3DUTIL Convert Velocity MultiVoxset to Density MultiVoxset
//
// Available                                9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ConvertVelocityToDensity_MULTIGRID3DUTIL(string,   // Input grid3d filename
                                                        real,     // 1.0, if this grid3d is in meters per second. Otherwise, a value by which each input cell is multiplied to convert it into meters per second.
                                                        real,     // Lower bound on velocity values, in meters per second. If the input value (after being pre-multiplied by dInputScalingFactor) is less than this value, the output cell value will be DUMMY.
                                                        real,     // Upper bound on velocity values, in meters per second. If the input value (after being pre-multiplied by dInputScalingFactor) is greater than this value, the output cell value will be DUMMY.
                                                        real,     // Coefficient of fifth-order polynomial term.
                                                        real,     // Coefficient of fourth-order polynomial term.
                                                        real,     // Coefficient of third-order polynomial term.
                                                        real,     // Coefficient of second-order polynomial term.
                                                        real,     // Coefficient of first-order polynomial term.
                                                        real,     // Constant offset of output.
                                                        real,     // 1.0, to produce an output grid3d that has units of g/cm^3. If different units are desired, pass in a different value, which will be multiplied into each output grid3d cell.
                                                        string);  // Output grid3d filename


  
//-----------------------------------------------------------------------------------------------------------
// ConvertDensityToVelocity_MULTIGRID3DUTIL Convert Density MultiVoxset to Velocity MultiVoxset
//
// Available                                9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ConvertDensityToVelocity_MULTIGRID3DUTIL(string,   // Input grid3d filename
                                                        real,     // 1.0, if this grid3d is in meters per second. Otherwise, a value by which each input cell is multiplied to convert it into meters per second.
                                                        real,     // Lower bound on velocity values, in meters per second. If the input value (after being pre-multiplied by dInputScalingFactor) is less than this value, the output cell value will be DUMMY.
                                                        real,     // Upper bound on velocity values, in meters per second. If the input value (after being pre-multiplied by dInputScalingFactor) is greater than this value, the output cell value will be DUMMY.
                                                        real,     // Coefficient of fifth-order polynomial term.
                                                        real,     // Coefficient of fourth-order polynomial term.
                                                        real,     // Coefficient of third-order polynomial term.
                                                        real,     // Coefficient of second-order polynomial term.
                                                        real,     // Coefficient of first-order polynomial term.
                                                        real,     // Constant offset of output.
                                                        real,     // 1.0, to produce an output grid3d that has units of g/cm^3. If different units are desired, pass in a different value, which will be multiplied into each output grid3d cell.
                                                        string);  // Output grid3d filename


  
//-----------------------------------------------------------------------------------------------------------
// GetGOCADLocation_MULTIGRID3DUTIL Get the location of a grid3d with origin and scaled xyz vectors for use with GOCAD.
//
// Available                        9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GetGOCADLocation_MULTIGRID3DUTIL(string,     // Input grid3d filename
                                                var real,   // Origin X
                                                var real,   // Origin Y
                                                var real,   // Origin Z
                                                var real,   // VectX X
                                                var real,   // VectX Y
                                                var real,   // VectX Z
                                                var real,   // VectY X
                                                var real,   // VectY Y
                                                var real,   // VectY Z
                                                var real,   // VectZ X
                                                var real,   // VectZ Y
                                                var real);  // VectZ Z


  
//-----------------------------------------------------------------------------------------------------------
// CreateDoubleConstant_MULTIGRID3DUTIL Generate a double MultiVoxset with a constant value
//
// Available                            9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void CreateDoubleConstant_MULTIGRID3DUTIL(string,   // Name of output Voxel File
                                                    real,     // Constant Value to use - DUMMY for a trully sparse grid3d
                                                    real,     // Origin X
                                                    real,     // Origin Y
                                                    real,     // Origin Z
                                                    real,     // Cell Size X
                                                    real,     // Cell Size Y
                                                    real,     // Cell Size Z
                                                    int,      // Cell Count X
                                                    int,      // Cell Count Y
                                                    int,      // Cell Count Z
                                                    IPJ);     // Projection


  
//-----------------------------------------------------------------------------------------------------------
// CreateDoubleConstantCopy_MULTIGRID3DUTIL Generate a double MultiVoxset with a constant value based on an input voxel
//
// Available                                9.5
//-----------------------------------------------------------------------------------------------------------

[_public] void CreateDoubleConstantCopy_MULTIGRID3DUTIL(string,   // Name of output Voxel File
                                                        real,     // Constant Value to use - DUMMY for a trully sparse grid3d
                                                        string);  // Name of voxel to model


  
//-----------------------------------------------------------------------------------------------------------
// CreateThematicConstant_MULTIGRID3DUTIL Generate a double MultiVoxset with a constant value
//
// Available                              9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void CreateThematicConstant_MULTIGRID3DUTIL(string,   // Name of output Voxel File
                                                      int,      // Constant Value to use - DUMMY for a trully sparse grid3d
                                                      real,     // Origin X
                                                      real,     // Origin Y
                                                      real,     // Origin Z
                                                      real,     // Cell Size X
                                                      real,     // Cell Size Y
                                                      real,     // Cell Size Z
                                                      int,      // Cell Count X
                                                      int,      // Cell Count Y
                                                      int,      // Cell Count Z
                                                      IPJ);     // Projection


  
//-----------------------------------------------------------------------------------------------------------
// CreateVectorConstant_MULTIGRID3DUTIL Generate a double MultiVoxset with a constant value
//
// Available                            9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void CreateVectorConstant_MULTIGRID3DUTIL(string,   // Name of output Voxel File
                                                    real,     // X Constant Value to use - DUMMY for a trully sparse grid3d
                                                    real,     // Y Constant Value to use - DUMMY for a trully sparse grid3d
                                                    real,     // Z Constant Value to use - DUMMY for a trully sparse grid3d
                                                    real,     // Origin X
                                                    real,     // Origin Y
                                                    real,     // Origin Z
                                                    real,     // Cell Size X
                                                    real,     // Cell Size Y
                                                    real,     // Cell Size Z
                                                    int,      // Cell Count X
                                                    int,      // Cell Count Y
                                                    int,      // Cell Count Z
                                                    IPJ);     // Projection


  
//-----------------------------------------------------------------------------------------------------------
// CreateDoubleConstantVV_MULTIGRID3DUTIL Generate a double MultiVoxset with a constant value and non-uniform cell sizes
//
// Available                              9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void CreateDoubleConstantVV_MULTIGRID3DUTIL(string,   // Name of output Voxel
                                                      real,     // The contant Value to fill with - DUMMY for a trully sparse grid3d
                                                      real,     // Origin X
                                                      real,     // Origin Y
                                                      real,     // Origin Z
                                                      VV,       // Cell Sizes X
                                                      VV,       // Cell Sizes Y
                                                      VV,       // Cell Sizes Z
                                                      IPJ);     // Projection


  
//-----------------------------------------------------------------------------------------------------------
// CreateThematicConstantVV_MULTIGRID3DUTIL Generate a double MultiVoxset with a constant value and non-uniform cell sizes
//
// Available                                9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void CreateThematicConstantVV_MULTIGRID3DUTIL(string,   // Name of output Voxel
                                                        int,      // The contant Value to fill with - DUMMY for a trully sparse grid3d
                                                        real,     // Origin X
                                                        real,     // Origin Y
                                                        real,     // Origin Z
                                                        VV,       // Cell Sizes X
                                                        VV,       // Cell Sizes Y
                                                        VV,       // Cell Sizes Z
                                                        IPJ);     // Projection


  
//-----------------------------------------------------------------------------------------------------------
// CreateVectorConstantVV_MULTIGRID3DUTIL Generate a double MultiVoxset with a constant value and non-uniform cell sizes
//
// Available                              9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void CreateVectorConstantVV_MULTIGRID3DUTIL(string,   // Name of output Voxel
                                                      real,     // The X contant Value to fill with - DUMMY for a trully sparse grid3d
                                                      real,     // The Y contant Value to fill with - DUMMY for a trully sparse grid3d
                                                      real,     // The Z contant Value to fill with - DUMMY for a trully sparse grid3d
                                                      real,     // Origin X
                                                      real,     // Origin Y
                                                      real,     // Origin Z
                                                      VV,       // Cell Sizes X
                                                      VV,       // Cell Sizes Y
                                                      VV,       // Cell Sizes Z
                                                      IPJ);     // Projection


  
//-----------------------------------------------------------------------------------------------------------
// ExportToVoxel_MULTIGRID3DUTIL Exports a Multi-Voxset into a Voxel
//
// Available                     9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportToVoxel_MULTIGRID3DUTIL(string,   // Project file
                                             string,   // Multi-Voxset UUID
                                             string,   // Multi-Voxset attribute
                                             string);  // Output Voxel file


  
//-----------------------------------------------------------------------------------------------------------
// ImportFromVoxel_MULTIGRID3DUTIL Import a Voxel directly into a Multi-Voxset
//
// Available                       9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportFromVoxel_MULTIGRID3DUTIL(string,       // Project file
                                               string,       // Input Voxel file
                                               string,       // Multi-Voxset attribute
                                               var string,   // UUID string returned
                                               int);         // Size of UUID string
#define mportFromVoxel_MULTIGRID3DUTIL(project_file, grid3d_file, multi_voxset_attribute, p_uuid_string) ImportFromVoxel_MULTIGRID3DUTIL(project_file, grid3d_file, multi_voxset_attribute, p_uuid_string, sizeof(p_uuid_string))


  
//-----------------------------------------------------------------------------------------------------------
// ImportFromDATAMINE_MULTIGRID3DUTIL Create a Geosoft Voxel file from a Datamine block model file.
//
// Notes                              Create a Geosoft Voxel file from a Datamine block model file.
//
// Available                          9.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ImportFromDATAMINE_MULTIGRID3DUTIL(string,   // Datamine file name
                                                    string,   // Field to use for data
                                                    IPJ,      // Projection to set
                                                    string);  // Output grid3d file name


  
//-----------------------------------------------------------------------------------------------------------
// rComputeDefaultCellSize_MULTIGRID3DUTIL Used if the user does not provide a default cell size.
//
// Returns                                 Default Cell Size
//
// Notes                                   Compute a default cell size for a grid3d given a data range.
//
// Available                               9.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] real rComputeDefaultCellSize_MULTIGRID3DUTIL(real,   // MinX
                                                         real,   // MaxX
                                                         real,   // MinY
                                                         real,   // MaxY
                                                         real,   // MinZ
                                                         real);  // MaxZ


  
//-----------------------------------------------------------------------------------------------------------
// Filter_MULTIGRID3DUTIL Apply a 3D filter to a grid3d.
//
// Available              9.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Filter_MULTIGRID3DUTIL(string,   // Name of the input grid3d
                                        string,   // Name of the output grid3d
                                        int,      // FILTER3D
                                        string,   // Filter file, if filter is VOX_FILTER3D_FILE
                                        int,      // Number of filter passes
                                        int);     // (1: interpolate dummies)


  
//-----------------------------------------------------------------------------------------------------------
// InvertZ_MULTIGRID3DUTIL Invert the Z values in the Grid3d.
//
// Available               9.5
//-----------------------------------------------------------------------------------------------------------

[_licensed] void InvertZ_MULTIGRID3DUTIL(string,   // Name of the input grid3d
                                         string);  // Name of the output grid3d


  
//-----------------------------------------------------------------------------------------------------------
// ExtractDEM_MULTIGRID3DUTIL Extract a DEM grid from a voxel.
//
// Available                  9.5
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExtractDEM_MULTIGRID3DUTIL(string,   // Name of the input grid3d
                                            string);  // Name of the output grid


  
//-----------------------------------------------------------------------------------------------------------
// ClipToPolygon_MULTIGRID3DUTIL Invert the Z values in the Grid3d.
//
// Available                     9.5
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ClipToPolygon_MULTIGRID3DUTIL(string,   // Name of the input grid3d
                                               string,   // Name of the output grid3d
                                               PLY,      // Polygons to clip to
                                               int);     // Clip Dummies (1) or leave them (0)


  
//-----------------------------------------------------------------------------------------------------------
// GridDirectFromGDB_MULTIGRID3DUTIL Create a grid3d using direct gridding.
//
// Notes                             The Z and Data channels may be array channels. If they are, the array sizes must match.
//
// Available                         9.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridDirectFromGDB_MULTIGRID3DUTIL(string,    // Output grid3d filename
                                                   real,      // Voxel origin X
                                                   real,      // Voxel origin Y
                                                   real,      // Voxel origin Z
                                                   int,       // Voxel cell count X
                                                   int,       // Voxel cell count Y
                                                   int,       // Voxel cell count Z
                                                   real,      // Voxel cell size X
                                                   real,      // Voxel cell size Y
                                                   real,      // Voxel cell size Z
                                                   int,       // MULTIGRID3D_DIRECTGRID_METHOD
                                                   DB,        // Database
                                                   DB_SYMB,   // X channel [DB_LOCK_READONLY]
                                                   DB_SYMB,   // Y channel [DB_LOCK_READONLY]
                                                   DB_SYMB,   // Z channel [DB_LOCK_READONLY]
                                                   DB_SYMB);  // Data channel [DB_LOCK_READONLY]


  
//-----------------------------------------------------------------------------------------------------------
// GridIDWFromGDB_MULTIGRID3DUTIL Create a grid3d using IDW gridding.
//
// Notes                          The Z and Data channels may be array channels. If they are, the array sizes must match.
//                                                  3D cells take on the averaged values within a search radius, weighted inversely by distance.
//                                
//                                               Weighting can be controlled using the power and slope properties;
//                                
//                                               weighting = 1 / (distance^wtpower + 1/slope) where distance is in
//                                               units of grid cells (X dimenstion). Default is 0.0,
//                                
//                                               If the blanking distance is set, all cells whose center point is not within the blanking distance of
//                                               at least one data point are set to dummy.
//
// Available                      9.5
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridIDWFromGDB_MULTIGRID3DUTIL(string,    // Output grid3d filename
                                                real,      // Voxel origin X
                                                real,      // Voxel origin Y
                                                real,      // Voxel origin Z
                                                int,       // Voxel cell count X
                                                int,       // Voxel cell count Y
                                                int,       // Voxel cell count Z
                                                real,      // Voxel cell size X
                                                real,      // Voxel cell size Y
                                                real,      // Voxel cell size Z
                                                DB,        // Database
                                                DB_SYMB,   // X channel [DB_LOCK_READONLY]
                                                DB_SYMB,   // Y channel [DB_LOCK_READONLY]
                                                DB_SYMB,   // Z channel [DB_LOCK_READONLY]
                                                DB_SYMB,   // Data channel [DB_LOCK_READONLY]
                                                real,      // Weight Power (default 2)
                                                real,      // Weight Slope (default 1)
                                                real,      // Distance weighting limit (default = 4 * CUBE_ROOT(DX*DY*DZ))
                                                real,      // Dummy values farther from data than this distance. (default = 4 * CUBE_ROOT(DX*DY*DZ))
                                                int,       // Apply log transform to input data before gridding (0:No (default), 1:Yes)
                                                real,      // One of VV_LOG_BASE_10 (default) or :const:`VV_LOG_BASE_E
                                                int);      // One of VV_LOG_NEGATIVE_NO (default) or VV_LOG_NEGATIVE_YES


  
//-----------------------------------------------------------------------------------------------------------
// GetDataExtents_MULTIGRID3DUTIL Get the voxel size that has non-dummy data.
//
// Notes                          Find the non-dummy volume of a MULTIGRID3D object. If the voxel is all dummies,
//                                returns iMAX for the minima, and iMIN for the maxima.
//
// Available                      9.5
//-----------------------------------------------------------------------------------------------------------

[_public] void GetDataExtents_MULTIGRID3DUTIL(string,    // input filename
                                              var int,   // Index of minimum valid data in X.
                                              var int,   // Index of minimum valid data in Y.
                                              var int,   // Index of minimum valid data in Z.
                                              var int,   // Index of maximum valid data in X.
                                              var int,   // Index of maximum valid data in Y.
                                              var int);  // Index of maximum valid data in Z.


  
//-----------------------------------------------------------------------------------------------------------
// GetDataGroundExtents_MULTIGRID3DUTIL Get the voxel size in ground units that has non-dummy data.
//
// Notes                                Find the non-dummy volume of a MULTIGRID3D object. If the voxel is all dummies,
//                                      returns iMAX for the minima, and iMIN for the maxima.
//
// Available                            9.5
//-----------------------------------------------------------------------------------------------------------

[_public] void GetDataGroundExtents_MULTIGRID3DUTIL(string,     // input filename
                                                    var real,   // Ground location of minimum valid data in X.
                                                    var real,   // Ground location of minimum valid data in Y.
                                                    var real,   // Ground location of minimum valid data in Z.
                                                    var real,   // Ground location of maximum valid data in X.
                                                    var real,   // Ground location of maximum valid data in Y.
                                                    var real);  // Ground location of maximum valid data in Z.


  
//-----------------------------------------------------------------------------------------------------------
// GridPointsFromGDB_MULTIGRID3DUTIL Grid a grid3d from a database using kriging.
//
// Available                         9.5
//-----------------------------------------------------------------------------------------------------------

[_public] void GridPointsFromGDB_MULTIGRID3DUTIL(string,    // Output grid3d filename
                                                 string,    // Output error grid3d filename
                                                 real,      // Cell size (DUMMY for default)
                                                 int,       // Variogram Only
                                                 real,      // Minimum Search Radius (DUMMY for none)
                                                 real,      // Maximum Search Radius (DUMMY for none)
                                                 int,       // Minimum Search Points
                                                 int,       // Maximum Search Points
                                                 int,       // Model number 1-power, 2-sperical, 3-gaussian, 4-exponential
                                                 real,      // Power
                                                 real,      // Slope
                                                 real,      // Range
                                                 real,      // Nugget
                                                 real,      // Sill
                                                 int,       // GS_TYPES
                                                 DB,        // Database
                                                 DB_SYMB,   // X channel [DB_LOCK_READONLY]
                                                 DB_SYMB,   // Y channel [DB_LOCK_READONLY]
                                                 DB_SYMB,   // Z channel [DB_LOCK_READONLY]
                                                 DB_SYMB,   // Data channel [DB_LOCK_READONLY]
                                                 IPJ);      //


  
//-----------------------------------------------------------------------------------------------------------
// GridPointsZFromGDB_MULTIGRID3DUTIL Grid a grid3d from a database (using variable Z's)
//
// Available                          9.5
//-----------------------------------------------------------------------------------------------------------

[_public] void GridPointsZFromGDB_MULTIGRID3DUTIL(string,    // Output grid3d filename
                                                  string,    // Output error grid3d filename
                                                  real,      // Cell size (DUMMY for default)
                                                  string,    // Cell size in Z ("" for default)
                                                  int,       // Variogram Only
                                                  real,      // Minimum Search Radius (DUMMY for none)
                                                  real,      // Maximum Search Radius (DUMMY for none)
                                                  int,       // Minimum Search Points
                                                  int,       // Maximum Search Points
                                                  int,       // Model number 1-power, 2-sperical, 3-gaussian, 4-exponential
                                                  real,      // Power
                                                  real,      // Slope
                                                  real,      // Range
                                                  real,      // Nugget
                                                  real,      // Sill
                                                  int,       // GS_TYPES
                                                  DB,        // Database
                                                  DB_SYMB,   // X channel [DB_LOCK_READONLY]
                                                  DB_SYMB,   // Y channel [DB_LOCK_READONLY]
                                                  DB_SYMB,   // Z channel [DB_LOCK_READONLY]
                                                  DB_SYMB,   // Data channel [DB_LOCK_READONLY]
                                                  IPJ);      //


  
//-----------------------------------------------------------------------------------------------------------
// GridPointsZExFromGDB_MULTIGRID3DUTIL Grid a grid3d from a database (using variable Z's)
//
// Available                            9.5
//-----------------------------------------------------------------------------------------------------------

[_public] void GridPointsZExFromGDB_MULTIGRID3DUTIL(string,     // Output grid3d filename
                                                    string,     // Output error grid3d filename
                                                    real,       // Cell size (DUMMY for default)
                                                    string,     // Cell size in Z ("" for default)
                                                    int,        // Variogram Only
                                                    real,       // Minimum Search Radius (DUMMY for none)
                                                    real,       // Maximum Search Radius (DUMMY for none)
                                                    int,        // Minimum Search Points
                                                    int,        // Maximum Search Points
                                                    int,        // Model number 1-power, 2-sperical, 3-gaussian, 4-exponential
                                                    real,       // Power
                                                    var real,   // Slope
                                                    var real,   // Range
                                                    real,       // Nugget
                                                    var real,   // Sill
                                                    real,       // Strike
                                                    real,       // Dip
                                                    real,       // Plunge
                                                    real,       // Strike Weight
                                                    real,       // Dip Plane Weight
                                                    int,        // GS_TYPES
                                                    DB,         // Database
                                                    DB_SYMB,    // X channel [DB_LOCK_READONLY]
                                                    DB_SYMB,    // Y channel [DB_LOCK_READONLY]
                                                    DB_SYMB,    // Z channel [DB_LOCK_READONLY]
                                                    DB_SYMB,    // Data channel [DB_LOCK_READONLY]
                                                    IPJ);       //


  
//-----------------------------------------------------------------------------------------------------------
// LogGridPointsZExFromGDB_MULTIGRID3DUTIL Log grid a grid3d from a database (using variable Z's)
//
// Available                               9.5
//-----------------------------------------------------------------------------------------------------------

[_public] void LogGridPointsZExFromGDB_MULTIGRID3DUTIL(string,     // Output grid3d filename
                                                       string,     // Output error grid3d filename
                                                       real,       // Cell size (DUMMY for default)
                                                       string,     // Cell size in Z ("" for default)
                                                       int,        // Variogram Only
                                                       real,       // Minimum Search Radius (DUMMY for none)
                                                       real,       // Maximum Search Radius (DUMMY for none)
                                                       int,        // Minimum Search Points
                                                       int,        // Maximum Search Points
                                                       int,        // Model number 1-power, 2-sperical, 3-gaussian, 4-exponential
                                                       real,       // Power
                                                       var real,   // Slope
                                                       var real,   // Range
                                                       real,       // Nugget
                                                       var real,   // Sill
                                                       real,       // Strike
                                                       real,       // Dip
                                                       real,       // Plunge
                                                       real,       // Strike Weight
                                                       real,       // Dip Plane Weight
                                                       int,        // VOX_GRID_LOGOPT Log Option
                                                       real,       // Minimum log
                                                       int,        // GS_TYPES
                                                       DB,         // Database
                                                       DB_SYMB,    // X channel [DB_LOCK_READONLY]
                                                       DB_SYMB,    // Y channel [DB_LOCK_READONLY]
                                                       DB_SYMB,    // Z channel [DB_LOCK_READONLY]
                                                       DB_SYMB,    // Data channel [DB_LOCK_READONLY]
                                                       IPJ);       //


  
//-----------------------------------------------------------------------------------------------------------
// KrigFromGDB_MULTIGRID3DUTIL A more compact and extensible form of LogGridPointsZExFromGDB_MULTIGRID3DUTIL.
//
// Notes                       Optional Parameters.
//                             
//                             If these values are not set in the REG, then default parameters will be used.
//                             
//                             ERROR_VOXEL:		Output error grid3d filename ("" for none)
//                             CELLSIZEZ:      Z Cell size string (space delimited, "" for default)
//                             RADIUS_MIN:		Minimum Search Radius (REAL) (Default = 4) (Blanking Distance)
//                             RADIUS_MAX:		Maximum Search Radius (REAL) (Default = 16)
//                             SEARCH_MIN:		Minimum Search Points (INT) (Default = 16)
//                             SEARCH_MAX:		Maximum Search Points (INT) (Default = 32)
//                             VARIOGRAM_ONLY: Set to 1 to calculate the variogram only (INT) (Default = 0)
//                             MODEL:				Variogram Model number 1-power, 2-sperical, 3-gaussian, 4-exponential  (INT) (Default = 2)
//                             POWER:          Power (Default = DUMMY)
//                             SLOPE:          Slope (REAL) (if input is DUMMY, value calculated and set on return)
//                             RANGE:          Range (REAL) (if input is DUMMY, value calculated and set on return)
//                             SILL :          Sill (REAL) (if input is DUMMY, value calculated and set on return)
//                             STRIKE:				Strike (REAL) (Default = 0)
//                             DIP:					Dip (REAL)	(Default = 90)
//                             PLUNGE:				Plunge (REAL) (Default = 0)
//                             STRIKE WEIGHT:	Along-Strike Weight (REAL) (Default = 1)
//                             DIP_WEIGHT:      Down-Dip Weight (REAL) (Default = 1)
//                             LOG_OPT:			One of VOX_GRID_LOGOPT (Default = 0)
//                             MIN_LOG:			Log Minimum (REAL)	(Default = 1)
//                             MIN_X:				Minimum X (REAL) (default = DUMMY to determine from the data. If input, nearest lt. or eq. multiple of cell size chosen)
//                             MAX_X:				Maximum X (REAL) (default = DUMMY to determine from the data. If input, nearest gt. or eq. multiple of cell size chosen)
//                             MIN_Y:				Minimum Y (REAL) (default = DUMMY to determine from the data. If input, nearest lt. or eq. external multiple of cell size chosen)
//                             MAX_Y:				Maximum Y (REAL) (default = DUMMY to determine from the data. If input, nearest gt. or eq. multiple of cell size chosen)
//                             MIN_Z:				Minimum Z (REAL) (default = DUMMY to determine from the data. If input, nearest lt. or eq. multiple of cell size chosen)
//                             MAX_Z:				Maximum Z (REAL) (default = DUMMY to determine from the data. If input, nearest gt. or eq. multiple of cell size chosen)A more compact and extensible form of LogGridPointsZEx_VOX. Only the most
//                             basic parameters are entered directly. Optional parameters are passed via a REG object.
//
// Available                   9.5
//-----------------------------------------------------------------------------------------------------------

[_public] void KrigFromGDB_MULTIGRID3DUTIL(string,    // Output grid3d filename
                                           real,      // Cell size (DUMMY for default)
                                           int,       // GS_TYPES
                                           DB,        // Database
                                           DB_SYMB,   // X channel [DB_LOCK_READONLY]
                                           DB_SYMB,   // Y channel [DB_LOCK_READONLY]
                                           DB_SYMB,   // Z channel [DB_LOCK_READONLY]
                                           DB_SYMB,   // Data channel [DB_LOCK_READONLY]
                                           IPJ,       //
                                           REG);      //


  
//-----------------------------------------------------------------------------------------------------------
// CreateSubset_MULTIGRID3DUTIL Create a new MULTIGRID3D that is a subset of an exisiting MULTIGRID3D.
//
// Notes                        Creates a MULTIGRID3D object that is a subset .
//
// Available                    9.5
//-----------------------------------------------------------------------------------------------------------

[_public] MULTIGRID3D CreateSubset_MULTIGRID3DUTIL(string,   // File Name of the MULTIGRID3D that will be subset
                                                   string,   // File Name of the MULTIGRID3D that will be created
                                                   int,      // Starting location in X.
                                                   int,      // Starting location in Y.
                                                   int,      // Starting location in Z.
                                                   int,      // Number of items to copy in X.
                                                   int,      // Number of items to copy in Y.
                                                   int);     // Number of items to copy in Z.


  
//-----------------------------------------------------------------------------------------------------------
// CreateSubsetFromRealExtents_MULTIGRID3DUTIL Create a new MULTIGRID3D that is a subset of the non-dummy extents.
//
// Notes                                       Creates a MULTIGRID3D object that is a subset with all dummy data regions removed.
//
// Available                                   9.5
//-----------------------------------------------------------------------------------------------------------

[_public] MULTIGRID3D CreateSubsetFromRealExtents_MULTIGRID3DUTIL(string,   // File Name of the MULTIGRID3D that will be subset
                                                                  string);  // File Name of the MULTIGRID3D that will be created



//===========================================================================================================
//
// Deprecated Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// GenerateRBF_MULTIGRID3DUTIL Creates a VOXEL from an database using RBF.
//
// Available                   9.5
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GenerateRBF_MULTIGRID3DUTIL(DB,       // Handle to a database
                                             string,   // Name of the output grid3d
                                             string,   // Channel to grid`
                                             real,     // Cell size
                                             real,     // Error Tolerance
                                             int,      // Maximum number of iterations (>0)
                                             int,      // Desample data (1) or use as is (0)
                                             int,      // RBFKERNEL
                                             real);    // Kernel Epsilon





//*** endblock Generated


#endif
