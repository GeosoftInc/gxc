//*** extends 'class_empty.gxh'

#ifndef HVAU_GXH_DEFINED
#define HVAU_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class VAU
//
//-----------------------------------------------------------------------------------------------------------
//
// This is not a class. These are methods that work on
// data stored in VA objects
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// VAU_PRUNE Definitions
//
// Prune Options
//
// VAU_PRUNE_DUMMY
// 
//
// VAU_PRUNE_VALID
// 
//
//===========================================================================================================


#define VAU_PRUNE_DUMMY 0
#define VAU_PRUNE_VALID 1





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// CondDepthTEM_VAU Calculate TEM apparent conductivity and depth
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void CondDepthTEM_VAU(VA,     // Response channel (microvolts)
                                  VA,     // Time channel (milliseconds)
                                  VA,     // Conductivity channel (siemen/m)
                                  VA,     // Depth (m)
                                  real,   // Transmitter current
                                  int,    // Flag  Transmitter defined by moment (0) or by 4 VVs (1) below
                                  VV,     // Minimum X to define transmitter loop layout (moment)
                                  VV,     // Minimum Y to define transmitter loop layout (moment)
                                  VV,     // Maximum X to define transmitter loop layout (moment)
                                  VV,     // Maximum Y to define transmitter loop layout (moment)
                                  real,   // Transmitter moment (square meters), dummy if the above flag is 1
                                  real,   // Receiver moment (square meters)
                                  int);   // TEM_ARRAY


  
//-----------------------------------------------------------------------------------------------------------
// Prune_VAU Prune values from a VA based on reference VA
//
// Notes     Pruning will shorten the VA by removing values
//           that are either dummy or non-dummy in the reference
//           VA
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Prune_VAU(VA,    // VA to prune
                           VV,    // Reference VV
                           int);  // VAU_PRUNE


  
//-----------------------------------------------------------------------------------------------------------
// SectionCondTEM_VAU Derive TEM apparent conductivity section at given depth
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void SectionCondTEM_VAU(VA,     // Conductivity VA,GS_DOUBLE
                                    VA,     // Depth VA,GS_DOUBLE
                                    real,   // Depth derive TEM section (same unit as Depth VA)
                                    VV);    // Returned conductivity at given depth,GS_DOUBLE


  
//-----------------------------------------------------------------------------------------------------------
// TotalVector_VAU Calculate total vector for X,Y and Z components
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void TotalVector_VAU(VA,   // X Component object
                                 VA,   // Y Component object
                                 VA,   // Z Component object
                                 VA);  // Returned total vector VA object





//*** endblock Generated


#endif
