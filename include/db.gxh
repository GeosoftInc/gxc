//*** extends 'class_empty.gxh'

#ifndef HDB_GXH_DEFINED
#define HDB_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class DB
//
//-----------------------------------------------------------------------------------------------------------
//
// The DB class is used to create, open and work with databases and database symbols.
// Database symbols are objects inside databases, such as lines, channels and blobs
//
//-----------------------------------------------------------------------------------------------------------
// Notes
//
// The following defines are not used by any methods but are
// used by GX's:
// 
// DB_ACTIVITY_BLOB
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block

#define LOCK_RW(A,B) LockSymb_DB(A,B,DB_LOCK_READWRITE,DB_WAIT_NONE)
#define LOCK_R(A,B)  LockSymb_DB(A,B,DB_LOCK_READONLY,DB_WAIT_NONE)
#define UNLOCK(A,B)  UnLockSymb_DB(A,B)

//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// DB_ACTIVITY_BLOB Definitions
//
// Activity Blob
//
// DB_ACTIVITY_BLOB
// 
//
//===========================================================================================================


#define DB_ACTIVITY_BLOB "OE.DB_ACTIVITY_LOG"


//===========================================================================================================
//
// DB_CATEGORY_BLOB Definitions
//
// Blob Categories
//
// DB_CATEGORY_BLOB_NORMAL
// 
//
//===========================================================================================================


#define DB_CATEGORY_BLOB_NORMAL 0


//===========================================================================================================
//
// DB_CATEGORY_CHAN Definitions
//
// Channel Categories
// For STRING type channels, use negative integers
// to specify channel width. For example, use -10
// to define a string channel with up to 10 characters.
// Use the GS_SIMPLE_TYPE() macro to convert to INT,REAL or string.
//
// DB_CATEGORY_CHAN_BYTE
// 
//
// DB_CATEGORY_CHAN_USHORT
// 
//
// DB_CATEGORY_CHAN_SHORT
// 
//
// DB_CATEGORY_CHAN_LONG
// 
//
// DB_CATEGORY_CHAN_FLOAT
// 
//
// DB_CATEGORY_CHAN_DOUBLE
// 
//
// DB_CATEGORY_CHAN_UBYTE
// 
//
// DB_CATEGORY_CHAN_ULONG
// 
//
// DB_CATEGORY_CHAN_LONG64
// 
//
// DB_CATEGORY_CHAN_ULONG64
// 
//
//===========================================================================================================


#define DB_CATEGORY_CHAN_BYTE GS_BYTE
#define DB_CATEGORY_CHAN_USHORT GS_USHORT
#define DB_CATEGORY_CHAN_SHORT GS_SHORT
#define DB_CATEGORY_CHAN_LONG GS_LONG
#define DB_CATEGORY_CHAN_FLOAT GS_FLOAT
#define DB_CATEGORY_CHAN_DOUBLE GS_DOUBLE
#define DB_CATEGORY_CHAN_UBYTE GS_UBYTE
#define DB_CATEGORY_CHAN_ULONG GS_ULONG
#define DB_CATEGORY_CHAN_LONG64 GS_LONG64
#define DB_CATEGORY_CHAN_ULONG64 GS_ULONG64


//===========================================================================================================
//
// DB_CATEGORY_LINE Definitions
//
// Line Categories
//
// DB_CATEGORY_LINE_FLIGHT
// 
//
// DB_CATEGORY_LINE_GROUP
// 
//
// DB_CATEGORY_LINE_NORMAL
// Same as DB_CATEGORY_LINE_FLIGHT
//
//===========================================================================================================


#define DB_CATEGORY_LINE_FLIGHT 100
#define DB_CATEGORY_LINE_GROUP 200
#define DB_CATEGORY_LINE_NORMAL DB_CATEGORY_LINE_FLIGHT


//===========================================================================================================
//
// DB_CATEGORY_USER Definitions
//
// User Categories
//
// DB_CATEGORY_USER_NORMAL
// 
//
//===========================================================================================================


#define DB_CATEGORY_USER_NORMAL 0


//===========================================================================================================
//
// DB_CHAN_FORMAT Definitions
//
// Channel formats
//
// DB_CHAN_FORMAT_NORMAL
// 
//
// DB_CHAN_FORMAT_EXP
// 
//
// DB_CHAN_FORMAT_TIME
// 
//
// DB_CHAN_FORMAT_DATE
// 
//
// DB_CHAN_FORMAT_GEOGR
// 
//
// DB_CHAN_FORMAT_SIGDIG
// 
//
// DB_CHAN_FORMAT_HEX
// 
//
//===========================================================================================================


#define DB_CHAN_FORMAT_NORMAL FORMAT_DECIMAL
#define DB_CHAN_FORMAT_EXP FORMAT_EXP
#define DB_CHAN_FORMAT_TIME FORMAT_TIME_COLON
#define DB_CHAN_FORMAT_DATE FORMAT_DATE_YYYYMMDD
#define DB_CHAN_FORMAT_GEOGR FORMAT_GEOGRAPHIC
#define DB_CHAN_FORMAT_SIGDIG FORMAT_SIG_DIG
#define DB_CHAN_FORMAT_HEX 6


//===========================================================================================================
//
// DB_CHAN_PROTECTION Definitions
//
// Channel Read-only Protection Status
//
// DB_CHAN_UNPROTECTED
// 
//
// DB_CHAN_PROTECTED
// 
//
//===========================================================================================================


#define DB_CHAN_UNPROTECTED 0
#define DB_CHAN_PROTECTED 1


//===========================================================================================================
//
// DB_CHAN_SYMBOL Definitions
//
// Channel symbol for special channels
//
// DB_CHAN_X
// 
//
// DB_CHAN_Y
// 
//
// DB_CHAN_Z
// 
//
//===========================================================================================================


#define DB_CHAN_X 0
#define DB_CHAN_Y 1
#define DB_CHAN_Z 2


//===========================================================================================================
//
// DB_COMP Definitions
//
// Supported compression levels
//
// DB_COMP_NONE
// 
//
// DB_COMP_SPEED
// 
//
// DB_COMP_SIZE
// 
//
//===========================================================================================================


#define DB_COMP_NONE 0
#define DB_COMP_SPEED 1
#define DB_COMP_SIZE 2


//===========================================================================================================
//
// DB_COORDPAIR Definitions
//
// Used to indicate the matching coordinate pair of a channel.
//
// DB_COORDPAIR_NONE
// 
//
// DB_COORDPAIR_X
// 
//
// DB_COORDPAIR_Y
// 
//
//===========================================================================================================


#define DB_COORDPAIR_NONE 0
#define DB_COORDPAIR_X 1
#define DB_COORDPAIR_Y 2


//===========================================================================================================
//
// DB_GROUP_CLASS_SIZE Definitions
//
// Class name max size
//
// DB_GROUP_CLASS_SIZE
// 
//
//===========================================================================================================


#define DB_GROUP_CLASS_SIZE 16


//===========================================================================================================
//
// DB_INFO Definitions
//
// Integer Database Information
//
// DB_INFO_BLOBS_MAX
// Maximum Number of Blobs in the Database
//
// DB_INFO_LINES_MAX
// Maximum number of lines in the database
//
// DB_INFO_CHANS_MAX
// Maximum Number of Channels in the Database
//
// DB_INFO_USERS_MAX
// Maximum number of Users
//
// DB_INFO_BLOBS_USED
// Number of Blobs currently used
//
// DB_INFO_LINES_USED
// Number of Lines currently used
//
// DB_INFO_CHANS_USED
// Number of Channels currently used
//
// DB_INFO_USERS_USED
// Number of Users in the database
//
// DB_INFO_PAGE_SIZE
// Size of the smallest database block in bytes
//
// DB_INFO_DATA_SIZE
// Number of Blocks in Entire Database
//
// DB_INFO_LOST_SIZE
// Number of Lost Blocks in the Database
//
// DB_INFO_FREE_SIZE
// Number of Free Blocks in the Database
//
// DB_INFO_COMP_LEVEL
// Compression Level in use
//
// DB_INFO_BLOB_SIZE
// Number of pages given to blobs
//
// DB_INFO_FILE_SIZE
// Entire Size of File (in kbytes)
//
// DB_INFO_INDEX_SIZE
// Size of Index (in kbytes)
//
// DB_INFO_MAX_BLOCK_SIZE
// Naximum number of bytes in a block
//
// DB_INFO_CHANGESLOST
// Will changes to this database be lost when this database is closed?
//
//===========================================================================================================


#define DB_INFO_BLOBS_MAX 0
#define DB_INFO_LINES_MAX 1
#define DB_INFO_CHANS_MAX 2
#define DB_INFO_USERS_MAX 3
#define DB_INFO_BLOBS_USED 4
#define DB_INFO_LINES_USED 5
#define DB_INFO_CHANS_USED 6
#define DB_INFO_USERS_USED 7
#define DB_INFO_PAGE_SIZE 8
#define DB_INFO_DATA_SIZE 9
#define DB_INFO_LOST_SIZE 10
#define DB_INFO_FREE_SIZE 11
#define DB_INFO_COMP_LEVEL 16
#define DB_INFO_BLOB_SIZE 19
#define DB_INFO_FILE_SIZE 17
#define DB_INFO_INDEX_SIZE 18
#define DB_INFO_MAX_BLOCK_SIZE 20
#define DB_INFO_CHANGESLOST 21


//===========================================================================================================
//
// DB_LINE_LABEL_FORMAT Definitions
//
// Line Label Formats
//
// DB_LINE_LABEL_FORMAT_LINE
// 
//
// DB_LINE_LABEL_FORMAT_VERSION
// 
//
// DB_LINE_LABEL_FORMAT_TYPE
// 
//
// DB_LINE_LABEL_FORMAT_FLIGHT
// 
//
// DB_LINE_LABEL_FORMAT_FULL
// 
//
// DB_LINE_LABEL_FORMAT_DATE
// 
//
// DB_LINE_LABEL_FORMAT_LINK
// 
//
//===========================================================================================================


#define DB_LINE_LABEL_FORMAT_LINE 1
#define DB_LINE_LABEL_FORMAT_VERSION 2
#define DB_LINE_LABEL_FORMAT_TYPE 4
#define DB_LINE_LABEL_FORMAT_FLIGHT 8
#define DB_LINE_LABEL_FORMAT_FULL 15
#define DB_LINE_LABEL_FORMAT_DATE 16
#define DB_LINE_LABEL_FORMAT_LINK 7


//===========================================================================================================
//
// DB_LINE_SELECT Definitions
//
// Select modes
//
// DB_LINE_SELECT_INCLUDE
// 
//
// DB_LINE_SELECT_EXCLUDE
// 
//
//===========================================================================================================


#define DB_LINE_SELECT_INCLUDE 0
#define DB_LINE_SELECT_EXCLUDE 1


//===========================================================================================================
//
// DB_LINE_TYPE Definitions
//
// Line types
//
// DB_LINE_TYPE_NORMAL
// 
//
// DB_LINE_TYPE_BASE
// 
//
// DB_LINE_TYPE_TIE
// 
//
// DB_LINE_TYPE_TEST
// 
//
// DB_LINE_TYPE_TREND
// 
//
// DB_LINE_TYPE_SPECIAL
// 
//
// DB_LINE_TYPE_RANDOM
// 
//
//===========================================================================================================


#define DB_LINE_TYPE_NORMAL 0
#define DB_LINE_TYPE_BASE 1
#define DB_LINE_TYPE_TIE 2
#define DB_LINE_TYPE_TEST 3
#define DB_LINE_TYPE_TREND 4
#define DB_LINE_TYPE_SPECIAL 5
#define DB_LINE_TYPE_RANDOM 6


//===========================================================================================================
//
// DB_LOCK Definitions
//
// Lock Modes
//
// DB_LOCK_NONE
// Used only by GetSymbLock_DB
//
// DB_LOCK_READONLY
// 
//
// DB_LOCK_READWRITE
// 
//
//===========================================================================================================


#define DB_LOCK_NONE -1
#define DB_LOCK_READONLY 0
#define DB_LOCK_READWRITE 1


//===========================================================================================================
//
// DB_NAME Definitions
//
// Get Database file names
//
// DB_NAME_FILE
// 
//
//===========================================================================================================


#define DB_NAME_FILE 0


//===========================================================================================================
//
// DB_NULL Definitions
//
// Database Null
//
//===========================================================================================================


#define DB_NULL ((DB)0)



//===========================================================================================================
//
// DB_OWN Definitions
//
// Symbol Ownership
//
// DB_OWN_SHARED
// 
//
// DB_OWN_USER
// 
//
//===========================================================================================================


#define DB_OWN_SHARED 0
#define DB_OWN_USER 1


//===========================================================================================================
//
// DB_SYMB_TYPE Definitions
//
// Symbol types
//
// DB_SYMB_BLOB
// 
//
// DB_SYMB_LINE
// 
//
// DB_SYMB_CHAN
// 
//
// DB_SYMB_USER
// 
//
//===========================================================================================================


#define DB_SYMB_BLOB 0
#define DB_SYMB_LINE 1
#define DB_SYMB_CHAN 2
#define DB_SYMB_USER 3


//===========================================================================================================
//
// DB_SYMB_NAME_SIZE Definitions
//
// Size of Symbol Names
//
// DB_SYMB_NAME_SIZE
// Same STR_DB_SYMBOL
//
//===========================================================================================================


#define DB_SYMB_NAME_SIZE STR_DB_SYMBOL


//===========================================================================================================
//
// DB_WAIT Definitions
//
// Wait Times
//
// DB_WAIT_NONE
// 
//
// DB_WAIT_INFINITY
// 
//
//===========================================================================================================


#define DB_WAIT_NONE 0
#define DB_WAIT_INFINITY -1


//===========================================================================================================
//
// DB_ARRAY_BASETYPE Definitions
//
// Array channel base coordinate type
//
// DB_ARRAY_BASETYPE_NONE
// 
//
// DB_ARRAY_BASETYPE_TIME_WINDOWS
// 
//
// DB_ARRAY_BASETYPE_TIMES
// 
//
// DB_ARRAY_BASETYPE_FREQUENCIES
// 
//
// DB_ARRAY_BASETYPE_ELEVATIONS
// 
//
// DB_ARRAY_BASETYPE_DEPTHS
// 
//
// DB_ARRAY_BASETYPE_VELOCITIES
// 
//
// DB_ARRAY_BASETYPE_DISCRETE_TIME_WINDOWS
// 
//
//===========================================================================================================


#define DB_ARRAY_BASETYPE_NONE 0
#define DB_ARRAY_BASETYPE_TIME_WINDOWS 1
#define DB_ARRAY_BASETYPE_TIMES 2
#define DB_ARRAY_BASETYPE_FREQUENCIES 3
#define DB_ARRAY_BASETYPE_ELEVATIONS 4
#define DB_ARRAY_BASETYPE_DEPTHS 5
#define DB_ARRAY_BASETYPE_VELOCITIES 6
#define DB_ARRAY_BASETYPE_DISCRETE_TIME_WINDOWS 7


//===========================================================================================================
//
// NULLSYMB Definitions
//
// Database Null
//
// NULLSYMB
// 
//
//===========================================================================================================


#define NULLSYMB -1





//===========================================================================================================
//
// Channel Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// CreateDup_DB This method makes a brand new database identical to the input
//              Database in-size.
//              The database is opened in ReadWrite Mode.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void CreateDup_DB(DB,       // DB input
                            string);  // Name of the Database File to Create


  
//-----------------------------------------------------------------------------------------------------------
// CreateDupComp_DB This method makes a brand new database identical to the input
//                  Database in-size except it changes the compression.
//                  The database is opened in ReadWrite Mode.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void CreateDupComp_DB(DB,       // DB input
                                string,   // Name of the Database File to Create
                                int);     // DB_COMP


  
//-----------------------------------------------------------------------------------------------------------
// DupSymbAcross_DB Create a new Symbol by duplicating an existing symbol.
//                  exactly the same type but in output database. The symbol must
//                  not already exist in the output database.
//
// Returns          New Symbol Handle
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] DB_SYMB DupSymbAcross_DB(DB,        // Database Input
                                   DB,        // Database output
                                   DB_SYMB);  // Symbol Handle to duplicate


  
//-----------------------------------------------------------------------------------------------------------
// EasyMakerSymb_DB Adds a Maker to the database symbol based on current GX
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void EasyMakerSymb_DB(DB,        // Database
                                DB_SYMB,   // Symbol to create maker for
                                string,    // Maker name, used in menu prompt
                                string);   // INI groups (terminate each with a ";")


  
//-----------------------------------------------------------------------------------------------------------
// GetChanStr_DB Get individual elements in a channel.
//
// Notes         These methods are slow and should only be used when
//               performance is not an issue.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetChanStr_DB(DB,           // Database
                             DB_SYMB,      // Line
                             DB_SYMB,      // Channel
                             int,          // Index
                             var string,   // String
                             int);         // Length
#define _GetChanStr_DB(db, line, chan, ind, str_val) GetChanStr_DB(db, line, chan, ind, str_val, sizeof(str_val))


  
//-----------------------------------------------------------------------------------------------------------
// GetChanVV_DB Place the contents of a channel in a VV.
//
// Notes        If a VA channel is specified, then element [0] of this
//              VA channel is used to populated the VV.
//
// See also     VV class.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetChanVV_DB(DB,        // Database
                            DB_SYMB,   // Line
                            DB_SYMB,   // Channel
                            VV);       // VV in which to place the data


  
//-----------------------------------------------------------------------------------------------------------
// GetChanVVExpanded_DB Read a channel into a VV. If the channel is a VA channel it is
//                      treaded as a VV channel with multiple values per fid and the FID expation
//                      is set to the array size.
//
// Notes                This method is to be used in conjunction with the ReFidVV_VV method
//                      that will honor the FID Expansion setting.
//
// See also             VV class.
//
// Available            6.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GetChanVVExpanded_DB(DB,        // Database
                                    DB_SYMB,   // Line
                                    DB_SYMB,   // Channel
                                    VV);       // VV in which to place the data


  
//-----------------------------------------------------------------------------------------------------------
// GetIPJ_DB Get georeference information in an IPJ.
//
// Notes     If the channel does not have an IPJ, the IPJ that is
//           returned will have an unknown projection.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetIPJ_DB(DB,        // hDB - Shared Database
                         DB_SYMB,   // Symbol
                         IPJ);      // IPJ to fill in


  
//-----------------------------------------------------------------------------------------------------------
// GetITR_DB Get ITR for a channel.
//
// Notes     If a channel does not have an ITR, GetITR_DB will not change
//           the passed ITR.
//           Channel must be locked for READONLY or READWRITE.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetITR_DB(DB,        // hDB
                         DB_SYMB,   // Channel
                         ITR);      // ITR to fill in


  
//-----------------------------------------------------------------------------------------------------------
// GetRegSymb_DB Get a REG object from a symbol
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetRegSymb_DB(DB,        // hDB - Shared Database
                             DB_SYMB,   // Symbol, NULLSYMB for the database REG
                             REG);      // REG to copy data into


  
//-----------------------------------------------------------------------------------------------------------
// GetRegSymbSetting_DB Get a REG string setting from a symbol reg
//
// Notes                The symbol REG is used to store a variety of attribute
//                      about the symbol.  Following a conventionally used entries:
//                      
//                      UNITS                   - channel units
//                      CLASS                   - symbol class name (i.e. "Assay")
//                      _PJ_ipj                 - projection blob name
//                      _PJ_x                   - projection coordinate pair
//                      _PJ_y
//                      _PJ_name                - projection GXF-style info
//                      _PJ_ellipsoid
//                      _PJ_projection
//                      _PJ_units
//                      _PJ_datum_transform
//                      
//                      This is a convenient but low-performance way to get/set REG
//                      settings.  If performance is an issue, and more than one
//                      setting is to be Get and or Set, use the REG directly.
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetRegSymbSetting_DB(DB,           // Database
                                    DB_SYMB,      // Symbol, NULLSYMB for the database REG
                                    string,       // REG entry name
                                    var string,   // Returned setting
                                    int);         // String length
#define _GetRegSymbSetting_DB(db, symb, name, setting) GetRegSymbSetting_DB(db, symb, name, setting, sizeof(setting))


  
//-----------------------------------------------------------------------------------------------------------
// GetVaChanVV_DB Place the contents of a specific part of a channel in a VV.
//
// Notes          If a VA channel is specified, then element [0] of this
//                VA channel is used to populated the VV.
//
// See also       VV class.
//
// Available      5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void GetVaChanVV_DB(DB,        // Database
                              DB_SYMB,   // Line
                              DB_SYMB,   // Channel
                              VV,        // VV in which to place the data
                              int,       // Offset
                              int);      // Number to Write


  
//-----------------------------------------------------------------------------------------------------------
// iBlobsMax_DB Gets Maximum Number of Blobs in the Database
//
// Returns      Maximum Number of Blobs in the Database
//
// Available    5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iBlobsMax_DB(DB);  // Database Object


  
//-----------------------------------------------------------------------------------------------------------
// iChansMax_DB Gets Maximum Number of Channels in the Database
//
// Returns      Maximum Number of Channels in the Database
//
// Available    5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iChansMax_DB(DB);  // Database Object


  
//-----------------------------------------------------------------------------------------------------------
// IFormatChan_DB Format a real value based on a channel format.
//
// Notes          If the passed string is too short, the result will be
//                "**".
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IFormatChan_DB(DB,           // Database
                              DB_SYMB,      // Channel handle
                              real,         // Value to format
                              var string,   // String
                              int);         // String length
#define FormatChan_DB(db, chan, val, str_val) IFormatChan_DB(db, chan, val, str_val, sizeof(str_val))


  
//-----------------------------------------------------------------------------------------------------------
// iGetChanArraySize_DB This method Gets a channel's array size for a
//                      given channel handle.
//
// Returns              Channel type
//
// Available            6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetChanArraySize_DB(DB,        // Database
                                   DB_SYMB);  // Channel handle


  
//-----------------------------------------------------------------------------------------------------------
// IGetChanClass_DB This method gets a channel's label
//
// Notes            The channel label is stored in the "CLASS" parameter
//                  of the channel reg. If no class is defined, then an
//                  empty string is returned.
//                  The channel must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available        5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetChanClass_DB(DB,           // Database
                                DB_SYMB,      // Channel handle
                                var string,   // Returned class into
                                int);         // Size of string
#define GetChanClass_DB(db, chan, cl) IGetChanClass_DB(db, chan, cl, sizeof(cl))


  
//-----------------------------------------------------------------------------------------------------------
// iGetChanDecimal_DB This method gets a channel's number of digits displayed
//                    to the right of the decimal point.
//
// Returns            Number of digits displayed to right of decimal
//
// Notes              The channel must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available          6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetChanDecimal_DB(DB,        // Database
                                 DB_SYMB);  // Channel handle


  
//-----------------------------------------------------------------------------------------------------------
// iGetChanFormat_DB This method Gets a channel's display format for a
//                   given channel handle.
//
// Returns           Channel display format
//
// Notes             The returned format is one of the DB_CHAN_FORMAT.
//                   The channel must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available         6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetChanFormat_DB(DB,        // Database
                                DB_SYMB);  // Channel handle


  
//-----------------------------------------------------------------------------------------------------------
// iGetChanInt_DB Get individual elements in a channel.
//
// Returns        Value, or dummy if out of range.
//                For settings, terminates if error.
//
// Notes          These methods are slow and should only be used when
//                performance is not an issue.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetChanInt_DB(DB,        // Database
                             DB_SYMB,   // Line
                             DB_SYMB,   // Channel
                             int);      // Index


  
//-----------------------------------------------------------------------------------------------------------
// IGetChanLabel_DB This method gets a channel's label
//
// Notes            The channel label is stored in the "LABEL" parameter
//                  of the channel reg.  If the setting is empty, the
//                  channel name is returned.
//                  The channel must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetChanLabel_DB(DB,           // Database
                                DB_SYMB,      // Channel handle
                                var string,   // Returned label into
                                int);         // Size of string
#define GetChanLabel_DB(db, chan, label) IGetChanLabel_DB(db, chan, label, sizeof(label))


  
//-----------------------------------------------------------------------------------------------------------
// IGetChanName_DB This method Gets a channel's name for a
//                 given channel handle.
//
// Notes           The channel must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetChanName_DB(DB,           // Database
                               DB_SYMB,      // Channel handle
                               var string,   // String to place name into
                               int);         // Maximum length of string, should be DB_SYMB_NAME_SIZE to hold all possible channel names.
#define GetChanName_DB(db, chan, name) IGetChanName_DB(db, chan, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// iGetChanProtect_DB This method gets a channel's read-only protection status.
//
// Returns            DB_CHAN_PROTECTION
//
// Notes              The channel must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available          6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetChanProtect_DB(DB,        // Database
                                 DB_SYMB);  // Channel handle


  
//-----------------------------------------------------------------------------------------------------------
// iGetChanType_DB This method Gets a channel's type for a
//                 given channel handle.
//
// Returns         Channel type
//
// Notes           The type returned is one of the DB_CATEGORY_CHAN.
//                 Use the GS_SIMPLE_TYPE() macro to convert to INT,REAL
//                 or string types.
//                 The channel must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available       6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetChanType_DB(DB,        // Database
                              DB_SYMB);  // Channel handle


  
//-----------------------------------------------------------------------------------------------------------
// IGetChanUnit_DB This method Gets a channel's unit
//
// Notes           The unit label is stored in the "UNITS" parameter
//                 of the channel reg.
//                 The channel must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetChanUnit_DB(DB,           // Database
                               DB_SYMB,      // Channel handle
                               var string,   // String to place unit into
                               int);         // Size of string
#define GetChanUnit_DB(db, chan, unit) IGetChanUnit_DB(db, chan, unit, sizeof(unit))


  
//-----------------------------------------------------------------------------------------------------------
// iGetChanWidth_DB This method gets a channel's display width for a
//                  given channel handle.
//
// Returns          Channel display width
//
// Notes            The channel must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available        6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetChanWidth_DB(DB,        // Database
                               DB_SYMB);  // Channel handle


  
//-----------------------------------------------------------------------------------------------------------
// IGetName_DB Gets a name from the database.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetName_DB(DB,           // Database Object
                           int,          // DB_NAME
                           var string,   // Name returned
                           int);         // String size
#define GetName_DB(db, name, psz_name) IGetName_DB(db, name, psz_name, sizeof(psz_name))


  
//-----------------------------------------------------------------------------------------------------------
// iGetModificationCount_DB Gets the modification count from the database.
//
// Notes                    A running count of the times a database has been modified between commits.
//                          Useful, for instance to be able to discard changes made by a GX on a database that are required
//                          for the operation of the GX but which the user does not want to persist, and to avoid the Save changes
//                          question when you go to change the database. So if the count is 0 when you start, it is safe to call
//                          Discard_DB on exit without worrying about throwing away changes made previously.
//
// Available                2023.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetModificationCount_DB(DB);  // Database Object


  
//-----------------------------------------------------------------------------------------------------------
// iGetRegSymbSetting_DB Get an integer-valued REG setting from a symbol reg
//
// Returns               The setting, or iDUMMY if not found or not convertable.
//
// Notes                 Same as GetRegSymbSetting_DB, but converts
//                       the setting automatically to an integer value.
//                       
//                       This is a convenient but low-performance way to get/set REG
//                       settings.  If performance is an issue, and more than one
//                       setting is to be Get and or Set, use the REG directly.
//
// Available             6.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetRegSymbSetting_DB(DB,        // Database
                                    DB_SYMB,   // Symbol, NULLSYMB for the database REG
                                    string);   // REG entry name


  
//-----------------------------------------------------------------------------------------------------------
// IGetSymbName_DB This method gets a symbol's name
//
// Notes           See GetChanName_DB for more information
//                 The channel must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available       6.1
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetSymbName_DB(DB,           // Database
                               DB_SYMB,      // Symbol handle
                               var string,   // String to place name into
                               int);         // Maximum length of string, should be DB_SYMB_NAME_SIZE to hold all possible channel names.
#define GetSymbName_DB(db, symb, name) IGetSymbName_DB(db, symb, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// iHaveITR_DB Returns TRUE if channel has an ITR.
//
// Notes       If a channel has an ITR, the ITR colors are used to
//             display channel values in the spreadsheet.
//             
//             If a channel does not have an ITR, GetITR_DB will not change
//             the passed ITR.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iHaveITR_DB(DB,        // hDB
                          DB_SYMB);  // Channel


  
//-----------------------------------------------------------------------------------------------------------
// IiCoordPair_DB Get the matching coordinate pair of a channel.
//
// Returns        DB_COORDPAIR
//
// Notes          If the channel does not have a matching coordinate
//                pair, or of the channel does not exist, the returned
//                string will be empty.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int IiCoordPair_DB(DB,           // hDB - Shared Database
                             string,       // Channel name
                             var string,   // String in which to place paired channel name
                             int);         // String length
#define iCoordPair_DB(db, chan, pair) IiCoordPair_DB(db, chan, pair, sizeof(pair))


  
//-----------------------------------------------------------------------------------------------------------
// iLinesMax_DB Gets Maximum number of lines in the database
//
// Returns      Maximum number of lines in the database
//
// Available    5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iLinesMax_DB(DB);  // Database Object


  
//-----------------------------------------------------------------------------------------------------------
// iUsersMax_DB Gets Maximum number of Users
//
// Returns      Maximum number of Users
//
// Available    5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iUsersMax_DB(DB);  // Database Object


  
//-----------------------------------------------------------------------------------------------------------
// MakerSymb_DB Adds a Maker to the database symbol
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void MakerSymb_DB(DB,        // Database
                            DB_SYMB,   // Symbol to create maker for
                            string,    // Name of program
                            string,    // Maker name, used in menu prompt
                            string);   // INI groups (terminate each with a ";")


  
//-----------------------------------------------------------------------------------------------------------
// PutChanVV_DB Place the contents of a VV in a channel.
//
// Notes        If a VA channel is specified, then element [0] of this
//              VA channel will be populated with the VV.
//              
//              There is a limit of 2000 elements for non-licensed users.
//
// See also     VV class.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void PutChanVV_DB(DB,        // Database
                            DB_SYMB,   // Line
                            DB_SYMB,   // Channel
                            VV);       // VV from which to get the data


  
//-----------------------------------------------------------------------------------------------------------
// PutVaChanVV_DB Place the contents of a VV at a specific part of a channel.
//
// Notes          If a VA channel is specified, then element [0] of this
//                VA channel will be populated with the VV.
//
// See also       VV class.
//
// Available      5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void PutVaChanVV_DB(DB,        // Database
                              DB_SYMB,   // Line
                              DB_SYMB,   // Channel
                              VV,        // VV from which to get the data
                              int,       // Offset
                              int);      // Number to Write


  
//-----------------------------------------------------------------------------------------------------------
// ReadBlobBF_DB Read a blob from a database into a file.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ReadBlobBF_DB(DB,        // DB handle
                             DB_SYMB,   // Blob (DB_SYMB_BLOB) to read into BF from database
                             BF);       // File to read blob from


  
//-----------------------------------------------------------------------------------------------------------
// rGetChanReal_DB Get individual elements in a channel.
//
// Returns         Value, or dummy if out of range.
//                 For settings, terminates if error.
//
// Notes           These methods are slow and should only be used when
//                 performance is not an issue.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetChanReal_DB(DB,        // Database
                               DB_SYMB,   // Line
                               DB_SYMB,   // Channel
                               int);      // Index


  
//-----------------------------------------------------------------------------------------------------------
// rGetRegSymbSetting_DB Get a real-valued REG setting from a symbol reg
//
// Returns               The setting, or rDUMMY if not found or not convertable.
//
// Notes                 Same as GetRegSymbSetting_DB, but converts
//                       the setting automatically to a real value.
//                       
//                       This is a convenient but low-performance way to get/set REG
//                       settings.  If performance is an issue, and more than one
//                       setting is to be Get and or Set, use the REG directly.
//
// Available             6.2
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetRegSymbSetting_DB(DB,        // Database
                                     DB_SYMB,   // Symbol, NULLSYMB for the database REG
                                     string);   // REG entry name


  
//-----------------------------------------------------------------------------------------------------------
// SetAllChanProtect_DB This method sets all the channels' read-only protection status.
//
// Notes                Value to set must be either DB_CHAN_PROTECTED or
//                      DB_CHAN_UNPROTECTED
//                      This method does its own channel locking/unlocking.
//                      Channels already lock DB_LOCK_READONLY are ignored.
//
// Available            7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetAllChanProtect_DB(DB,    // Database
                                    int);  // DB_CHAN_PROTECTION


  
//-----------------------------------------------------------------------------------------------------------
// SetChanClass_DB Set a channel class
//
// Notes           The channel class is stored in the "CLASS" parameter
//                 of the channel reg.
//                 The channel must be locked DB_LOCK_READWRITE
//
// Available       5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] void SetChanClass_DB(DB,        // Database
                               DB_SYMB,   // Channel handle
                               string);   // Class


  
//-----------------------------------------------------------------------------------------------------------
// SetChanDecimal_DB This method sets a channel's number of digits displayed
//                   to the right of the decimal point.
//
// Notes             The number of display digits must be from 0 to 50.
//                   The channel must be locked DB_LOCK_READWRITE
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetChanDecimal_DB(DB,        // Database
                                 DB_SYMB,   // Channel handle
                                 int);      // Number of digits to display right of the decimal


  
//-----------------------------------------------------------------------------------------------------------
// SetChanFormat_DB This method sets a channel's display format.
//
// Notes            The channel must be locked DB_LOCK_READWRITE
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetChanFormat_DB(DB,        // Database
                                DB_SYMB,   // Channel handle
                                int);      // DB_CHAN_FORMAT


  
//-----------------------------------------------------------------------------------------------------------
// SetChanInt_DB Set individual elements in a channel.
//
// Notes         These methods are slow and should only be used when
//               performance is not an issue.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetChanInt_DB(DB,        // Database
                             DB_SYMB,   // Line
                             DB_SYMB,   // Channel
                             int,       // Index
                             int);      // Value


  
//-----------------------------------------------------------------------------------------------------------
// SetChanLabel_DB Set a channel label
//
// Notes           The channel label is stored in the "LABEL" parameter
//                 of the channel reg.
//                 The channel must be locked DB_LOCK_READWRITE
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetChanLabel_DB(DB,        // Database
                               DB_SYMB,   // Channel handle
                               string);   // Label


  
//-----------------------------------------------------------------------------------------------------------
// SetChanName_DB This method sets a channel's name.
//
// Notes          The channel must be locked DB_LOCK_READWRITE
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetChanName_DB(DB,        // Database
                              DB_SYMB,   // Channel handle
                              string);   // String to set channel name to


  
//-----------------------------------------------------------------------------------------------------------
// SetChanProtect_DB This method sets a channel's read-only protection
//                   status.
//
// Notes             Value to set must be either DB_CHAN_PROTECTED or
//                   DB_CHAN_UNPROTECTED
//                   The channel must be locked DB_LOCK_READWRITE
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetChanProtect_DB(DB,        // Database
                                 DB_SYMB,   // Channel handle
                                 int);      // DB_CHAN_PROTECTION


  
//-----------------------------------------------------------------------------------------------------------
// SetChanReal_DB Set individual elements in a channel.
//
// Notes          These methods are slow and should only be used when
//                performance is not an issue.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetChanReal_DB(DB,        // Database
                              DB_SYMB,   // Line
                              DB_SYMB,   // Channel
                              int,       // Index
                              real);     // Value


  
//-----------------------------------------------------------------------------------------------------------
// SetChanStr_DB Set individual elements in a channel.
//
// Notes         These methods are slow and should only be used when
//               performance is not an issue.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetChanStr_DB(DB,        // Database
                             DB_SYMB,   // Line
                             DB_SYMB,   // Channel
                             int,       // Index
                             string);   // String


  
//-----------------------------------------------------------------------------------------------------------
// SetChanUnit_DB This method sets a channel's unit for a
//                given channel handle.
//
// Notes          The channel must be locked DB_LOCK_READWRITE
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetChanUnit_DB(DB,        // Database
                              DB_SYMB,   // Channel handle
                              string);   // String to put channel unit


  
//-----------------------------------------------------------------------------------------------------------
// SetChanWidth_DB This method sets a channel's display width
//
// Notes           The number of display digits must be from 0 to 50.
//                 The channel must be locked DB_LOCK_READWRITE
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetChanWidth_DB(DB,        // Database
                               DB_SYMB,   // Channel handle
                               int);      // Display width


  
//-----------------------------------------------------------------------------------------------------------
// SetIPJ_DB Set an IPJ object into a pair of (X, Y) channels
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetIPJ_DB(DB,        // hDB - Shared Database
                         DB_SYMB,   // X channel
                         DB_SYMB,   // Y channel
                         IPJ);      //


  
//-----------------------------------------------------------------------------------------------------------
// SetITR_DB Set ITR for a channel.
//
// Notes     Use ITR_NULL to clear the channel ITR.
//           Channel must be locked for READONLY or READWRITE.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetITR_DB(DB,        // hDB
                         DB_SYMB,   // Channel
                         ITR);      // ITR to fill in


  
//-----------------------------------------------------------------------------------------------------------
// SetRegSymb_DB Set a REG object into a symbol
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetRegSymb_DB(DB,        // hDB - Shared Database
                             DB_SYMB,   // Symbol, NULLSYMB for the database REG
                             REG);      // REG to set into Blob


  
//-----------------------------------------------------------------------------------------------------------
// SetRegSymbSetting_DB Set a REG string setting in a symbol reg
//
// Notes                The symbol REG is used to store a variety of attribute
//                      about the symbol.  Following a conventionally used entries:
//                      
//                      UNITS                   - channel units
//                      CLASS                   - symbol class name (i.e. "Assay")
//                      _PJ_ipj                 - projection blob name
//                      _PJ_x                   - projection coordinate pair
//                      _PJ_y
//                      _PJ_name                - projection GXF-style info
//                      _PJ_ellipsoid
//                      _PJ_projection
//                      _PJ_units
//                      _PJ_datum_transform
//                      
//                      This is a convenient but low-performance way to get/set REG
//                      settings.  If performance is an issue, and more than one
//                      setting is to be Get and or Set, use the REG directly.
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetRegSymbSetting_DB(DB,        // Shared Database
                                    DB_SYMB,   // Symbol, NULLSYMB for the database REG
                                    string,    // REG entry name
                                    string);   // Setting


  
//-----------------------------------------------------------------------------------------------------------
// WriteBlobBF_DB Write a blob from a file into a database.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void WriteBlobBF_DB(DB,        // DB handle
                              DB_SYMB,   // Blob (DB_SYMB_BLOB) to write into database from file
                              BF);       // File to write blob into



//===========================================================================================================
//
// Control Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// Commit_DB This method forces all changes to the database to be saved.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Commit_DB(DB);  // Database


  
//-----------------------------------------------------------------------------------------------------------
// Compact_DB Removes any extra space from the database. This will
//            reduce the database to its smallest size.
//
// Available  5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void Compact_DB(DB);  // Database


  
//-----------------------------------------------------------------------------------------------------------
// Create_DB This method makes a brand new database of the specified size.
//           The database is opened in ReadWrite Mode.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Create_DB(string,   // Name of the Database File to Create
                         int,      // Max Lines in the Database    (200)
                         int,      // Max Channels in the Database (50)
                         int,      // Max Blobs in the Database    (Channels+Lines+20)
                         int,      // Max Users in the Database    (10)
                         int,      // Number of Erase Caches       (100)
                         string,   // Name of the Super User       "SUPER"
                         string);  // Password of the Super User   ""


  
//-----------------------------------------------------------------------------------------------------------
// CreateComp_DB This method makes a brand new database of the specified size.
//               The database is opened in ReadWrite Mode. Also allows you to
//               set paging size and the Compression Level.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void CreateComp_DB(string,   // Name of the Database File to Create
                             int,      // Max Lines in the Database    (200)
                             int,      // Max Channels in the Database (50)
                             int,      // Max Blobs in the Database    (Channels+Lines+20)
                             int,      // Max Users in the Database    (10)
                             int,      // Number of Erase Caches       (100)
                             string,   // Name of the Super User       "SUPER"
                             string,   // Password of the Super User   ""
                             int,      // Page Size Must be (64,128,256,512,1024,2048,4096) normally 1024
                             int);     // DB_COMP


  
//-----------------------------------------------------------------------------------------------------------
// CreateEx_DB This method makes a brand new database of the specified size.
//             The database is opened in ReadWrite Mode. Also allows you to
//             set paging size.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void CreateEx_DB(string,   // Name of the Database File to Create
                           int,      // Max Lines in the Database    (200)
                           int,      // Max Channels in the Database (50)
                           int,      // Max Blobs in the Database    (Channels+Lines+20)
                           int,      // Max Users in the Database    (10)
                           int,      // Number of Erase Caches       (100)
                           string,   // Name of the Super User       "SUPER"
                           string,   // Password of the Super User   ""
                           int);     // Page Size Must be (64,128,256,512,1024,2048,4096) normally 1024


  
//-----------------------------------------------------------------------------------------------------------
// DelLine0_DB Delete Empty Line 0.
//
// Notes       A new database is created with a single, empty line L0, but many processes
//             create databases then create their own lines, so the empty line L0 may remain
//             after the process finishes. This function will delete a line L0
//             a) If it exists and is empty
//             b) It is not the only line in the database.
//
// See also    DelLine0_EDB - deletes an empty line 0 from the currently edited database.
//
// Available   7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DelLine0_DB(DB);  //


  
//-----------------------------------------------------------------------------------------------------------
// Destroy_DB This method closes a database and destroys the DB object.
//
// Notes      This method has been largely superseded by the use of the EDB object,
//            which when locked returns a DB object that must NOT be destroyed.
//            
//            It may still be reasonably used to destroy a DB handle returned when
//            a database is opened using a call to Open_DB.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Destroy_DB(DB);  // Database to Destroy


  
//-----------------------------------------------------------------------------------------------------------
// Discard_DB This method discards all changes made to the database since
//            the last commit or opening.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Discard_DB(DB);  // Database


  
//-----------------------------------------------------------------------------------------------------------
// Grow_DB Enlarges the database.
//
// Available 5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void Grow_DB(string,   // Name of the Database File to Create
                       int,      // Max Lines in the Database    (200)
                       int,      // Max Channels in the Database (50)
                       int,      // Max Blobs in the Database    (Channels+Lines+20)
                       int,      // Max Users in the Database    (10)
                       int);     // Number of Erase Caches       (100)


  
//-----------------------------------------------------------------------------------------------------------
// iCanOpen_DB This method checks whether it is possible to open a database.
//
// Notes       This method is useful to determine if another session already locked a database.
//             By using this method before an Open_DB a GX may handle errors like this more gracefully.
//
// See also    Open_DB, OpenReadOnly_DB, iCanOpenReadOnly_DB
//
// Available   6.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iCanOpen_DB(string,   // Name of the Database File to Open
                          string,   // Name of the user ("SUPER" normally)
                          string);  // Password of the user ("" normally)


  
//-----------------------------------------------------------------------------------------------------------
// iCanOpenReadOnly_DB This method checks whether it is possible to open a database in read-only mode.
//
// Notes               This method is useful to determine if another session already locked a database.
//                     By using this method before an OpenReadOnly_DB a GX may handle errors like this more gracefully.
//
// See also            Open_DB, OpenReadOnly_DB, iCanOpen_DB
//
// Available           6.4.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iCanOpenReadOnly_DB(string,   // Name of the Database File to Open
                                  string,   // Name of the user ("SUPER" normally)
                                  string);  // Password of the user ("" normally)


  
//-----------------------------------------------------------------------------------------------------------
// iCheck_DB Does an integrity check of the data in the database to
//           ensure it is valid.
//
// Returns   0 - Ok
//           1 - Invalid Blocks in the Database
//
// Available 6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iCheck_DB(DB);  // Database


  
//-----------------------------------------------------------------------------------------------------------
// iIsEmpty_DB See if a database contains only empty lines.
//
// Returns     1 if the database contains only empty lines.
//
// Notes       This function does not check for other information or blobs,
//             it merely looks at all lines in the database to see if they
//             are empty. If all are empty, it returns 1.
//
// Available   6.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsEmpty_DB(DB);  // Database


  
//-----------------------------------------------------------------------------------------------------------
// iIsLineEmpty_DB See if a specific line in the database is empty.
//
// Returns         1 if the database contains only empty lines.
//
// Available       6.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsLineEmpty_DB(DB,        // Database
                              DB_SYMB);  // Line symbol


  
//-----------------------------------------------------------------------------------------------------------
// Open_DB This method opens a database.
//
// Returns DB Object
//
// See also OpenReadOnly_DB, iCanOpen_DB, iCanOpenReadOnly_DB
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] DB Open_DB(string,   // Name of the Database File to Open
                     string,   // Name of the user ("SUPER" normally)
                     string);  // Password of the user ("" normally)


  
//-----------------------------------------------------------------------------------------------------------
// OpenReadOnly_DB This method opens a database.
//
// Returns         DB Object
//
// Notes           This method is useful to open multiple reader instances on the same database. This call will fail
//                 if a DB has already been opened with Open_DB or locked in the application with Lock_EDB.
//
// See also        Open_DB, iCanOpen_DB, iCanOpenReadOnly_DB
//
// Available       6.4.2
//-----------------------------------------------------------------------------------------------------------

[_public] DB OpenReadOnly_DB(string,   // Name of the Database File to Open
                             string,   // Name of the user ("SUPER" normally)
                             string);  // Password of the user ("" normally)


  
//-----------------------------------------------------------------------------------------------------------
// Repair_DB Cleans the database by removing invalid blocks
//
// Available 5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void Repair_DB(string);  // Name of the Database File to Create


  
//-----------------------------------------------------------------------------------------------------------
// Sync_DB Syncronize the Metadata from this database to the XML
//
// Available 7.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Sync_DB(DB);  // Database



//===========================================================================================================
//
// Data Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// CopyData_DB This method copies the data from one channel to another on
//             on the specified line. The data is converted if such
//             conversion in neccessary.
//
// Notes       All the data in the destination channel is destroyed along
//             with the fiducial start and increment.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void CopyData_DB(DB,        // Database
                           DB_SYMB,   // Line
                           DB_SYMB,   // Channel to Copy Data From
                           DB_SYMB);  // Channel to Copy Data To


  
//-----------------------------------------------------------------------------------------------------------
// iGetColVA_DB Returns the # of columns in a VA channel.
//
// Returns      # of columns
//              0 if error
//
// Notes        If the channel is VV, this function returns 1.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetColVA_DB(DB,        // Database
                           DB_SYMB);  // Channel (read locked)


  
//-----------------------------------------------------------------------------------------------------------
// iGetChannelLength_DB Returns the # of elements in a channel.
//
// Returns              # of elements
//
// Notes                Returns the actual number of data items (rows) in a channel. For VA channels no correction is
//                      necessary for the number of columns.
//
// Available            8.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetChannelLength_DB(DB,        // Database
                                   DB_SYMB,   // Line    (read or write locked)
                                   DB_SYMB);  // Channel (read or write locked)


  
//-----------------------------------------------------------------------------------------------------------
// rGetFidIncr_DB This method returns the fiducial increment value of a
//                specified Channel.
//
// Returns        Fiducial Start.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetFidIncr_DB(DB,        // Database
                              DB_SYMB,   // Line (read or write locked)
                              DB_SYMB);  // Channel (read locked)


  
//-----------------------------------------------------------------------------------------------------------
// rGetFidStart_DB This method returns the fiducial start value of a
//                 specified Channel.
//
// Returns         Fiducial Start.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rGetFidStart_DB(DB,        // Database
                               DB_SYMB,   // Line (read or write locked)
                               DB_SYMB);  // Channel (read locked)


  
//-----------------------------------------------------------------------------------------------------------
// SetFid_DB This method allows the user to set the fiducial start and
//           increment of a channel. The Increment should never be 0.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetFid_DB(DB,        // Database
                         DB_SYMB,   // Line (read or write locked)
                         DB_SYMB,   // Channel to set fiducial (write locked)
                         real,      // Start Fiducial Value
                         real);     // Increment Fiducial Value


  
//-----------------------------------------------------------------------------------------------------------
// WindowVACh_DB Copy a window of data in a channel into a new channel
//
// Notes         This function normally used for VA channels. A copy of the
//               original channel will be made if start and end column
//               numbers to copy are dummies.
//               All the columns including start and end columns will be copied
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void WindowVACh_DB(DB,        // Database
                             DB_SYMB,   // Line symbol
                             DB_SYMB,   // Original channel
                             DB_SYMB,   // Output channel
                             int,       // Start column number to copy, 0 is first column
                             int);      // End column number to copy


  
//-----------------------------------------------------------------------------------------------------------
// WindowVACh2_DB Copy a windowed version of data in a channel into a new channel
//
// Notes          Similar to WindowVACh_DB, but the input and output channels must
//                contain the same number of columns. The input VV tells which columns
//                to copy over; 0 values indicate that the output column is to be
//                dummied, and non-zero values indicate the column is to be copied.
//                The VV length must be the same as the number of columns.
//
// Available      5.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] void WindowVACh2_DB(DB,        // Database
                              DB_SYMB,   // Line symbol
                              DB_SYMB,   // Original channel
                              DB_SYMB,   // Output channel
                              VV);       // VV containing 0/1 values for each channel.



//===========================================================================================================
//
// Line Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// SetLineSelection_DB Set the selection status for a line.
//
// Available           9.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetLineSelection_DB(DB,        // Database
                                   DB_SYMB,   // Handle of line to select/deselect
                                   int);      // DB_LINE_SELECT


  
//-----------------------------------------------------------------------------------------------------------
// iGetLineSelection_DB Get the selection status for a line.
//
// Returns              One of DB_LINE_SELECT
//
// Available            9.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetLineSelection_DB(DB,        // Database
                                   DB_SYMB);  // Line handle


  
//-----------------------------------------------------------------------------------------------------------
// FirstSelLine_DB This method will return a handle to the first selected
//                 line in the database.
//
// Returns         Line Handle (use iIsLineValid method to see if valid)
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] DB_SYMB FirstSelLine_DB(DB);  // Database


  
//-----------------------------------------------------------------------------------------------------------
// GetLineMapFid_DB This method gets a line map clip fiducial.
//
// Notes            The channel must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available        5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void GetLineMapFid_DB(DB,         // Database
                                DB_SYMB,    // Line handle to look at
                                var real,   // Start Fid
                                var real);  // End Fid


  
//-----------------------------------------------------------------------------------------------------------
// GetSelect_DB Gets the Line Selections.
//
// Returns      Selections Object.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] DB_SELECT GetSelect_DB(DB);  // Database


  
//-----------------------------------------------------------------------------------------------------------
// iCountSelLines_DB This method counts the number of selected lines in
//                   the database.
//
// Returns           x - Number of selected lines in the database
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iCountSelLines_DB(DB);  // Database


  
//-----------------------------------------------------------------------------------------------------------
// iIsChanName_DB Is this a valid channel name?
//
// Returns        1 if it is a valid channel name
//                0 if it is not a valid channel name
//
// Notes          Channel names must only contain alpha-numeric characters or the
//                underscore character "_", and the first letter must be a letter
//                or an underscore.
//
// Available      7.2
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsChanName_DB(string);  // Name to test


  
//-----------------------------------------------------------------------------------------------------------
// iIsChanValid_DB This method checks to see if the channel handle is a
//                 valid channel.
//
// Returns         0 - Not a valid channel
//                 1 - Valid
//
// Available       5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsChanValid_DB(DB,        // Database
                              DB_SYMB);  // Channel handle to check


  
//-----------------------------------------------------------------------------------------------------------
// iIsLineName_DB Is this a valid line name.
//
// Returns        1 if it is a valid line name
//                0 if it is not a valid line name
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsLineName_DB(string);  // Name to test


  
//-----------------------------------------------------------------------------------------------------------
// iIsLineValid_DB This method checks to see if the line handle returned by
//                 the Line methods is a valid line.
//
// Returns         0 - Not a valid line
//                 1 - Valid
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsLineValid_DB(DB,        // Database
                              DB_SYMB);  // Line handle to check


  
//-----------------------------------------------------------------------------------------------------------
// iLineCategory_DB This method returns the category (group, line) of a line.
//
// Returns          DB_CATEGORY_LINE or iDUMMY.
//
// Notes            The channel must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iLineCategory_DB(DB,        // Database
                               DB_SYMB);  // Line handle to look at


  
//-----------------------------------------------------------------------------------------------------------
// iLineFlight_DB This method returns the flight number of a line.
//
// Returns        Line Flight Number.
//
// Notes          The channel must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iLineFlight_DB(DB,        // Database
                             DB_SYMB);  // Line handle to look at


  
//-----------------------------------------------------------------------------------------------------------
// ILineLabel_DB Create a line label
//
// Notes         Label formats.
//               
//               example full format is
//               "L1023.4 13"   type "L"
//               number "1023"
//               version "4"
//               flight "13"
//               
//               formats can be added to get combined format
//               
//               Use LINK format to create a database link label.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ILineLabel_DB(DB,           // Database
                             DB_SYMB,      // Line symbol
                             var string,   // String in which to place label
                             int,          // String length
                             int);         // DB_LINE_LABEL_FORMAT
#define LineLabel_DB(db, line, label, format) ILineLabel_DB(db, line, label, sizeof(label), format)


  
//-----------------------------------------------------------------------------------------------------------
// iLineNumber_DB This method returns the number of a line.
//
// Returns        Line Number.
//
// Notes          The line must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iLineNumber_DB(DB,        // Database
                             DB_SYMB);  // Line handle to look at


  
//-----------------------------------------------------------------------------------------------------------
// ILineNumber2_DB Returns the string form of the line number (can be alphanumeric)
//
// Notes           The line must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ILineNumber2_DB(DB,           // Database
                               DB_SYMB,      // Line handle to look at
                               var string,   // Line number
                               int);         // Line number buffer size
#define LineNumber2_DB(db, line, line_number) ILineNumber2_DB(db, line, line_number, sizeof(line_number))


  
//-----------------------------------------------------------------------------------------------------------
// iLineType_DB This method returns the type of a line.
//
// Returns      DB_LINE_TYPE
//
// Notes        The line must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iLineType_DB(DB,        // Database
                           DB_SYMB);  // Line handle to look at


  
//-----------------------------------------------------------------------------------------------------------
// iLineVersion_DB This method returns the version number of a line.
//
// Returns         Line Number.
//
// Notes           The line must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iLineVersion_DB(DB,        // Database
                              DB_SYMB);  // Line handle to look at


  
//-----------------------------------------------------------------------------------------------------------
// ISetLineName_DB This method sets up a line name given the line's number,
//                 type, and version.
//
// Notes           This MUST be called to generate a line name when calls
//                 are made to iExistSymb_DB, CreateSymb_DB or DeleteSymb_DB
//                 for an operation on a line.
//                 See also SetLineName2_DB.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ISetLineName_DB(int,          // Line number
                               int,          // Line type
                               int,          // Line version
                               var string,   // String to set line name to
                               int);         // Maximum length of string
#define SetLineName_DB(num, type, ver, name) ISetLineName_DB(num, type, ver, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// ISetLineName2_DB Like SetLineName_DB, but can use alphanumeric for line number
//
// Notes            This MUST be called to generate a line name when calls
//                  are made to iExistSymb_DB, CreateSymb_DB or DeleteSymb_DB
//                  for an operation on a line.
//                  The line number can be any combination of letters and numbers,
//                  i.e. XU324, 98765, A, 23NGV etc.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ISetLineName2_DB(string,       // Line number (alphanumeric)
                                int,          // Line type
                                int,          // Line version
                                var string,   // String to set line name to
                                int);         // Maximum length of string
#define SetLineName2_DB(al_num, type, ver, name) ISetLineName2_DB(al_num, type, ver, name, sizeof(name))


  
//-----------------------------------------------------------------------------------------------------------
// RenameLine_DB Change the name for a line.
//
// Notes         The line must be locked :const:`DB_LOCK_READWRITE'
//               Sets/resets the name of an existing line directly from line type, number, and version.
//               The line number can be any combination of letters and numbers,
//               i.e. XU324, 98765, A, 23NGV etc.
//               Returns an error if the renamed line already exists.
//
// Available     9.9
//-----------------------------------------------------------------------------------------------------------

[_public] void RenameLine_DB(DB,        // Database
                             DB_SYMB,   // Line handle of line to modify (READWRITE
                             string,    // Line number (alphanumeric)
                             int,       // Line type
                             int);      // Line version


  
//-----------------------------------------------------------------------------------------------------------
// LoadSelect_DB Load selections to from a file.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LoadSelect_DB(DB,       // Database
                             string);  // File Name


  
//-----------------------------------------------------------------------------------------------------------
// NextSelLine_DB This method will advance to the next selected line based
//                on the currently selected line handle.
//
// Returns        Line Handle (use iIsLineValid method to see if valid).
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] DB_SYMB NextSelLine_DB(DB,        // Database
                                 DB_SYMB);  // Previous Line


  
//-----------------------------------------------------------------------------------------------------------
// rLineBearing_DB This method returns the bearing of a line.
//
// Returns         Bearing value, rDUMMY if not set.
//
// Notes           The channel must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//                 
//                 This function simply returns a value set using the SetLineBearing_DB
//                 function. It returns rDUMMY for line categories other than
//                 DB_CATEGORY_LINE_FLIGHT.
//                 
//                 To calculate the line azimuth based on the first and
//                 last non-dummy locations, use the rDirection_DU function.
//
// See also        SetLineBearing_DB, rDirection_DU
//
// Available       5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] real rLineBearing_DB(DB,        // Database
                               DB_SYMB);  // Line handle to look at


  
//-----------------------------------------------------------------------------------------------------------
// rLineDate_DB This method returns the date of a line.
//
// Returns      Date value.
//
// Notes        The channel must be locked DB_LOCK_READONLY or DB_LOCK_READWRITE
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] real rLineDate_DB(DB,        // Database
                            DB_SYMB);  // Line handle to look at


  
//-----------------------------------------------------------------------------------------------------------
// SaveSelect_DB Saves current selections to a file.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SaveSelect_DB(DB,       // Database
                             string);  // File Name


  
//-----------------------------------------------------------------------------------------------------------
// Select_DB Select/deselect lines based on selection string
//
// Notes     Selections/deselections are cumulative. If lines had already
//           been selected, then any further selection/deselection will
//           affect that set of selections.
//           
//           E.g. "L99:800" is the string to select all normal lines from
//           99 to 800. If Select_DB is called again to select "L1000",
//           then lines 99 to 800 and 1000 would all be selected.
//           
//           Use a "T" prefix for Tie lines.
//           Use an "F" prefix to specify lines of a specific flight.
//           E.g. "F10" would select all lines of flight 10.
//           Use an empty string ("") to select/deselect ALL lines.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Select_DB(DB,       // Database
                         string,   // Selection
                         int);     // DB_LINE_SELECT


  
//-----------------------------------------------------------------------------------------------------------
// SetLineBearing_DB Sets a line's bearing.
//
// Notes             The channel must be locked DB_LOCK_READWRITE
//                   
//                   This function simply sets a value in the line's metadata
//                   that is retrieved using the rLineBearing_DB
//                   function. It terminates for line categories other than
//                   DB_CATEGORY_LINE_FLIGHT.
//
// See also          rLineBearing_DB, rDirection_DU
//
// Available         5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void SetLineBearing_DB(DB,        // Database
                                 DB_SYMB,   // Line handle
                                 real);     // Value to set bearing to


  
//-----------------------------------------------------------------------------------------------------------
// SetLineDate_DB This method sets a line's date.
//
// Notes          The channel must be locked DB_LOCK_READWRITE
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetLineDate_DB(DB,        // Database
                              DB_SYMB,   // Line handle
                              real);     // Value to set date to


  
//-----------------------------------------------------------------------------------------------------------
// SetLineFlight_DB This method sets a line's flight.
//
// Notes            The channel must be locked DB_LOCK_READWRITE
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetLineFlight_DB(DB,        // Database
                                DB_SYMB,   // Line handle
                                int);      // Value to set line flight to


  
//-----------------------------------------------------------------------------------------------------------
// SetLineMapFid_DB This method changes a line map clip fiducial.
//
// Notes            for full range, set Start Fid to rMIN and End Fid to rMAX.
//                  for no data, set Start and End Fids to rDUMMY.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetLineMapFid_DB(DB,        // Database
                                DB_SYMB,   // Line handle to look at
                                real,      // Start Fid
                                real);     // End Fid


  
//-----------------------------------------------------------------------------------------------------------
// SetLineNum_DB This method sets a line's number.
//
// Notes         The channel must be locked DB_LOCK_READWRITE
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetLineNum_DB(DB,        // Database
                             DB_SYMB,   // Line handle
                             int);      // Value to set line number to


  
//-----------------------------------------------------------------------------------------------------------
// SetLineType_DB This method sets a line's type.
//
// Notes          The channel must be locked DB_LOCK_READWRITE
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetLineType_DB(DB,        // Database
                              DB_SYMB,   // Line handle
                              int);      // DB_LINE_TYPE


  
//-----------------------------------------------------------------------------------------------------------
// SetLineVer_DB This method sets a line's version.
//
// Notes         The channel must be locked DB_LOCK_READWRITE
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetLineVer_DB(DB,        // Database
                             DB_SYMB,   // Line handle
                             int);      // Value to set line version to


  
//-----------------------------------------------------------------------------------------------------------
// SetSelect_DB Sets the Line Selections.
//
// Notes        This method also destroys the DB_SELECT object.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SetSelect_DB(DB,          // Database
                            DB_SELECT);  // Selections



//===========================================================================================================
//
// META Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// GetMETA_DB Get the metadata of a database.
//
// Available  5.1.5
//-----------------------------------------------------------------------------------------------------------

[_public] void GetMETA_DB(DB,     // Database
                          META);  // Meta object to fill with database's meta


  
//-----------------------------------------------------------------------------------------------------------
// SetMETA_DB Set the metadata of a database.
//
// Available  5.1.5
//-----------------------------------------------------------------------------------------------------------

[_public] void SetMETA_DB(DB,     // Source DB
                          META);  // Meta object to add to database's meta



//===========================================================================================================
//
// Symbols Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// CreateSymbLST_DB Create  a LST object large enough to contain channel names and symbols numbers.
//
// Available        9.8
//-----------------------------------------------------------------------------------------------------------

[_public] LST CreateSymbLST_DB();


  
//-----------------------------------------------------------------------------------------------------------
// ArrayLST_DB Load a LST object with array (VA) channel symbols.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ArrayLST_DB(DB,    // Database
                           LST);  // List to Populate (construct with CreateSymbLST_DB)


  
//-----------------------------------------------------------------------------------------------------------
// ArraySizeLST_DB Load a LST object with array (VA) channel symbols with a particular number of columns.
//
// Available       8.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ArraySizeLST_DB(DB,    // Database
                               int,   // Number of columns in array ( > 1 )
                               LST);  // List to Populate (construct with CreateSymbLST_DB)


  
//-----------------------------------------------------------------------------------------------------------
// ChanLST_DB Load a LST with database channels.
//
// Notes      Populates a LST with channel symbols.
//            The name is put into the "Name" part of the LST (0),
//            and the handle, an integer value written as a string, is
//            placed in the value part of the LST (1).
//            Array channels are included, as well as virtual channels (array channel single columns loaded in the database like \"Chan[1]\".
//            
//            The LST is cleared first, and the items are sorted by name.
//
// Available  6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void ChanLST_DB(DB,    // Database
                          LST);  // List to Populate (construct with CreateSymbLST_DB)


  
//-----------------------------------------------------------------------------------------------------------
// NormalChanLST_DB Load a LST with non-array database channels.
//
// Notes            Like ChanLST_DB, but does not include array channels or virtual channels.
//
// Available        8.2
//-----------------------------------------------------------------------------------------------------------

[_public] void NormalChanLST_DB(DB,    // Database
                                LST);  // List to Populate (construct with CreateSymbLST_DB)


  
//-----------------------------------------------------------------------------------------------------------
// NonStringAndNonArrayChanLST_DB Load a LST with non-string and non-array database channels.
//
// Notes                          Like ChanLST_DB, but does not include array channels, virtual channels or string channels.
//
// Available                      9.9
//-----------------------------------------------------------------------------------------------------------

[_public] void NonStringAndNonArrayChanLST_DB(DB,    // Database
                                              LST);  // List to Populate (construct with CreateSymbLST_DB)


  
//-----------------------------------------------------------------------------------------------------------
// ClassChanLST_DB Load a LST with channels in a particular class.
//
// Notes           The Name of the symbol is placed in the
//                 item name and the item value is set to the symbol handle.
//                 Only channels with the given class name are included,
//                 e.g. use "ASSAY" for assay channels in CHIMERA.
//                 
//                 The LST is cleared first, and the items are sorted by name.
//
// Available       5.0.3
//-----------------------------------------------------------------------------------------------------------

[_public] void ClassChanLST_DB(DB,       // hDB - Database Object
                               LST,      // LST object to populate (construct with CreateSymbLST_DB)
                               string);  // CLASS name for the channel ("" for all)


  
//-----------------------------------------------------------------------------------------------------------
// ClassGroupLST_DB Load a LST with group lines in a particular class.
//
// Notes            The Name of the symbol is placed in the
//                  item name and the item value is set to the symbol handle.
//                  Only group lines with the given class name are included,
//                  e.g. use "TARGETS" for UX-Detect Target groups.
//                  
//                  The LST is cleared first, and the items are sorted by name.
//
// Available        5.0.8
//-----------------------------------------------------------------------------------------------------------

[_public] void ClassGroupLST_DB(DB,       // hDB - Database Object
                                LST,      // LST object to populate (construct with CreateSymbLST_DB)
                                string);  // CLASS name for the group ("" for all)


  
//-----------------------------------------------------------------------------------------------------------
// CreateSymb_DB Create a new Symbol.
//
// Returns       DB_SYMB Object
//
// Notes         If symbol already exits, and it is the same type
//               simply returns a handle to the existing symbol.
//               
//               This method simple calls CreateSymbEx_DB with the
//               extra info set to 1.
//               
//               STRING-type channels: To create a string-type channel,
//               enter a negative number for the channel category below.
//               For instance, "-32" will create a string channel with
//               32 characters per item.
//               
//               BLOBS: Blobs (Binary Large Objects) can be used for storing
//               miscellaneous data which does not fit well into any of the
//               other various storage objects, such as a REG. Generally,
//               one or more objects is serialized to a BF object, which
//               is then written to the blob using the sWriteBlobBF_DB()
//               function. Retrieval is done in the reverse order, using
//               sWriteBlobBF_DB() first, then extracting the objects from the
//               BF object.
//               To avoid namespace problems, Geosoft reserves the following
//               name prefixes:
//               
//               OE.   (Core functions)
//               GS.   (Applications)
//               CS.   (Custom Solutions applications)
//               
//               Programmers should avoid using the above prefixes as the starting
//               letters of their blob names to avoid any possible conflicts.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] DB_SYMB CreateSymb_DB(DB,       // Database
                                string,   // Symbol Name
                                int,      // DB_SYMB_TYPE
                                int,      // DB_OWN
                                int);     // DB_CATEGORY_USER, DB_CATEGORY_LINE, DB_CATEGORY_CHAN, DB_CATEGORY_BLOB


  
//-----------------------------------------------------------------------------------------------------------
// CreateSymbEx_DB Create a new Symbol.
//
// Returns         DB_SYMB handle.
//
// Notes           If symbol already exits it is returned.
//                 
//                 STRING-type channels: To create a string-type channel,
//                 enter a negative number for the channel category below.
//                 For instance, "-32" will create a string channel with
//                 32 characters per item.
//                 
//                 Symbol name for DB_CATEGORY_LINE_FLIGHT must conform to
//                 the following line naming syntax:
//                 
//                 [type][number.version:flight]
//                 
//                 Type can be: L - normal line
//                 B - base line
//                 T - tie line
//                 R - trend line
//                 S - test line
//                 P - special line
//                 
//                 Examples: L100,
//                 T100.1:16
//                 
//                 Note the "Flight" is any whole number that may be useful
//                 to differentiate processing tasks.
//                 
//                 The ability to create a VA channel is not available in the
//                 free interface and requires a Montaj license.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] DB_SYMB CreateSymbEx_DB(DB,       // Database
                                  string,   // Symbol Name
                                  int,      // DB_SYMB_TYPE
                                  int,      // DB_OWN
                                  int,      // DB_CATEGORY_USER, DB_CATEGORY_LINE, DB_CATEGORY_CHAN, DB_CATEGORY_BLOB
                                  int);     // Extra info, which depends on DB_SYMB_TYPE DB_SYMB_CHAN - element width for a VA channel ignores for all other DB_SYMB_TYPE types


  
//-----------------------------------------------------------------------------------------------------------
// CSVChanLST_DB Load a LST with channels in a comma-separated list.
//
// Notes         The Name of the symbol is placed in the
//               item name and the item value is set to the symbol handle.
//               Only channels in the list which are present in the database
//               are included.
//               
//               The LST is cleared first.
//
// Available     6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void CSVChanLST_DB(DB,       // hDB - Database Object
                             LST,      // LST object to populate (construct with CreateSymbLST_DB)
                             string);  // Comma-separated list of channels


  
//-----------------------------------------------------------------------------------------------------------
// DeleteSymb_DB This method destroys a symbol in the database and all
//               the data associated with it. The symbol's lock is
//               automatically removed.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DeleteSymb_DB(DB,        // Database
                             DB_SYMB);  // Symbol to Delete (must be READWRITE locked)


  
//-----------------------------------------------------------------------------------------------------------
// DupLineSymb_DB Duplicate a line symbol from a group or line symbol.
//                The new name must not already exist in the database.
//
// Returns        New Symbol Handle
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] DB_SYMB DupLineSymb_DB(DB,        // Database
                                 DB_SYMB,   // Symbol Handle to duplicate
                                 string);   // Name of the New Symbol


  
//-----------------------------------------------------------------------------------------------------------
// DupSymb_DB New Symbol by duplicating an existing symbol, LOCKED
//
// Returns    New Symbol Handle
//
// Notes      The symbol will be locked READWRITE.
//            The new name must not already exist in the database.
//
// See also   DupSymbNoLock_DB
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] DB_SYMB DupSymb_DB(DB,        // Database
                             DB_SYMB,   // Symbol Handle to duplicate
                             string);   // Name of the New Symbol


  
//-----------------------------------------------------------------------------------------------------------
// DupSymbNoLock_DB New Symbol by duplicating an existing symbol, NO LOCK.
//
// Returns          New Symbol Handle
//
// Notes            The symbol will be NOT be locked.
//                  The new name must not already exist in the database.
//
// See also         DupSymb_DB
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] DB_SYMB DupSymbNoLock_DB(DB,        // Database
                                   DB_SYMB,   // Symbol Handle to duplicate
                                   string);   // Name of the New Symbol


  
//-----------------------------------------------------------------------------------------------------------
// FindChan_DB Get handle to the specified channel.
//
// Returns     Channel Handle, NULLSYMB if not defined
//
// Notes       To work with a specific column from a VA channel,
//             specify the VA element number in square brackets as part
//             of the VA channel name (e.g. "EM[3]" will treat the fourth
//             column of the VA channel as a VV).
//             
//             See notes for FindSymb_DB.
//             Introduced in v5.1.3.
//             The new FindChan_DB searches using the exact channel name.
//
// Available   5.1.3
//-----------------------------------------------------------------------------------------------------------

[_public] DB_SYMB FindChan_DB(DB,       // Database
                              string);  // Name of channel


  
//-----------------------------------------------------------------------------------------------------------
// FindSymb_DB Get handle to the specified symbol.
//
// Returns     Symbol Handle, NULLSYMB if not defined
//
// Notes       To work with a specific column from a VA channel,
//             specify the VA element number in square brackets as part
//             of the VA channel name (e.g. "EM[3]" will treat the fourth
//             column of the VA channel as a VV).
//             
//             For backward compatibility with GXs not employing the
//             GetXYZChanSymb_DB function, the following behaviour has
//             been introduced as of v5.1.3:  (also true for "Y").
//             
//             FindSymb_DB(hDB, "X", DB_SYMB_CHAN) is now equivalent to:
//             
//             GetXYZChanSymb_DB(hDB, DB_CHAN_X);
//             
//             In other words, the current X or Y is searched for, not
//             necessarily the literal "X" or "Y". This ensures that newer
//             databases, which might have "Easting" and "Northing"
//             (or other similar names) instead of "X" and "Y" will still
//             work with older GXs expecting "X" and "Y".
//             
//             The new FindChan_DB searches using the exact channel name.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] DB_SYMB FindSymb_DB(DB,       // Database
                              string,   // Name of symbol
                              int);     // DB_SYMB_TYPE


  
//-----------------------------------------------------------------------------------------------------------
// GetChanOrderLST_DB This method gets the channel display order for a
//                    database. The list will be stored in an LST object.
//                    In order to modify this displayed channels list,
//                    call SetChanOrderLST_DB after.
//
// Available          5.0.8
//-----------------------------------------------------------------------------------------------------------

[_public] void GetChanOrderLST_DB(DB,    // Database
                                  LST);  // LST object to populate (construct with CreateSymbLST_DB)


  
//-----------------------------------------------------------------------------------------------------------
// GetXYZChanSymb_DB Searches for current X, Y or Z channel symbol
//
// Returns           x - Symbol Handle
//                   NULLSYMB - Symbol not found
//                   
//                   searches for the "current" X, Y or Z channel.
//                   If none is defined, then looks for "X", "Y" or "Z" channel
//                   If the channel is defined, but not present, returns NULLSYMB.
//
// Available         5.1.3
//-----------------------------------------------------------------------------------------------------------

[_public] DB_SYMB GetXYZChanSymb_DB(DB,    // hDB - Database object
                                    int);  // DB_CHAN_SYMBOL


  
//-----------------------------------------------------------------------------------------------------------
// iClassChanList_DB Place a list of channels for a given class in a VV.
//
// Returns           Number of symbols.
//
// Notes             This method generates a list of symbols in the database
//                   and places their handles into a VV. The list is not
//                   sorted.
//                   Only channels with the given class name are included,
//                   e.g. use "ASSAY" for assay channels used in CHIMERA.
//
// Available         5.0.5
//-----------------------------------------------------------------------------------------------------------

[_public] int iClassChanList_DB(DB,       // Database
                                VV,       // VV to populate, must be type INT.
                                string);  // Class name to match ("" for all)


  
//-----------------------------------------------------------------------------------------------------------
// iExistChan_DB See if the specified channel exists in the database.
//
// Returns       0 - Symbol does not exist in the database
//               1 - Symbol Exists
//
// Notes         See notes for iExistSymb_DB.
//               Introduced in v5.1.3.
//               iExistChan_DB searches using the exact channel name.
//
// Available     5.1.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iExistChan_DB(DB,       // Database
                            string);  // Name of Channel


  
//-----------------------------------------------------------------------------------------------------------
// iExistSymb_DB This method checks to see if the specified symbol exists
//               in the database.
//
// Returns       0 - Symbol does not exist in the database
//               1 - Symbol Exists
//
// Notes         For backward compatibility with GXs not employing the
//               GetXYZChan_DB function, the following behaviour has
//               been introduced as of v5.1.3:  (also true for "Y").
//               
//               iExistSymb_DB(hDB, "X", DB_SYMB_CHAN) is now equivalent to:
//               
//               GetXYZChan_DB(hDB, DB_CHAN_X, sXCh);
//               iExistSymb_DB(hDB, sXCh, DB_SYMB_CHAN);
//               
//               In other words, the current X or Y is searched for, not
//               necessarily the literal "X" or "Y". This ensures that newer
//               databases, which might have "Easting" and "Northing"
//               (or other similar names) instead of "X" and "Y" will still
//               work with older GXs expecting "X" and "Y".
//               
//               The new iExistChan_DB searches using the exact channel name.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iExistSymb_DB(DB,       // Database
                            string,   // Name of Symbol
                            int);     // DB_SYMB_TYPE


  
//-----------------------------------------------------------------------------------------------------------
// iValidSymb_DB This method checks to see if the specified symbol is a valid symbol in the database.
//
// Returns       0 - Invalid symbol 
//               1 - Symbol is valid
//
// Available     9.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iValidSymb_DB(DB,        // Database
                            DB_SYMB,   // Symbol to check
                            int);      // DB_SYMB_TYPE


  
//-----------------------------------------------------------------------------------------------------------
// iGetSymbLock_DB Determines if a symbol is locked
//
// Returns         DB_LOCK
//
// Available       6.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetSymbLock_DB(DB,        // Database
                              DB_SYMB);  // Symbol to Lock


  
//-----------------------------------------------------------------------------------------------------------
// IGetXYZChan_DB Gets current X, Y or Z channel name
//
// Notes          searches for the "current" X, Y or Z channel.
//                If none is defined, then returns "X", "Y" or "Z".
//
// Available      5.1.3
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetXYZChan_DB(DB,           // hDB - Database object
                              int,          // DB_CHAN_SYMBOL
                              var string,   // Returned name
                              int);         // Buffer length
#define GetXYZChan_DB(db, chan_symb, chan) IGetXYZChan_DB(db, chan_symb, chan, sizeof(chan))


  
//-----------------------------------------------------------------------------------------------------------
// iSymbList_DB Place a list of symbols in a VV.
//
// Returns      Number of symbols.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iSymbList_DB(DB,    // Database
                           VV,    // VV to populate, must be type INT.
                           int);  // DB_SYMB_TYPE


  
//-----------------------------------------------------------------------------------------------------------
// LineLST_DB Load a LST with database lines.
//
// Notes      Populates a LST with channel symbols.
//            The name is put into the "Name" part of the LST (0),
//            and the handle, an integer value written as a string, is
//            placed in the value part of the LST (1).
//            The LST is cleared first, and the items are sorted in logical line order.
//
// Available  6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void LineLST_DB(DB,    // Database
                          LST);  // List to Populate (construct with CreateSymbLST_DB)


  
//-----------------------------------------------------------------------------------------------------------
// LockSymb_DB Locks a symbol for READONLY or READWRITE.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LockSymb_DB(DB,        // Database
                           DB_SYMB,   // Symbol to Lock
                           int,       // DB_LOCK
                           int);      // DB_WAIT


  
//-----------------------------------------------------------------------------------------------------------
// MaskChanLST_DB Load a LST with mask channels.
//
// Notes          Loads a LST with all channels with CLASS "MASK", as well
//                as all channels containing the string "MASK", as long
//                as the CLASS for these channels is not set to something
//                other than "" or "MASK".
//                
//                This function is a duplicate of the MaskChanLST_CHIMERA
//                function, and can be used if CHIMERA is not installed.
//                
//                The LST is cleared first, and the items are sorted by name.
//                "None" is added at the end, with a handle value of "-1".
//
// Available      5.1.5
//-----------------------------------------------------------------------------------------------------------

[_public] void MaskChanLST_DB(DB,    // hDB - Database Object
                              LST);  // LST object to populate


  
//-----------------------------------------------------------------------------------------------------------
// SelectedLineLST_DB Load a LST with the selected lines.
//
// Notes              This method populates a LST object with all of the symbols
//                    of the selected lines in the database.
//                    The name is put into the "Name" part of the LST (0),
//                    and the handle, an integer value written as a string, is
//                    placed in the value part of the LST (1).
//                    
//                    Symbols are automatically sorted in logical line order.
//
// Available          5.1.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SelectedLineLST_DB(DB,    // Database
                                  LST);  // List to Populate (construct with CreateSymbLST_DB)


  
//-----------------------------------------------------------------------------------------------------------
// SetChanOrderLST_DB This method sets the channel display order for a
//                    database. The list to modify will be stored in an LST
//                    object. Call GetChanOrderLST_DB to populate the LST.
//
// Available          5.0.8
//-----------------------------------------------------------------------------------------------------------

[_public] void SetChanOrderLST_DB(DB,    // Database
                                  LST);  // LST object to modify


  
//-----------------------------------------------------------------------------------------------------------
// SetXYZChan_DB Sets current X, Y or Z channel name
//
// Notes         If the value specified is "", the internally stored value
//               is cleared, and GetXYZChan_DB will return "X", "Y" or "Z"
//               
//               This can be used, for instance, to make "Easting" and "Northing"
//               the current X and Y channels, and have GXs using the
//               GetXYZChanSymb_DB function to load "X" and "Y" work as desired.
//
// Available     5.1.3
//-----------------------------------------------------------------------------------------------------------

[_public] void SetXYZChan_DB(DB,       // hDB - Database object
                             int,      // DB_CHAN_SYMBOL
                             string);  // Channel name


  
//-----------------------------------------------------------------------------------------------------------
// StringChanLST_DB Load a LST with string-type channels.
//
// Notes            The Name of the symbol is placed in the
//                  item name and the item value is set to the symbol handle.
//                  Only channels with the string-type data (sChanType_DB < 0)
//                  are included.
//                  
//                  The LST is cleared first, and the items are sorted by name.
//
// Available        6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void StringChanLST_DB(DB,    // hDB - Database Object
                                LST);  // LST object to populate


  
//-----------------------------------------------------------------------------------------------------------
// SymbLST_DB Populate a LST with database symbols.
//
// Notes      Populates a LST with channel, line, blob or user symbols.
//            The name is put into the "Name" part of the LST (0),
//            and the handle, an integer value written as a string, is
//            placed in the value part of the LST (1).
//            
//            Line symbols are automatically sorted in logical line order.
//            
//            NOTE: The LST is NOT cleared before being filled. If you
//            want to clear the LST and get sorted values, use the
//            ChanLST_DB and LineLST_DB functions.
//
// See also   ChanLST_DB, LineLST_DB, SelectedLineLST_DB
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SymbLST_DB(DB,    // Database
                          LST,   // List to Populate (construct with CreateSymbLST_DB)
                          int);  // DB_SYMB_TYPE


  
//-----------------------------------------------------------------------------------------------------------
// UnLockAllSymb_DB UnLocks all symbols.
//
// Available        5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void UnLockAllSymb_DB(DB);  // Database


  
//-----------------------------------------------------------------------------------------------------------
// UnLockSymb_DB UnLocks a symbol.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void UnLockSymb_DB(DB,        // Database
                             DB_SYMB);  // Symbol to Lock



//===========================================================================================================
//
// VA Channels Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// AddAssociatedLoad_DB Add this channel to the auto-load feature of the group.
//
// Notes                If the channel is not yet associated, it is first associated.
//                      If the channel is already in the associated-load list, this
//                      does nothing.
//                      
//                      As of v6.0, the load-status of channels is no longer stored
//                      in the database, but in the project, so this function is
//                      equivalent to calling Associate_DB.
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void AddAssociatedLoad_DB(DB,        // hDB - Shared Database
                                    DB_SYMB,   // Line
                                    DB_SYMB);  // Channel


  
//-----------------------------------------------------------------------------------------------------------
// AddComment_DB Add a comment with a string to the activity log of the database.
//
// Notes         The comment is written in the form:
//               
//               Comment: String2
//               
//               and is followed by a carriage return.
//               The activity log is created automatically if it does not exist.
//
// Available     5.0.8
//-----------------------------------------------------------------------------------------------------------

[_public] void AddComment_DB(DB,       // Database Object
                             string,   // Comment
                             string,   // String
                             int);     // Indent comment one tab? (TRUE or FALSE)


  
//-----------------------------------------------------------------------------------------------------------
// AddIntComment_DB Add a comment with an integer to the activity log of the database.
//
// Notes            The comment is written in the form:
//                  
//                  Comment: Value
//                  
//                  and is followed by a carriage return.
//                  The activity log is created automatically if it does not exist.
//                  
//                  See Notes in AddComment_DB.
//
// Available        5.0.8
//-----------------------------------------------------------------------------------------------------------

[_public] void AddIntComment_DB(DB,       // Database Object
                                string,   // Comment
                                int,      // Value
                                int);     // Indent comment one tab?


  
//-----------------------------------------------------------------------------------------------------------
// AddRealComment_DB Add a comment with a float value to the activity log of the database.
//
// Notes             The comment is written in the form:
//                   
//                   Comment: Value
//                   
//                   and if followed by a carriage return.
//                   The activity log is created automatically if it does not exist.
//                   
//                   See Notes in AddComment_DB.
//
// Available         5.0.8
//-----------------------------------------------------------------------------------------------------------

[_public] void AddRealComment_DB(DB,       // Database Object
                                 string,   // Comment
                                 real,     // Value
                                 int);     // Indent comment one tab?


  
//-----------------------------------------------------------------------------------------------------------
// AddTimeComment_DB Add a comment with the date and time to the activity log of the database.
//
// Notes             The comment is written in the form:
//                   
//                   Comment: 2001/12/31 23:59:59
//                   
//                   and is followed by a carriage return.
//                   The activity log is created automatically if it does not exist.
//                   
//                   See Notes in AddComment_DB.
//
// Available         5.0.8
//-----------------------------------------------------------------------------------------------------------

[_public] void AddTimeComment_DB(DB,       // Database Object
                                 string,   // Comment
                                 int);     // Indent comment one tab?


  
//-----------------------------------------------------------------------------------------------------------
// Associate_DB Associate a channel with a group.
//
// Notes        If it is already associated, or if the group has no
//              defined group class, does nothing.
//              
//              As of v6.3, if a group line has no class defined, then ALL
//              channels are assumed to be associated with it. This means
//              that you need to associate a new channel with a group only in
//              those cases where the group class is defined.
//              
//              If this function is used on a group with a group class, then
//              the channel is added to class's association list, and the
//              channel will be recognized as being associated with all
//              groups of that class.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Associate_DB(DB,        // hDB - Shared Database
                            DB_SYMB,   // Group line
                            DB_SYMB);  // Channel


  
//-----------------------------------------------------------------------------------------------------------
// AssociateAll_DB Associate all channels with a group.
//
// Notes           As of v6.3, if a group line has no class defined, then ALL
//                 channels are already assumed to be associated with it, and this
//                 function does nothing.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void AssociateAll_DB(DB,        // hDB - Shared Database
                               DB_SYMB);  // Group line


  
//-----------------------------------------------------------------------------------------------------------
// AssociateClass_DB Associate a channel with all groups of a specific class.
//
// Notes             As of v6.3, if a group line has no class defined, then ALL
//                   channels are automatically assumed to be associated with it.
//
// Available         5.1.1
//-----------------------------------------------------------------------------------------------------------

[_public] void AssociateClass_DB(DB,        // hDB - Shared Database
                                 DB_SYMB,   // Channel
                                 string);   // Class name of groups to associate the channel with. (Must be defined).


  
//-----------------------------------------------------------------------------------------------------------
// GenValidChanSymb_DB Generate a valid channel name from a name candidate
//
// Available           5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GenValidChanSymb_DB(string,       // Input string
                                   var string,   // Outout string
                                   int);         // Max output string length
#define _GenValidChanSymb_DB(str_in, str_out) GenValidChanSymb_DB(str_in, str_out, sizeof(str_out))


  
//-----------------------------------------------------------------------------------------------------------
// GenValidLineSymb_DB Generate a valid line symb name string from given string.
//
// Notes               The returned name is either the same size as the input
//                     or shorter. Escapes, leading and trailing spaces are removed, then
//                     all illegal characters are replaced with an underscore.
//
// Available           6.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GenValidLineSymb_DB(string,       // Input string
                                   var string,   // Outout string
                                   int);         // Max output string length
#define _GenValidLineSymb_DB(str_in, str_out) GenValidLineSymb_DB(str_in, str_out, sizeof(str_out))


  
//-----------------------------------------------------------------------------------------------------------
// GetChanVA_DB Place the contents of a channel in a VA.
//
// See also     VA class.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GetChanVA_DB(DB,        // Database
                            DB_SYMB,   // Line
                            DB_SYMB,   // Channel
                            VA);       // VA in which to place the data


  
//-----------------------------------------------------------------------------------------------------------
// GetVAScaling_DB Get base and range for VA channel cell display.
//
// Notes           See SetVAScaling_DB.
//
// Available       5.1.5
//-----------------------------------------------------------------------------------------------------------

[_public] void GetVAScaling_DB(DB,         // hDB
                               DB_SYMB,    // Channel (Locked DB_LOCK_READWRITE)
                               var real,   // Base value (rDummy for none)
                               var real);  // Range value (rDummy for none)


  
//-----------------------------------------------------------------------------------------------------------
// GetVAWindows_DB Get the range of windows displayed for a VA channel.
//
// Notes           See SetVAWindows_DB.
//
// Available       5.1.5
//-----------------------------------------------------------------------------------------------------------

[_public] void GetVAWindows_DB(DB,        // hDB
                               DB_SYMB,   // Channel (Locked DB_LOCK_READWRITE)
                               var int,   // First window (0 to N-2, iDummy for default)
                               var int);  // Last window (1 to N-1, iDummy for default)


  
//-----------------------------------------------------------------------------------------------------------
// SetVABaseCoordinateInfo_DB Set the array channel base coordinate type, offset and values.
//
// Notes                      See GetVABaseCoordinateInfo_DB.
//
// Available                  8.2
//-----------------------------------------------------------------------------------------------------------

[_public] void SetVABaseCoordinateInfo_DB(DB,        // hDB
                                          DB_SYMB,   // Channel (Locked DB_LOCK_READWRITE)
                                          int,       // DB_ARRAY_BASETYPE
                                          real,      // Optional offset or base frequency
                                          VV,        // Values (one per array channel column) (REAL)
                                          string,    // Units
                                          int);      // Allow changes to existing values?


  
//-----------------------------------------------------------------------------------------------------------
// GetVABaseCoordinateInfo_DB Set the array channel base coordinate type, offset and values.
//
// Notes                      See SetVABaseCoordinateInfo_DB.
//
// Available                  8.2
//-----------------------------------------------------------------------------------------------------------

[_public] void GetVABaseCoordinateInfo_DB(DB,           // hDB
                                          DB_SYMB,      // Channel (Locked DB_LOCK_READONLY)
                                          var int,      // DB_ARRAY_BASETYPE
                                          var real,     // Optional offset or base frequency
                                          VV,           // Values (one per array channel column) (REAL)
                                          var string,   // Units
                                          int);         // Size of units string
#define _GetVABaseCoordinateInfo_DB(db, ch, domain, base, vv, units) GetVABaseCoordinateInfo_DB(db, ch, domain, base, vv, units, sizeof(units))


  
//-----------------------------------------------------------------------------------------------------------
// IGetGroupClass_DB Set the Class name for a group line.
//
// Notes             This method fails if the line is not a group line.
//                   Group classes are used to identify group lines used for
//                   special purposes, e.g.: "COLLAR" for the Wholeplot collar table,
//                   or "TARGETS" for the UX-Detect Targets list.
//
// See also          iLineCategory_DB - to see if a line is a group line.
//
// Available         5.0.8
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetGroupClass_DB(DB,           // hDB - Shared Database
                                 DB_SYMB,      // Group line - DB_LOCK_READWRITE or DB_LOCK_READONLY
                                 var string,   // Returned class name - max size = DB_GROUP_CLASS_SIZE - 1
                                 int);         // Buffer size
#define GetGroupClass_DB(db, symb, cl) IGetGroupClass_DB(db, symb, cl, sizeof(cl))


  
//-----------------------------------------------------------------------------------------------------------
// iGetInfo_DB Get information about the database.
//
// Returns     x - Return Value
//
// Available   7.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iGetInfo_DB(DB,    // Database Object
                          int);  // DB_INFO


  
//-----------------------------------------------------------------------------------------------------------
// IGetVAProfColorFile_DB Get colors for a VA channel when displayed in the profile window.
//
// Notes                  See SetVAProfColorFile_DB.
//
// Available              5.1.5
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetVAProfColorFile_DB(DB,           // hDB
                                      DB_SYMB,      // Channel (Locked DB_LOCK_READWRITE)
                                      var string,   // Zone file name, "" to clear.
                                      int);         // Buffer size for string
#define GetVAProfColorFile_DB(db, ch, file) IGetVAProfColorFile_DB(db, ch, file, sizeof(file))


  
//-----------------------------------------------------------------------------------------------------------
// IGetVAProfSectOption_DB Get the display options of VA channels
//
// Available               5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetVAProfSectOption_DB(DB,           // hDB
                                       DB_SYMB,      // Channel (Locked DB_LOCK_READWRITE)
                                       var string,   // Option  "Profile", "Section" or "Section and Profile"
                                       int);         // Buffer size for string
#define GetVAProfSectOption_DB(db, ch, option) IGetVAProfSectOption_DB(db, ch, option, sizeof(option))


  
//-----------------------------------------------------------------------------------------------------------
// IGetVASectColorFile_DB Get colors for a VA channel when displayed section in the profile window.
//
// Notes                  Fails in the channel is not an array channel
//
// Available              5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetVASectColorFile_DB(DB,           // hDB
                                      DB_SYMB,      // Channel (Locked DB_LOCK_READWRITE)
                                      var string,   // Zone file name
                                      int);         // Buffer size for string
#define GetVASectColorFile_DB(db, ch, file) IGetVASectColorFile_DB(db, ch, file, sizeof(file))


  
//-----------------------------------------------------------------------------------------------------------
// iIsAssociated_DB Check to see if a channel is associated with group.
//
// Returns          0 if not a group line, or if the channel is not associated.
//                  
//                  As of v6.3, if a group line has no class defined, then ALL
//                  channels are automatically assumed to be associated with it.
//
// Available        5.1.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsAssociated_DB(DB,        // hDB - Shared Database
                               DB_SYMB,   // Line
                               DB_SYMB);  // Channel


  
//-----------------------------------------------------------------------------------------------------------
// iIsWholeplot_DB Is this a Wholeplot database?
//
// Returns         1 if it is a Wholeplot database
//                 0 if it is not.
//
// Notes           Currently checks to see if the DH_COLLAR line exists.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iIsWholeplot_DB(DB);  // Database


  
//-----------------------------------------------------------------------------------------------------------
// PutChanVA_DB Place the contents of a VA in a channel.
//
// See also     VA class.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void PutChanVA_DB(DB,        // Database
                            DB_SYMB,   // Line
                            DB_SYMB,   // Channel
                            VA);       // VA from which to get the data


  
//-----------------------------------------------------------------------------------------------------------
// SetGroupClass_DB Set the Class name for a group line.
//
// Notes            This method fails if the line is not a group line.
//                  Group classes are used to identify group lines used for
//                  special purposes. All group lines with the same class share
//                  the same list of associated channels.
//                  
//                  As of v6.3, if a group line has no class defined, then ALL
//                  channels are assumed to be associated with it. This means
//                  that a group class should only be defined when you wish to
//                  associate a subset of the available channels to group line.
//
// See also         iLineCategory_DB - to see if a line is a group line.
//                  Associate_DB - Associate a channel with a group.
//
// Available        5.0.8
//-----------------------------------------------------------------------------------------------------------

[_public] void SetGroupClass_DB(DB,        // hDB - Shared Database
                                DB_SYMB,   // Group line - DB_LOCK_READWRITE
                                string);   // DB_GROUP_CLASS_SIZE


  
//-----------------------------------------------------------------------------------------------------------
// SetVAProfColorFile_DB Set colors for a VA channel when displayed in the profile window.
//
// Notes                 Fails in the channel is not an array channel, if the
//                       file does not exist, or if it is not a valid color zone file.
//                       
//                       The individual columns in the array channel are displayed using the input
//                       zone file colors. A linear ITR from 0 to 1 is created on the color zones
//                       to map to individual channel indices (expressed as a fraction as shown below).
//                       
//                       For instance, for a file with 8 colors the ranges are as follows:
//                       
//                       Color Range
//                       Color 1    0        > value >=  0.125
//                       Color 2    0.125    > value >=  0.25
//                       Color 3    0.25     > value >=  0.375
//                       Color 4    0.375    > value >=  0.5
//                       Color 5    0.5      > value >=  0.625
//                       Color 6    0.625    > value >=  0.75
//                       Color 7    0.75     > value >=  0.875
//                       Color 8    0.875    > value >=  1.0
//                       
//                       When an array channel is displayed, the index of each element (column) is mapped
//                       into the corresponding range above using the following formula:
//                       
//                       value = (column index) / (# of columns - 1)
//                       
//                       For an array with 8 columns, you get the following values:
//                       
//                       Column   Value    Color
//                       0        0        1
//                       1        0.14     2
//                       2        0.28     3
//                       3        0.43     4
//                       4        0.57     5
//                       5        0.71     6
//                       6        0.86     7
//                       7        1.0      8
//                       
//                       The color file search path is: Local directory, then oasismontaj\tbl.
//
// Available             5.1.5
//-----------------------------------------------------------------------------------------------------------

[_public] void SetVAProfColorFile_DB(DB,        // hDB
                                     DB_SYMB,   // Channel (Locked DB_LOCK_READWRITE)
                                     string);   // Zone file name, "" to clear.


  
//-----------------------------------------------------------------------------------------------------------
// SetVAProfSectOption_DB Set the display options of VA channels
//
// Available              5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void SetVAProfSectOption_DB(DB,        // hDB
                                      DB_SYMB,   // Channel (Locked DB_LOCK_READWRITE)
                                      string);   // Option  "Profile", "Section" or "Section and Profile"


  
//-----------------------------------------------------------------------------------------------------------
// SetVAScaling_DB Set base and range for VA channel cell display.
//
// Notes           By default, VA profiles autoscale to fit in the database cell.
//                 This lets the user set a single base and range for all cells.
//                 If either input is a dummy, both are set as dummies, and autoscaling
//                 is used.
//
// Available       5.1.5
//-----------------------------------------------------------------------------------------------------------

[_public] void SetVAScaling_DB(DB,        // hDB
                               DB_SYMB,   // Channel (Locked DB_LOCK_READWRITE)
                               real,      // Base value (rDummy for none)
                               real);     // Range value (rDummy for none)


  
//-----------------------------------------------------------------------------------------------------------
// SetVASectColorFile_DB Set colors for a VA channel when displayed section in the profile window.
//
// Notes                 Fails in the channel is not an array channel, if the
//                       file does not exist, or if it is not a valid color zone file.
//
// Available             5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void SetVASectColorFile_DB(DB,        // hDB
                                     DB_SYMB,   // Channel (Locked DB_LOCK_READWRITE)
                                     string);   // Zone file name


  
//-----------------------------------------------------------------------------------------------------------
// SetVAWindows_DB Set the range of windows to display for a VA channel.
//
// Notes           Use to display a subset of the VA channel windows in the GDB.
//                 Windows index from 0.
//
// Available       5.1.5
//-----------------------------------------------------------------------------------------------------------

[_public] void SetVAWindows_DB(DB,        // hDB
                               DB_SYMB,   // Channel (Locked DB_LOCK_READWRITE)
                               int,       // First window (0 to N-1, iDummy for default)
                               int);      // Last window (0 to N-1, iDummy for default)





//*** endblock Generated


#endif
