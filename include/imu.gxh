//*** extends 'class_empty.gxh'

#ifndef HIMU_GXH_DEFINED
#define HIMU_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class IMU
//
//-----------------------------------------------------------------------------------------------------------
//
// Not a class. This is a catch-all group of functions working
// on IMG objects (see IMG). Grid operations include masking,
// trending, windowing, expanding and grid stitching.
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// IMU_BOOL_OLAP Definitions
//
// Overlapping area option
//
// IMU_BOOL_OLAP_AVE
// Overlap values are averaged
//
// IMU_BOOL_OLAP_1
// Overlap values use grid 1 value
//
// IMU_BOOL_OLAP_2
// Overlap values use grid 2 value
//
// IMU_BOOL_OLAP_MINUS
// Overlap values use (grid 1 value - grid 2 value)
//
//===========================================================================================================


#define IMU_BOOL_OLAP_AVE 0
#define IMU_BOOL_OLAP_1 1
#define IMU_BOOL_OLAP_2 2
#define IMU_BOOL_OLAP_MINUS 4


//===========================================================================================================
//
// IMU_BOOL_OPT Definitions
//
// Boolean logic option
//
// IMU_BOOL_OPT_AND
// Valid areas are only where grids overlap
//
// IMU_BOOL_OPT_OR
// Valid areas are where either grid is a valid value
//
// IMU_BOOL_OPT_XOR
// Overlap areas are dummied
//
//===========================================================================================================


#define IMU_BOOL_OPT_AND 0
#define IMU_BOOL_OPT_OR 1
#define IMU_BOOL_OPT_XOR 2


//===========================================================================================================
//
// IMU_BOOL_SIZING Definitions
//
// Sizing option
//
// IMU_BOOL_SIZING_MIN
// Output grid is sized to overlapping region
//
// IMU_BOOL_SIZING_0
// Output grid is sized to grid 1
//
// IMU_BOOL_SIZING_1
// Output grid is sized to grid 2
//
// IMU_BOOL_SIZING_MAX
// Output grid is sized to maximum combined area of both grids
//
//===========================================================================================================


#define IMU_BOOL_SIZING_MIN 0
#define IMU_BOOL_SIZING_0 1
#define IMU_BOOL_SIZING_1 2
#define IMU_BOOL_SIZING_MAX 3


//===========================================================================================================
//
// IMU_DOUBLE_CRC_BITS Definitions
//
// Bits to use in double CRC's
//
// IMU_DOUBLE_CRC_BITS_EXACT
// Exact CRC
//
// IMU_DOUBLE_CRC_BITS_DEFAULT
// Default inaccuracy in double (10 Bits)
//
// IMU_DOUBLE_CRC_BITS_MAX
// Maximum number of inaccuracy bits (51 Bits)
//
//===========================================================================================================


#define IMU_DOUBLE_CRC_BITS_EXACT 0
#define IMU_DOUBLE_CRC_BITS_DEFAULT 10
#define IMU_DOUBLE_CRC_BITS_MAX 51


//===========================================================================================================
//
// IMU_EXPAND_SHAPE Definitions
//
// Shape of output grid
//
// IMU_EXPAND_SHAPE_RECTANGLE
// 
//
// IMU_EXPAND_SHAPE_SQUARE
// 
//
//===========================================================================================================


#define IMU_EXPAND_SHAPE_RECTANGLE 0
#define IMU_EXPAND_SHAPE_SQUARE 1


//===========================================================================================================
//
// IMU_FILL_ROLLOPT Definitions
//
// Defines for Grid Filling Method Options
//
// IMU_FILL_ROLLOPT_LINEAR
// 
//
// IMU_FILL_ROLLOPT_SQUARE
// 
//
//===========================================================================================================


#define IMU_FILL_ROLLOPT_LINEAR 1
#define IMU_FILL_ROLLOPT_SQUARE 2


//===========================================================================================================
//
// IMU_FILT_DUMMY Definitions
//
// Settings for placing dummy values in grid if any of filter
// values are dummy
//
// IMU_FILT_DUMMY_NO
// 
//
// IMU_FILT_DUMMY_YES
// 
//
//===========================================================================================================


#define IMU_FILT_DUMMY_NO 0
#define IMU_FILT_DUMMY_YES 1


//===========================================================================================================
//
// IMU_FILT_FILE Definitions
//
// Flags which indicate if a file is to be used to read the
// filter values
//
// IMU_FILT_FILE_NO
// 
//
// IMU_FILT_FILE_YES
// 
//
//===========================================================================================================


#define IMU_FILT_FILE_NO 0
#define IMU_FILT_FILE_YES 1


//===========================================================================================================
//
// IMU_FILT_HZDRV Definitions
//
// Flags which indicate which type of horizontal derivative
// is being applied (X direction, Y direction, none at all)
//
// IMU_FILT_HZDRV_NO
// 
//
// IMU_FILT_HZDRV_X
// 
//
// IMU_FILT_HZDRV_Y
// 
//
//===========================================================================================================


#define IMU_FILT_HZDRV_NO 0
#define IMU_FILT_HZDRV_X 1
#define IMU_FILT_HZDRV_Y 2


//===========================================================================================================
//
// IMU_FLOAT_CRC_BITS Definitions
//
// Bits to use in float CRC's
//
// IMU_FLOAT_CRC_BITS_EXACT
// Exact CRC
//
// IMU_FLOAT_CRC_BITS_DEFAULT
// Default inaccuracy in floats (7 Bits)
//
// IMU_FLOAT_CRC_BITS_MAX
// Maximum number of inaccuracy bits (22 Bits)
//
//===========================================================================================================


#define IMU_FLOAT_CRC_BITS_EXACT 0
#define IMU_FLOAT_CRC_BITS_DEFAULT 7
#define IMU_FLOAT_CRC_BITS_MAX 22


//===========================================================================================================
//
// IMU_MASK Definitions
//
// Defined options for masking grids
//
// IMU_MASK_INSIDE
// 
//
// IMU_MASK_OUTSIDE
// 
//
//===========================================================================================================


#define IMU_MASK_INSIDE 0
#define IMU_MASK_OUTSIDE 1


//===========================================================================================================
//
// IMU_STAT_FORCED Definitions
//
// Defined options for forcing recalculating the grid values
//
// IMU_STAT_FORCED_NO
// 
//
// IMU_STAT_FORCED_YES
// 
//
//===========================================================================================================


#define IMU_STAT_FORCED_NO 0
#define IMU_STAT_FORCED_YES 1


//===========================================================================================================
//
// IMU_TRANS Definitions
//
// Transpose Options available for GridTrns_IMU
// implies original grid lines:
//
// IMU_TRANS_DEFAULT
// Can be ANY orientation
//
// IMU_TRANS_Y
// MUST be parallel to Y-Axis
//
// IMU_TRANS_X
// MUST be parallel to X-Axis
//
//===========================================================================================================


#define IMU_TRANS_DEFAULT 0
#define IMU_TRANS_Y 1
#define IMU_TRANS_X -1


//===========================================================================================================
//
// IMU_TREND Definitions
//
// Points in grid to use
//
// IMU_TREND_ALL
// 
//
// IMU_TREND_EDGE
// 
//
//===========================================================================================================


#define IMU_TREND_ALL 0
#define IMU_TREND_EDGE 1


//===========================================================================================================
//
// IMU_WIND_COORD Definitions
//
// Output grid coordinate units
//
// IMU_WIND_GRID
// 
//
// IMU_WIND_GROUND
// 
//
//===========================================================================================================


#define IMU_WIND_GRID 0
#define IMU_WIND_GROUND 1


//===========================================================================================================
//
// IMU_WIND_DUMMIES Definitions
//
// Option for handling out-of-range Z values
//
// IMU_WIND_DUMMY
// 
//
// IMU_WIND_CLIP
// 
//
//===========================================================================================================


#define IMU_WIND_DUMMY 0
#define IMU_WIND_CLIP 1


//===========================================================================================================
//
// IMU_XYZ_INDEX Definitions
//
// Flags whether to use grid index numbers as
// station numbers.
//
// IMU_XYZ_INDEX_NO
// 
//
// IMU_XYZ_INDEX_YES
// 
//
//===========================================================================================================


#define IMU_XYZ_INDEX_NO 0
#define IMU_XYZ_INDEX_YES 1


//===========================================================================================================
//
// IMU_XYZ_LABEL Definitions
//
// XYZ Label Flags
//
// IMU_XYZ_LABEL_NO
// 
//
// IMU_XYZ_LABEL_YES
// 
//
//===========================================================================================================


#define IMU_XYZ_LABEL_NO 1
#define IMU_XYZ_LABEL_YES 0





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// AggToGeoColor_IMU Create a Geosoft color grid from an aggregate.
//
// Notes             This consumes a very small amount of memory
//
// Available         5.1.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void AggToGeoColor_IMU(AGG,      // Input Aggregate
                                   string,   // Output image name
                                   IPJ,      // Projection to use
                                   real);    // Resolution (Cell Size) size to use


  
//-----------------------------------------------------------------------------------------------------------
// CRC_IMU Computes a CRC Checksum on an image.
//
// Returns CRC value
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] CRC CRC_IMU(IMG,   // Input image
                      CRC);  // Starting CRC (use CRC_INIT_VALUE if none)


  
//-----------------------------------------------------------------------------------------------------------
// CRCGrid_IMU Computes a CRC Checksum on a grid.
//
// Returns     CRC value
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] CRC CRCGrid_IMU(string,   // Grid
                          CRC);     // Starting CRC (use CRC_INIT_VALUE if none)


  
//-----------------------------------------------------------------------------------------------------------
// CRCGridInexact_IMU Computes a CRC Checksum on a grid and allows you to specify
//                    number of bits of floats/doubles to drop so that the CRC
//                    will be same even of this are changed.
//
// Returns            CRC value
//
// Notes              Very useful for testing where the last bits of accuracy
//                    are not as important.
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public] CRC CRCGridInexact_IMU(string,   // Grid
                                 CRC,      // Starting CRC (use CRC_INIT_VALUE if none)
                                 int,      // IMU_FLOAT_CRC_BITS
                                 int);     // IMU_DOUBLE_CRC_BITS


  
//-----------------------------------------------------------------------------------------------------------
// CRCInexact_IMU Computes a CRC Checksum on an image and allows you to specify
//                number of bits of floats/doubles to drop so that the CRC
//                will be same even of this are changed.
//
// Returns        CRC value
//
// Notes          Very useful for testing where the last bits of accuracy
//                are not as important.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] CRC CRCInexact_IMU(IMG,   // Input image
                             CRC,   // Starting CRC (use CRC_INIT_VALUE if none)
                             int,   // IMU_FLOAT_CRC_BITS
                             int);  // IMU_DOUBLE_CRC_BITS


  
//-----------------------------------------------------------------------------------------------------------
// DecimateCrookedSectionGrid_IMU Decimate a crooked section grid.
//
// Notes                          For decimation factor N, every MN'th value is selected
//                                for M = 0, 1, 2, ...
//                                The full distance is recalculated based on the remaining
//                                points because it will almost certainly be smaller.
//
// Available                      2023.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void DecimateCrookedSectionGrid_IMU(IMG,      // Input grid IMG
                                                int,      // :def:Decimation factor along section (>=1)
                                                int,      // :def:Decimation factor down section (>=1)
                                                string);  // File name of output grid


  
//-----------------------------------------------------------------------------------------------------------
// ExportGridWithoutDataSectionXML_IMU Export a Grid minus the data section as an XML file.
//
// Available                           7.2
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExportGridWithoutDataSectionXML_IMU(string,    // Grid
                                                     var CRC,   // CRC returned
                                                     string);   // Output XML file


  
//-----------------------------------------------------------------------------------------------------------
// ExportGridXML_IMU Export a Grid as an XML file.
//
// Available         6.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExportGridXML_IMU(string,    // Grid
                                   var CRC,   // CRC returned
                                   string);   // Output XML file


  
//-----------------------------------------------------------------------------------------------------------
// ExportRawXML_IMU Export a Grid as an XML file using a fast raw output.
//
// Available        7.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExportRawXML_IMU(IMG,       // Image
                                  var CRC,   // CRC returned
                                  string);   // Output XML file


  
//-----------------------------------------------------------------------------------------------------------
// ExportXML_IMU Export a Grid as an XML file.
//
// Available     6.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExportXML_IMU(IMG,       // Image
                               var CRC,   // CRC returned
                               string);   // Output XML file


  
//-----------------------------------------------------------------------------------------------------------
// GetZVV_IMU Extract an interpolated image value for given XY VV locations
//
// Available  5.0.8
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetZVV_IMU(IMG,   // Input grid
                            VV,    // X VV
                            VV,    // Y VV
                            VV);   // Z VV filled with values (set to be same size as X, Y)


  
//-----------------------------------------------------------------------------------------------------------
// GetZPeaksVV_IMU Same as GetZVV_IMU, but find the closest peak value to the input locations, and return
//                 				             the peak value and peak value location.
//
// Notes           The returned locations will always be a grid point location; no interpolation is performed when locating the peaks. A simple search is
//                 				done of all neighbouring points from the starting point, and once no neighbours can be located with a higher value, the search stops.
//
// Available       9.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GetZPeaksVV_IMU(IMG,   // Input grid
                                 VV,    // X VV
                                 VV,    // Y VV
                                 VV);   // Z VV filled with values (set to be same size as X, Y)


  
//-----------------------------------------------------------------------------------------------------------
// GridAdd_IMU Adds two Grid images together point-by-point.
//
// Notes       The IMG parameters MUST be of type GS_DOUBLE!
//             If not, the method will terminate.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridAdd_IMU(IMG,    // Image of first grid
                             real,   // Multiplier to operate on first grid image
                             IMG,    // Image of second grid
                             real,   // Multiplier to operate on second grid image
                             IMG);   // Output grid image


  
//-----------------------------------------------------------------------------------------------------------
// GridAGC_IMU Automatic Gain Compensation of a grid.
//
// Notes       The IMG parameters MUST be of type GS_FLOAT!
//             If not, the method will terminate.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridAGC_IMU(IMG,    // Image of input grid
                             IMG,    // Image of output grid
                             int,    // Width of filter to separate signal from background.
                             real,   // Maximum gain applied to the signal.
                             int);   // Remove background before applying gain?


  
//-----------------------------------------------------------------------------------------------------------
// GridBool_IMU Mask one grid against another using boolean logic
//              operations.
//
// Notes        The IMG parameters must be of type GS_DOUBLE!
//              If not, the method will terminate.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridBool_IMU(IMG,      // Image of first input grid
                              IMG,      // Image of second input grid
                              string,   // File name of output grid
                              int,      // IMU_BOOL_OPT
                              int,      // IMU_BOOL_SIZING
                              int);     // IMU_BOOL_OLAP


  
//-----------------------------------------------------------------------------------------------------------
// GridEdge_IMU Get grid edge points
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridEdge_IMU(string,   // Grid file name
                              VV,       // X coordinates of edge points
                              VV);      // Y coordinates of edge points


  
//-----------------------------------------------------------------------------------------------------------
// GridEdgePLY_IMU Get grid edge points
//
// Notes           Unlike GridPLY_IMU and GridPlyEx_IMU, the image is not
//                 altered. It just gives the PLY.
//
// Available       5.1.8
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridEdgePLY_IMU(IMG,   // The Grid
                                 PLY,   // PLY containing the edges.
                                 int);  // Minimum number of points in polygons (0 for all)


  
//-----------------------------------------------------------------------------------------------------------
// GridExpand_IMU Expand a grid and place dummies in the area
//                beyond the original edges.
//
// Notes          The IMG parameter MUST be of type GS_FLOAT!
//                If not, the method will terminate.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridExpand_IMU(IMG,      // Image of input grid
                                string,   // File name of output grid
                                real,     // Minimum percentage to expand the grid by
                                int,      // IMU_EXPAND_SHAPE
                                int,      // X Dimension the output grid is expanded to
                                int);     // Y Dimension the output grid is expanded to


  
//-----------------------------------------------------------------------------------------------------------
// GridExpFill_IMU Extends and fills a grid for FFT2.
//
// Available       7.2
//-----------------------------------------------------------------------------------------------------------

[_public] void GridExpFill_IMU(string,   // Name of the input grid
                               string,   // Name of the output grid
                               real,     // % expansion
                               int);     // Shape of expansion: 0 - rectangle, 1 - square


  
//-----------------------------------------------------------------------------------------------------------
// GridFill_IMU Interpolates to fill dummies, generates an output grid.
//
// Notes        The IMG parameters MUST be of type GS_FLOAT!
//              If not, the method will terminate.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridFill_IMU(IMG,    // Image of input grid
                              IMG,    // Image of output grid
                              int,    // IMU_FILL_ROLLOPT
                              int,    // Distance at which to roll off to 0
                              int,    // Maximum prediction filter length
                              int,    // Maximum prediction filter area
                              real,   // Base value to roll off to
                              real,   // Maximum amplitude allowed in grid
                              real,   // Maximum edge amplitude allowed in grid
                              int,    // Width from edge to start limiting from
                              int);   // Number of convolution passes to apply


  
//-----------------------------------------------------------------------------------------------------------
// GridFilt_IMU Applies a filter to a grid any number
//              of passes.
//
// Notes        The IMG parameters MUST be of type GS_FLOAT!
//              If not, the method will terminate.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridFilt_IMU(IMG,      // Image of first grid
                              IMG,      // Image of second grid
                              int,      // Number of passes to apply filter (>0)
                              real,     // Multiplier to apply to grid values
                              int,      // IMU_FILT_DUMMY
                              int,      // IMU_FILT_HZDRV
                              int,      // IMU_FILT_FILE
                              string,   // Name of file containing filter values
                              VV);      // VV containing filter values (if not using a file for the values) MUST BE OF TYPE 'real'


  
//-----------------------------------------------------------------------------------------------------------
// GridHead_IMU Modifies Statistics contained in a grid header.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GridHead_IMU(string,   // Name of the grid whose header is to be modified.
                            real,     // Element separation
                            real,     // Vector separation
                            real,     // Grid X Origin on ground
                            real,     // Grid Y Origin on ground
                            real);    // Grid Rotation


  
//-----------------------------------------------------------------------------------------------------------
// GridMask_IMU Create a mask grid using a set of polygon
//              coordinates defined in a separate file, then
//              masking the polygon over an input grid.
//
// Notes        The IMG parameters MUST be of type GS_DOUBLE!
//              If not, the method will terminate.
//              
//              The PLY will contain more than one polygon
//              if it was loaded from a file containing
//              coordinates of more than one polygon.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridMask_IMU(string,   // Name of input grid
                              string,   // Name of output mask grid file
                              PLY,      // Polygon containing mask coordinates
                              int);     // IMU_MASK


  
//-----------------------------------------------------------------------------------------------------------
// GridPeak_IMU Pick grid peaks.
//
// Notes        Peak test directions defines how grid peaks are to be found.
//              For example, with the 1, a grid point will be picked if its
//              value is greater than it's two neighbors in at least one
//              direction.  Up to 4 directions can be tested.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridPeak_IMU(string,   // Grid file name
                              int,      // Peak test directions (1 to 4)
                              VV,       // X of found peaks
                              VV,       // Y of found peaks
                              VV);      // Z values of found peaks


  
//-----------------------------------------------------------------------------------------------------------
// GridPLY_IMU Get the grid edge in a PLY
//
// Notes       This will optionally refresh the grid boundary PLY and return
//             the PLY.
//             
//             If the boundary is not refreshed and has never been calculated,
//             the boundary will be the bounding rectangle of the grid.
//             
//             The grid PLY will be added to existing ploygons in the passed PLY.
//
// Available   5.1
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridPLY_IMU(IMG,   // The IMG
                             PLY,   // PLY to which the bounding polygons will be added.
                             int);  // TRUE to force the boundary to be refreshed.


  
//-----------------------------------------------------------------------------------------------------------
// GridPLYEx_IMU Get the grid edge in a PLY (with min points)
//
// Notes         This will optionally refresh the grid boundary PLY and return
//               the PLY.
//               
//               If the boundary is not refreshed and has never been calculated,
//               the boundary will be the bounding rectangle of the grid.
//               
//               The grid PLY will be added to existing ploygons in the passed PLY.
//
// Available     5.1.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridPLYEx_IMU(IMG,   // The IMG
                               PLY,   // PLY to which the bounding polygons will be added.
                               int,   // TRUE to force the boundary to be refreshed.
                               int);  // Minimum number of points in polygons refreshed (0 for all)


  
//-----------------------------------------------------------------------------------------------------------
// GridReprojectAndWindow_IMU Create a new grid by reprojecting an existing grid and windowing its contents
//
// Available                  7.3
//-----------------------------------------------------------------------------------------------------------

[_public] void GridReprojectAndWindow_IMU(string,   // Input grid filename
                                          string,   // Output grid filename
                                          IPJ,      // Output grid projection
                                          real,     // Window minX (in output projection)
                                          real,     // Window maxX (in output projection)
                                          real,     // Window minY (in output projection)
                                          real);    // Window maxY (in output projection)


  
//-----------------------------------------------------------------------------------------------------------
// GridResample_IMU Create a new grid by resampling an existing grid
//
// Notes            Works only for un rotated grids.
//
// Available        7.3
//-----------------------------------------------------------------------------------------------------------

[_public] void GridResample_IMU(string,   // Input grid filename
                                string,   // Output grid filename
                                real,     // Origin X
                                real,     // Origin Y
                                real,     // Cell spacing X
                                real,     // Cell spacing Y
                                int,      // Elements in X
                                int);     // Elements in Y


  
//-----------------------------------------------------------------------------------------------------------
// GridResize_IMU Resize a grid to reduce the size not cover the outside dummies.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridResize_IMU(string,   // File name of input grid
                                string);  // File name of output grid


  
//-----------------------------------------------------------------------------------------------------------
// GridShad_IMU Create a shaded relief image.
//
// Notes        Pass GS_R8DM as parameters to obtain default values.
//              The default values are returned.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GridShad_IMU(string,     // Input image name
                            string,     // Output new shaded image
                            var real,   // Inclination 0-90 degrees (def. 45)
                            var real,   // Declination 0-360 degrees azimuth (def. 45)
                            var real);  // Vertical scale factor (distance/z unit)


  
//-----------------------------------------------------------------------------------------------------------
// RefreshShad_IMU Refresh a shaded relief image
//
// Notes           Pass GS_R8DM as parameters to obtain default values.
//                 The default values are returned.
//
// Available       9.4
//-----------------------------------------------------------------------------------------------------------

[_public] void RefreshShad_IMU(IMG,        // Input grid object
                               IMG,        // Output shaded grid object
                               var real,   // Inclination 0-90 degrees (def. 45)
                               var real,   // Declination 0-360 degrees azimuth (def. 45)
                               var real);  // Vertical scale factor (distance/z unit)


  
//-----------------------------------------------------------------------------------------------------------
// GridST_IMU Update an ST object using a grid.
//
// Notes      The input ST object is not initialized by GridST_IMU,
//            so this function can be used to accumulate statistical
//            info on more than a single grid.
//            See ST.
//
// Available  5.1.2
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridST_IMU(string,   // Grid name
                            ST);      // ST (statistics) object to fill/update


  
//-----------------------------------------------------------------------------------------------------------
// GridStat_IMU Reports statistics contained in a grid header.
//
// Notes        Statistics are returned in the parameter set
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GridStat_IMU(string,     // Name of the grid to get stats from
                            var int,    // Element type in bytes
                            var int,    // Elements in X direction
                            var int,    // Elements in Y direction
                            var real,   // X element separation
                            var real,   // Y element separation
                            var int,    // KX (storage orientation)
                            var real,   // X origin
                            var real,   // Y origin
                            var real,   // Grid Rotation
                            var real,   // Base removed
                            var real);  // Grid multiplier


  
//-----------------------------------------------------------------------------------------------------------
// GridStatComp_IMU Reports statistics contained in a grid header.
//
// Notes            Statistics are returned in the parameter set
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GridStatComp_IMU(string,     // Name of the grid to get stats from
                                var int,    // Element type: 0 - byte 1 - USHORT 2 - SHORT 3 - LONG 4 - FLOAT 5 - DOUBLE 6 - 32 byte Color (RGBx)
                                var int,    // Elements in X direction
                                var int,    // Elements in Y direction
                                var real,   // X element separation
                                var real,   // Y element separation
                                var int,    // KX (storage orientation)
                                var real,   // X origin
                                var real,   // Y origin
                                var real,   // Grid Rotation
                                var real,   // Base removed
                                var real,   // Grid multiplier
                                var real);  // Compression Ratio


  
//-----------------------------------------------------------------------------------------------------------
// GridStatExt_IMU Reports statistics of a grid's elements.
//
// Notes           If the IMU_STAT_FORCED value is set, the
//                 statistics will be recalculated.
//                 Statistics are returned in the parameter set.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GridStatExt_IMU(string,     // Name of the grid to get stats from
                               int,        // IMU_STAT_FORCED
                               var int,    // Number of valid elements in grid
                               var int,    // Number of dummies in grid
                               var real,   // Minimum grid value
                               var real,   // Maximum grid value
                               var real,   // Grid mean
                               var real);  // Grid standard deviation


  
//-----------------------------------------------------------------------------------------------------------
// GridStatTrend_IMU Reports Trend Info of a grid (for first order coefficients only).
//
// Notes             Trend Info are returned in the parameter set
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridStatTrend_IMU(string,     // Name of the grid to get stats from
                                   var int,    // Trend Valid Flag
                                   var real,   // Trend coefficient rCo
                                   var real,   // Trend coefficient rCx
                                   var real);  // Trend coefficient rCy


  
//-----------------------------------------------------------------------------------------------------------
// GridStatTrendExt_IMU Reports Extended Trend Info of a grid (for up to third order coefficients).
//
// Notes                Trend Info are returned in the parameter set
//
// Available            5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridStatTrendExt_IMU(string,     // Grid name
                                      var int,    // Trend order
                                      var int,    // Number of coefficients
                                      var real,   // Trend origin Xo
                                      var real,   // Trend origin Yo
                                      VM);        // VM hold coefficient values MUST BE OF TYPE 'real'


  
//-----------------------------------------------------------------------------------------------------------
// rSlopeStandardDeviation_IMU Return the standard deviation of the slopes.
//
// Returns                     Standard deviation of grid slopes
//
// Notes                       This method calculates the standard deviation of the horizontal
//                             differences in the X and Y directions for the supplied
//                             image.  This is useful for shading routines.  A good
//                             default scaling factor is 2.5 / standard deviation.
//                             
//                             The image will be sub-sampled to a statistically meaningful number.
//                             
//                             The cell sizes are used to determine the slopes.
//
// Available                   8.2
//-----------------------------------------------------------------------------------------------------------

[_public] real rSlopeStandardDeviation_IMU(IMG);  // Grid object


  
//-----------------------------------------------------------------------------------------------------------
// GridStitch_IMU Stitches together too grids
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridStitch_IMU(string,   // Input Grid1 name
                                string,   // Input Grid2 name
                                string,   // Output Grid name
                                int,      // Stitching method
                                int,      // Grid 1 trend removal order
                                int,      // Grid 2 trend removal order
                                int,      // Trend removal type of points to use
                                real,     // Gap for interpolation
                                int,      // Interpolation spline method
                                int,      // Path selection
                                PLY,      // PLY object for user path
                                real,     // Correction weighting
                                int);     // Width of corrections, in grid cells (8 to 256)


  
//-----------------------------------------------------------------------------------------------------------
// GridStitchCtl_IMU Stitches together two grids - control file for options.
//
// Notes             Data validation is done internally, not in the GX.
//                   This is simply a way of avoiding writing a new GX wrapper
//                   every time an option is added.
//
// Available         5.1.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridStitchCtl_IMU(string);  // Control file containing all "GRIDSTCH" parameters


  
//-----------------------------------------------------------------------------------------------------------
// GridTiff_IMU Generate a Tiff (Tagged-Image file format) file with up to 16 grids.
//
// Notes        The background color can be either selected
//              from one of 8 settings, or can be specified
//              as a combination of Reg,Green, and Blue values.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridTiff_IMU(string,   // Comma-delimited string containing names of all grids to use in Tiff generation Up to 16 grids allowed.
                              string,   // Name of Tiff file to create
                              string,   // Background color option. One of W (White)  K (Black) C (Cyan) M (Magenta) Y (Yellow) R (Red)  G (Green) B (Blue)
                              int,      // Background Red value (0-255)
                              int,      // Background Green (0-255)
                              int,      // Background Blue  (0-255)
                              real,     // New cell size
                              int,      // Pixel size of registration marks
                              real);    // Map scale


  
//-----------------------------------------------------------------------------------------------------------
// GridTrnd_IMU Remove a trend surface from a grid.
//
// Notes        Both Images must be of type GS_DOUBLE.
//              The VM parameter must be of type REAL,
//              and be of size 10 at most.
//              
//              The number of coefficients must be
//              compatible with the order of the
//              trend removed. Following is the
//              number of coefficients which should
//              be present for a given order
//              
//              ===== ======================
//              Order Number of Coefficients
//              ----- ----------------------
//              0      1
//              1      3
//              2      6
//              3      10
//              ===== ======================
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridTrnd_IMU(IMG,   // Handle to input image
                              IMG,   // Handle to output image
                              int,   // 0-calculate, 1-given, 2-replace
                              int,   // IMU_TREND
                              int,   // Trend order
                              VM,    // VM holds coefficients
                              int);  // Number of coefficients


  
//-----------------------------------------------------------------------------------------------------------
// GridTrns_IMU Transpose a grid by swapping the grid rows with
//              the grid columns.
//
// Notes        If the grid has a line orientation that does NOT
//              match the IMU_TRANS value, this method will
//              not succeed.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GridTrns_IMU(string,   // Name of the grid to transpose
                            int);     // Transpose condition value IMU_TRANS


  
//-----------------------------------------------------------------------------------------------------------
// GridVC_IMU Apply vertical continuation convolution filter to a grid.
//
// Available  9.9
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridVC_IMU(IMG,    // Input image
                            IMG,    // Output image
                            int,    // 1 to calculate continuation upward, 0 downward
                            real);  // Continuation distance


  
//-----------------------------------------------------------------------------------------------------------
// GridVD_IMU Apply vertical derivative convolution filter to a grid.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridVD_IMU(IMG,   // Input image
                            IMG);  // Output image


  
//-----------------------------------------------------------------------------------------------------------
// GridVol_IMU Calculates the grid volumes above and below a
//             reference base.
//
// Notes       Volumes are calculated above and below a
//             reference base level, and reported as positive
//             integers. A multiplier is applied to the final
//             volume (to correct for units).
//             
//             The IMG parameters MUST be of type GS_FLOAT!
//             If not, the method will terminate.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridVol_IMU(IMG,        // Image of the grid to calculate volume for
                             real,       // Reference base
                             real,       // Multiplier to final volume
                             var real,   // Grid Volume above reference base
                             var real,   // Grid Volume below reference base
                             var real);  // Differences between volumes


  
//-----------------------------------------------------------------------------------------------------------
// GridWind_IMU Create a grid using a defined area window
//              within a larger grid.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GridWind_IMU(IMG,      // Image of input grid
                            string,   // Name of output grid file
                            int,      // IMU_WIND_COORD
                            real,     // Min. limit of window in X direction (can be rDUMMY)
                            real,     // Max. limit of window in X direction (can be rDUMMY)
                            real,     // Min. limit of window in Y direction (can be rDUMMY)
                            real,     // Max. limit of window in Y direction (can be rDUMMY)
                            real,     // Minimum Z data value in output grid (can be rDUMMY)
                            real,     // Maximum Z data value in output grid (can be rDUMMY)
                            real,     // New grid cell size
                            int,      // IMU_WIND_DUMMIES
                            int,      // Decimation factor
                            string);  // Name of .MDF file for data clipping


  
//-----------------------------------------------------------------------------------------------------------
// GridWind2_IMU Window a grid.
//
// Notes         To change the cell size or work in a different projection,
//               first inherit the IMG by calling
//               
//               The windowed grid will be adjusted/expanded to include the
//               defined area and line up on an even grid cell.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GridWind2_IMU(IMG,      // Image of input grid
                             string,   // Name of output grid file
                             real,     // Minimum X, ground units (can be rDUMMY)
                             real,     // Maximum X (can be rDUMMY)
                             real,     // Minimum Y (can be rDUMMY)
                             real,     // Maximum Y (can be rDUMMY)
                             real,     // Minimum Z (can be rDUMMY)
                             real,     // Maximum Z (can be rDUMMY)
                             int);     // IMU_WIND_DUMMIES


  
//-----------------------------------------------------------------------------------------------------------
// GridXYZ_IMU Export a Grid image to an XYZ file.
//
// Notes       The IMG (image) of the grid to export must
//             be of type GS_FLOAT. If not, this method will
//             terminate with an error.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void GridXYZ_IMU(IMG,      // Image of the grid to export
                             string,   // Name of new XYZ file
                             int,      // IMU_XYZ_INDEX
                             int,      // X direction decimation factor
                             int,      // Y direction decimation factor
                             int);     // IMU_XYZ_LABEL


  
//-----------------------------------------------------------------------------------------------------------
// iGridType_IMU Reports the true data the of a grid (geosoft types)
//
// Returns       GS_TYPES
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iGridType_IMU(string);  // Name of the Grid


  
//-----------------------------------------------------------------------------------------------------------
// MakeMITabFile_IMU Make a MapInfo tab file for this grid
//
// Available         5.1.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void MakeMITabFile_IMU(string);  // Grid file name


  
//-----------------------------------------------------------------------------------------------------------
// MakeMITabfromGrid_IMU Make a MapInfo tab file for this grid as rendered in a map
//
// Available             5.1.5
//-----------------------------------------------------------------------------------------------------------

[_licensed] void MakeMITabfromGrid_IMU(string);  // Grid file name


  
//-----------------------------------------------------------------------------------------------------------
// MakeMITabfromMap_IMU Make a MapInfo tab file from this map
//
// Available            5.1.5
//-----------------------------------------------------------------------------------------------------------

[_licensed] void MakeMITabfromMap_IMU(string);  // Map file name


  
//-----------------------------------------------------------------------------------------------------------
// Mosaic_IMU Create a mosaic image of an image list.
//
// Returns    IMG Object
//
// Notes      The images are simply placed on the output image, starting with
//            the first image. Note that this function may require very large
//            amounts of virtual memory.
//
// Available  5.1.8
//-----------------------------------------------------------------------------------------------------------

[_licensed] IMG Mosaic_IMU(string,   // Image names ('|' separated)
                           string,   // Output image name ("" for a memory only image)
                           IPJ,      // Projection to use (0 to use the first grid's projection)
                           real);    // Cell size to use (rDummy to use first grid)


  
//-----------------------------------------------------------------------------------------------------------
// PeakSize_IMU Define the sizes of all the peaks in an image.
//
// Notes        Extending from the peak location of an anomaly to the inflection
//              points of the grid values along each of the 8 directions results in
//              8 radii. Anomaly size is defined as the 2*mediam of the 8 radii.
//              
//              Precision factor is used to control definition of an inflection point.
//              For points A,B, and C, B is an inflection point if (A+C)/2.0 > B. With
//              the precision factor, B is an inflection point only when
//              (A+C)/2.0 > B*(1.0+Precision factor).
//              This factor must be within (-1.0,1.0).
//              
//              Note: PeakSize2_IMU is probably a better routine...
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void PeakSize_IMU(string,   // Grid file name
                              VV,       // Peaks' X
                              VV,       // Peaks' Y
                              int,      // Maximum target diameter (window) in # of cells
                              real,     // Precision factor (see note above)
                              VV);      // Returned peak (anomaly) sizes in data units


  
//-----------------------------------------------------------------------------------------------------------
// PeakSize2_IMU Define the sizes of all the peaks in an image - new algorithm
//
// Notes         Extending from the peak location of an anomaly to the inflection
//               points of the grid values along each of the 8 directions results in
//               8 radii. Anomaly size is defined as the 2*mediam of the 8 radii.
//               
//               This algorithm uses 4 successive points d1, d2, d3 and d4 in any
//               direction. Given slopes m1 = d2-d1, m2 = d3-d2 and m3 = d4-d3,
//               an inflection point occurs between d2 and d3 if m1>m2 and m2<m3.
//               The location index is given as i3 - s2/(s2-s1), where i3 is the index
//               of d3, and s1=m2-m1 and s2=m3-m2.
//               
//               This algorithm tends to give much smaller (and more reasonable)
//               results than PeakSize_IMU.
//
// Available     5.1.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void PeakSize2_IMU(string,   // Grid file name
                               VV,       // Peaks' X
                               VV,       // Peaks' Y
                               int,      // Maximum target diameter (window) in # of cells
                               VV);      // Returned peak (anomaly) sizes in data units


  
//-----------------------------------------------------------------------------------------------------------
// PigeonHole_IMU Pigeon-hole and count points by location into a grid.
//
// Notes          X and Y location VVs are input. If a point (X, Y) is located within
//                one-half cell width from a location in the grid, then the value of
//                the grid at that location is incremented by 1.
//                The cells are inclusive at the minima, and exclusive at the maxima:
//                e.g. if dDx = dDy = 1, and dXo = dYo = 0, then the corner cell would
//                accept values  -0.5 <= X < 0.5 and -0.5 <= Y < 0.5.
//                The grid values should be set to 0 before calling this function.
//                
//                The number of points "pigeon-holed" is returned to the user.
//                This function is useful, for instance, in determining the density of
//                sample locations in a survey area.
//
// Available      5.0.8
//-----------------------------------------------------------------------------------------------------------

[_licensed] void PigeonHole_IMU(IMG,       // Input grid
                                VV,        // X locations
                                VV,        // Y locations
                                var int);  // Number of points located in the grid.


  
//-----------------------------------------------------------------------------------------------------------
// PigeonHoleColor_IMU Pigeon-hole and count points by location and color locations in another grid based on ITR information.
//
// Notes               X and Y location VVs are input. If a point (X, Y) is located within
//                                    one-half cell width from a location in the grid, then the value of
//                                    the grid at that location is incremented by 1.
//                                    The cells are inclusive at the minima, and exclusive at the maxima:
//                                    e.g. if dDx = dDy = 1, and dXo = dYo = 0, then the corner cell would
//                                    accept values  -0.5 <= X < 0.5 and -0.5 <= Y < 0.5.
//                                    The grid values should be set to 0 before calling this function.
//                     
//                     					The color grid locations are coloured by the number of items at each location,
//                     					with the colour being determined by the input ITR, which should map the integer
//                     					count values 1, 2, 3, etc. onto individual colours.				
//                     
//                                    The number of points "pigeon-holed" is returned to the user.
//                                    This function is useful, for instance, in determining the density of
//                                    sample locations in a survey area.
//
// Available           9.6
//-----------------------------------------------------------------------------------------------------------

[_licensed] void PigeonHoleColor_IMU(IMG,       // Input grid
                                     IMG,       // Input color grid
                                     VV,        // X locations
                                     VV,        // Y locations
                                     ITR,       // Input color transform
                                     var int);  // Number of points located in the grid.


  
//-----------------------------------------------------------------------------------------------------------
// Profile_IMU Extract a profile from a grid.
//
// Notes       Returned VV will start at X1,Y1 and will sample
//             up to X2,Y2 at the specified separation.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Profile_IMU(IMG,    // Input image
                             real,   // X1
                             real,   // Y1
                             real,   // X2
                             real,   // Y2
                             real,   // Sample separation, if 0.0, use grid cell size
                             VV);    // VV in which to place result


  
//-----------------------------------------------------------------------------------------------------------
// ProfileVV_IMU Extract a VV profile from a grid.
//
// See also      iGetPolyLine_DBE
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ProfileVV_IMU(IMG,   // Input image
                               VV,    // X VV coordinates
                               VV,    // Y VV coordinates
                               VV);   // VV in which to place result


  
//-----------------------------------------------------------------------------------------------------------
// RangeGrids_IMU Determine bounding rectangle for a set of grids
//
// Notes          If an IPJ is IPJ_CS_UNKNOWN, the
//                IPJ of the first grid in the list will be used and
//                the IPJ will be returned in this setting.
//                Otherwise, the range in the requested IPJ will be
//                determined.
//
// Available      5.1.8
//-----------------------------------------------------------------------------------------------------------

[_licensed] void RangeGrids_IMU(string,     // List of grid files, "|" delimited
                                IPJ,        // Projection for the range - see notes
                                var real,   // Min X - returned range in the projection
                                var real,   // Min Y
                                var real,   // Max X
                                var real);  // Max Y


  
//-----------------------------------------------------------------------------------------------------------
// RangeLL_IMU Determine the range in lat. and long. of a projected grid
//
// Notes       This routine determines the latitude and longitudes along the
//             edge of a grid and returns the minimal and maximal values.
//             It scans each row and and column and finds the first non-dummy
//             position at the start and end, and then determines the coordinates
//             at those points.
//             If the grid has no data, no IPJ object, or if the Source Type of
//             the IPJ is not IPJ_TYPE_PCS (projected coordinate system), then the
//             returned values are dummies (GS_R8DM).
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void RangeLL_IMU(IMG,        // Input image
                             var real,   // Min latitude
                             var real,   // Min longitude
                             var real,   // Max latitude
                             var real);  // Max longitude


  
//-----------------------------------------------------------------------------------------------------------
// StatWindow_IMU Calculate grid statistics in a window
//
// Notes          The maximum values needed will beused to
//                decimate the sampling of the grid in order to
//                improve performance.  100000 is often a good
//                number when absolute precision is not
//                required.
//
// Available      5.0.5
//-----------------------------------------------------------------------------------------------------------

[_licensed] void StatWindow_IMU(IMG,    // Name of the grid to get stats from
                                real,   // Min X window
                                real,   // Min Y window
                                real,   // Max X window
                                real,   // Max Y window
                                int,    // Maximum values needed, 0 for all
                                ST);    // ST object, stats are accumulated


  
//-----------------------------------------------------------------------------------------------------------
// UpdatePLY_IMU Update the grid boundary in the grid metadata
//
// Notes         You can call the GridEdgePLY function to get an edge,
//               perhaps alter the edge, such as thin it to a reasonable
//               resolution, then put set it as the grid boundary by
//               calling this funtion.  This is similar to the
//               GridPLYEx function except that you get to alter the
//               PLY before it is placed back in the IMG.
//
// Available     6.2
//-----------------------------------------------------------------------------------------------------------

[_licensed] void UpdatePLY_IMU(IMG,   // The Grid
                               PLY);  // PLY containing the edges.



//===========================================================================================================
//
// Deprecated Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// GridInFill_IMU Fill in a ribbon along the edge and inside hollow areas of the grid
//
// Available      7.2
//-----------------------------------------------------------------------------------------------------------

[_public] void GridInFill_IMU(IMG,      // Image of input grid
                              string,   // Name of the output grid
                              int,      // Number of cells to extend ribbon along the edge
                              int);     // Number of iterations to fill inside hollow areas





//*** endblock Generated


#endif
