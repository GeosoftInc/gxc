//*** extends 'class_empty.gxh'

#ifndef HMVU_GXH_DEFINED
#define HMVU_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class MVU
//
//-----------------------------------------------------------------------------------------------------------
//
// A catchall library for methods using the MAP and MVIEW classes.
// These include drawing flight paths, legends, postings, and
// special objects such as histograms and bar charts.
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block
//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// EMLAY_GEOMETRY Definitions
//
// Type of Geometry
//
// EMLAY_V_COPLANAR
// 0
//
// EMLAY_H_COPLANAR
// 1
//
// EMLAY_V_COAXIAL
// 2
//
//===========================================================================================================


#define EMLAY_V_COPLANAR 0
#define EMLAY_H_COPLANAR 1
#define EMLAY_V_COAXIAL 2


//===========================================================================================================
//
// ARROW_ALIGNMENT Definitions
//
// Direction of alignment
//
// ARROW_ALIGNMENT_HORIZONTAL
// 
//
// ARROW_ALIGNMENT_VERTICAL
// 
//
//===========================================================================================================


#define ARROW_ALIGNMENT_HORIZONTAL 0
#define ARROW_ALIGNMENT_VERTICAL 1


//===========================================================================================================
//
// BARCHART_LABEL Definitions
//
// Place to draw bar labels
//
// BARCHART_LABEL_NO
// No label
//
// BARCHART_LABEL_BELOWX
// Label below X axis
//
// BARCHART_LABEL_ABOVEX
// Label above X axis
//
// BARCHART_LABEL_PEND
// Label at positive end of bar
//
// BARCHART_LABEL_NEND
// Label at negative end of bar
//
// BARCHART_LABEL_ALTERNAT1
// Label at alternative ends,1st label at positive end
//
// BARCHART_LABEL_ALTERNAT2
// Label at alternative ends,1st label at negative end
//
//===========================================================================================================


#define BARCHART_LABEL_NO 0
#define BARCHART_LABEL_BELOWX 1
#define BARCHART_LABEL_ABOVEX 2
#define BARCHART_LABEL_PEND 3
#define BARCHART_LABEL_NEND 4
#define BARCHART_LABEL_ALTERNAT1 5
#define BARCHART_LABEL_ALTERNAT2 6


//===========================================================================================================
//
// COLORBAR_LABEL Definitions
//
// Label text orientation
//
// COLORBAR_LABEL_HORIZONTAL
// (default)
//
// COLORBAR_LABEL_VERTICAL
// Gives text an orientation of -90 degrees
//
//===========================================================================================================


#define COLORBAR_LABEL_HORIZONTAL 0
#define COLORBAR_LABEL_VERTICAL 1


//===========================================================================================================
//
// COLORBAR_STYLE Definitions
//
// Label text orientation
//
// COLORBAR_STYLE_NONE
// Don't draw
//
// COLORBAR_STYLE_MAXMIN
// Post max/min values
//
//===========================================================================================================


#define COLORBAR_STYLE_NONE 0
#define COLORBAR_STYLE_MAXMIN 1


//===========================================================================================================
//
// MVU_ORIENTATION Definitions
//
// Orientation (of whatever)
//
// MVU_ORIENTATION_VERTICAL
// Vertical
//
// MVU_ORIENTATION_HORIZONTAL
// Horizontal
//
//===========================================================================================================


#define MVU_ORIENTATION_VERTICAL 0
#define MVU_ORIENTATION_HORIZONTAL 1


//===========================================================================================================
//
// MVU_DIVISION_STYLE Definitions
//
// Orientation (of whatever)
//
// MVU_DIVISION_STYLE_NONE
// No division marks
//
// MVU_DIVISION_STYLE_LINES
// Division line
//
// MVU_DIVISION_STYLE_TICS
// Inside tics, both sides
//
//===========================================================================================================


#define MVU_DIVISION_STYLE_NONE 0
#define MVU_DIVISION_STYLE_LINES 1
#define MVU_DIVISION_STYLE_TICS 2


//===========================================================================================================
//
// MVU_ARROW Definitions
//
// Type Arrow. These definitions are used as binary flags, and can be
// used together by passing sums.
//
// MVU_ARROW_SOLID
// Plot the head as a solid triangle, otherwise plot a "stick arrow"
// with three lines for the tail and two barbs.
//
// MVU_ARROW_FIXED
// If used, input the actual length of the barbs on the arrow, in
// view X-axis units, as measured along the tail. If not used, enter the ratio
// between the length of the barbs and full length of the arrow (e.g. 0.4).
// In the latter case, the longer the arrow, the bigger the arrow head.
//
//===========================================================================================================


#define MVU_ARROW_SOLID 1
#define MVU_ARROW_FIXED 2


//===========================================================================================================
//
// MVU_FLIGHT_COMPASS Definitions
//
// Compass direction
//
// MVU_FLIGHT_COMPASS_NONE
// 
//
// MVU_FLIGHT_COMPASS_EAST
// 
//
// MVU_FLIGHT_COMPASS_NORTH
// 
//
// MVU_FLIGHT_COMPASS_WEST
// 
//
// MVU_FLIGHT_COMPASS_SOUTH
// 
//
//===========================================================================================================


#define MVU_FLIGHT_COMPASS_NONE -1
#define MVU_FLIGHT_COMPASS_EAST 0
#define MVU_FLIGHT_COMPASS_NORTH 1
#define MVU_FLIGHT_COMPASS_WEST 2
#define MVU_FLIGHT_COMPASS_SOUTH 3


//===========================================================================================================
//
// MVU_FLIGHT_DUMMIES Definitions
//
// Show Dummies
//
// MVU_FLIGHT_DUMMIES_NOTINCLUDED
// 
//
// MVU_FLIGHT_DUMMIES_INCLUDED
// 
//
//===========================================================================================================


#define MVU_FLIGHT_DUMMIES_NOTINCLUDED 0
#define MVU_FLIGHT_DUMMIES_INCLUDED 1


//===========================================================================================================
//
// MVU_FLIGHT_LOCATE Definitions
//
// Line label locations
//
// MVU_FLIGHT_LOCATE_NONE
// No label
//
// MVU_FLIGHT_LOCATE_END
// ::
// 
//     L100.2 -------------------------- L100.2
// 
// dOffA controls distance from label to line.
// dOffB controls vertical offset from center.
//
// MVU_FLIGHT_LOCATE_ABOVE
// ::
// 
//     L100.2                            L100.2
//     ----------------------------------------
// 
// dOffA controls label distance above the line.
// dOffB controls offset in from line end.
//
// MVU_FLIGHT_LOCATE_BELOW
// ::
// 
//     ----------------------------------------
//     L100.2                            L100.2
// 
// dOffA controls label distance below the line.
// dOffB controls offset in from line end.
//
// MVU_FLIGHT_DIRECTION
// To add '>' to label to indicate direction, for example:
// MVU_FLIGHT_LOCATE_END+MVU_FLIGHT_DIRECTION
//
//===========================================================================================================


#define MVU_FLIGHT_LOCATE_NONE 0
#define MVU_FLIGHT_LOCATE_END 1
#define MVU_FLIGHT_LOCATE_ABOVE 2
#define MVU_FLIGHT_LOCATE_BELOW 3
#define MVU_FLIGHT_DIRECTION 8


//===========================================================================================================
//
// MVU_VOX_SURFACE_METHOD Definitions
//
// TODO
//
// MVU_VOX_SURFACE_METHOD_MARCHING_CUBES
// 
//
//===========================================================================================================


#define MVU_VOX_SURFACE_METHOD_MARCHING_CUBES 0


//===========================================================================================================
//
// MVU_VOX_SURFACE_OPTION Definitions
//
// TODO
//
// MVU_VOX_SURFACE_OPTION_OPEN
// 
//
// MVU_VOX_SURFACE_OPTION_CLOSED
// 
//
//===========================================================================================================


#define MVU_VOX_SURFACE_OPTION_OPEN 0
#define MVU_VOX_SURFACE_OPTION_CLOSED 1


//===========================================================================================================
//
// MVU_TEXTBOX Definitions
//
// Type of Box
//
// MVU_TEXTBOX_LEFT
// 
//
// MVU_TEXTBOX_CENTER
// 
//
// MVU_TEXTBOX_RIGHT
// 
//
//===========================================================================================================


#define MVU_TEXTBOX_LEFT 0
#define MVU_TEXTBOX_CENTER 1
#define MVU_TEXTBOX_RIGHT 2


//===========================================================================================================
//
// MVU_VPOINT Definitions
//
// Head Acuteness
//
// MVU_VPOINT_SHARP
// 
//
// MVU_VPOINT_MEDIUM
// 
//
// MVU_VPOINT_BLUNT
// 
//
//===========================================================================================================


#define MVU_VPOINT_SHARP 0
#define MVU_VPOINT_MEDIUM 1
#define MVU_VPOINT_BLUNT 2


//===========================================================================================================
//
// MVU_VPOS Definitions
//
// Head Position
//
// MVU_VPOS_HEAD
// 
//
// MVU_VPOS_MIDDLE
// 
//
// MVU_VPOS_TAIL
// 
//
//===========================================================================================================


#define MVU_VPOS_HEAD 0
#define MVU_VPOS_MIDDLE 1
#define MVU_VPOS_TAIL 2


//===========================================================================================================
//
// MVU_VSIZE Definitions
//
// Head Size
//
// MVU_VSIZE_NOHEAD
// 
//
// MVU_VSIZE_SMALLHEAD
// 
//
// MVU_VSIZE_MEDIUMHEAD
// 
//
// MVU_VSIZE_LARGEHEAD
// 
//
// MVU_VSIZE_NOTAIL
// 
//
//===========================================================================================================


#define MVU_VSIZE_NOHEAD 0
#define MVU_VSIZE_SMALLHEAD 1
#define MVU_VSIZE_MEDIUMHEAD 2
#define MVU_VSIZE_LARGEHEAD 3
#define MVU_VSIZE_NOTAIL 4


//===========================================================================================================
//
// MVU_VSTYLE Definitions
//
// Head Style
//
// MVU_VSTYLE_LINES
// 
//
// MVU_VSTYLE_BARB
// 
//
// MVU_VSTYLE_TRIANGLE
// 
//
//===========================================================================================================


#define MVU_VSTYLE_LINES 0
#define MVU_VSTYLE_BARB 1
#define MVU_VSTYLE_TRIANGLE 2





//===========================================================================================================
//
// Miscellaneous Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// Arrow_MVU Draw an arrow.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Arrow_MVU(MVIEW,   // View
                         real,    // Head X location
                         real,    // Head Y location
                         real,    // Tail X location
                         real,    // Tail Y location
                         real,    // See MVU_ARROW definitions for explanation
                         real,    // Angle of barbs with respect to the tail in degrees.
                         int);    // MVU_ARROW


  
//-----------------------------------------------------------------------------------------------------------
// ArrowVectorVV_MVU Draw arrow vectors based on input VVs.
//
// Notes             The locations are given in two VVs, and the directions
//                   in the two others. A wide range of sizes are available.
//                   If the scaling is set to rDUMMY, then arrows are automatically
//                   scaled so the largest is 1cm in length.
//                   If the line thickness is set to rDUMMY, the line thickness scales
//                   with the arrow size, and is 1/20 of the vector length.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ArrowVectorVV_MVU(MVIEW,   // View
                                 VV,      // X locations
                                 VV,      // Y locations
                                 VV,      // X Vector value (can be negative)
                                 VV,      // Y Vector value (can be negative)
                                 real,    // Scaling (units/mm)
                                 int,     // MVU_VPOS
                                 int,     // MVU_VSIZE
                                 int,     // MVU_VSTYLE
                                 int,     // MVU_VPOINT
                                 real);   // Line thickness (can be Dummy)


  
//-----------------------------------------------------------------------------------------------------------
// BarChart_MVU Plot bar chart on a map.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void BarChart_MVU(MVIEW,     // View
                            string,    // Group name
                            DB,        // Database handle
                            DB_SYMB,   // Line handle
                            string,    // Horizontal (X) axis' channel name
                            string,    // List of channel names (comma separated)
                            string,    // X axis title
                            real,      // Text size for X axis
                            string,    // Y axis title
                            real,      // Text size for Y axis
                            string,    // Overall chart title
                            real,      // Text size for overall title
                            real,      // Bar width in mm
                            int,       // Distance based (1) or fiducial based (0)
                            int,       // BARCHART_LABEL
                            int,       // Draw ticks along X axis (1) or not (0)
                            int,       // Draw right vertical axis (1) or not
                            int,       // Draw top horizontal axis (1)
                            int,       // Draw bottom horizontal axis (1) or not
                            int,       // Draw surronding box (1) or not (0) The following 4 parameters are required if drawing the surronding box
                            real,      // Width in mm between left Y axis of bar chart with left surronding line
                            real,      // Width in mm between bottom X axis of bar chart with bottom surronding line
                            real,      // Width in mm between right Y axis of bar chart with right surronding line
                            real,      // Width in mm between top X axis of bar chart with top surronding line
                            real,      // X in mm (bottom left corner of bar chart)
                            real,      // Y in mm (bottom left corner of bar chart)
                            real,      // Width of the bar chart in mm
                            real);     // Height of the bar chart in mm


  
//-----------------------------------------------------------------------------------------------------------
// CDIPixelPlot_MVU Create a color pixel-style plot of CDI data.
//
// Notes            Draws a single colored rectangle for each data point in
//                  Conductivity-Depth data (for example). It is similar to the
//                  result you get if you plot a grid with Pixel=1, but in this
//                  data the row and column widths are not necessarily constant,
//                  and the data can move up and down with topography. The pixels
//                  are sized so that the boundaries are half-way between adjacent
//                  data, both vertically and horizontally.
//
// Available        7.2
//-----------------------------------------------------------------------------------------------------------

[_licensed] void CDIPixelPlot_MVU(MVIEW,    // View
                                  string,   // Name of the group to create
                                  VA,       // Data [lNR x lNC]
                                  VA,       // Elevations (Y) [lNR x lNC]
                                  VV,       // Position (X) [lNC]
                                  ITR);     // Data color transform


  
//-----------------------------------------------------------------------------------------------------------
// CDIPixelPlot3D_MVU Create a color pixel-style plot of CDI data in a 3D view.
//
// Notes              Similar to CDIPixelPlot_MVU, but plotted onto a series of
//                    plotting planes which hang from the XY path in 3D. Each vertical plane azimuth
//                    is defined by two adjacent points on the path. The color "pixel" for each
//                    data point is plotted in two halves, with each half on adjacent plotting planes,
//                    with the bend at the data point.
//
// Available          7.2
//-----------------------------------------------------------------------------------------------------------

[_licensed] void CDIPixelPlot3D_MVU(MVIEW,    // View
                                    string,   // Name of the group to create
                                    VA,       // Data [lNR x lNC]
                                    VA,       // Elevations (Z) [lNR x lNC]
                                    VV,       // Position (X) [lNC]
                                    VV,       // Position (Y) [lNC]
                                    ITR);     // Data color transform


  
//-----------------------------------------------------------------------------------------------------------
// ColorBar_MVU Create a Color Bar in view
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ColorBar_MVU(MVIEW,   // View
                            ITR,     // Itr
                            int,     // Decimals
                            real,    // Annotation offset from box in mm.
                            real,    // Box height
                            real,    // Box width
                            real,    // X location (bottom left corner of color boxes)
                            real);   // Y location


  
//-----------------------------------------------------------------------------------------------------------
// ColorBar2_MVU Create a Color Bar from two ITR
//
// Notes         The secondary ITR is used to blend horizontally with the
//               primary ITR in each box.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ColorBar2_MVU(MVIEW,   // View
                             ITR,     //
                             ITR,     // Secondary ITR
                             int,     // Decimals
                             real,    // Annotation size
                             real,    // Box height
                             real,    // Box width
                             real,    // X location (bottom left corner of color boxes)
                             real);   // Y location


  
//-----------------------------------------------------------------------------------------------------------
// ColorBar2Style_MVU Create a Color Bar from two ITRs with style options
//
// Notes              The secondary ITR is used to blend horizontally with the
//                    primary ITR in each box.
//
// Available          5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ColorBar2Style_MVU(MVIEW,   // View
                                  ITR,     //
                                  ITR,     // Secondary ITR
                                  int,     // Decimals
                                  real,    // Annotation size
                                  real,    // Box height
                                  real,    // Box width
                                  real,    // X location (bottom left corner of color boxes)
                                  real,    // Y location
                                  int);    // COLORBAR_STYLE


  
//-----------------------------------------------------------------------------------------------------------
// ColorBarHor_MVU Create a horizontal color bar in view
//
// Notes           The sign of the annotation offset determines whether labels are
//                 plotted above or below the colorbar. Labels above are text-justified
//                 to the bottom of the text, and labels below are text-justified to
//                 the top of the text.
//
// See also        ColorBar_MVU
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ColorBarHor_MVU(MVIEW,   // View
                               ITR,     // Itr
                               int,     // Decimals
                               real,    // Annotation offset from box in mm (negative for labels below).
                               real,    // Box width in mm
                               real,    // Box height in mm
                               real,    // X location (bottom left corner of color boxes) in mm
                               real,    // Y location in mm
                               int);    // COLORBAR_LABEL


  
//-----------------------------------------------------------------------------------------------------------
// ColorBarHor2_MVU Create a Horizontal Color Bar from two ITRs
//
// Notes            The secondary ITR is used to blend horizontally with the
//                  primary ITR in each box.
//
// Available        5.1
//-----------------------------------------------------------------------------------------------------------

[_public] void ColorBarHor2_MVU(MVIEW,   // View
                                ITR,     //
                                ITR,     // Secondary ITR
                                int,     // Decimals
                                real,    // Annotation size
                                real,    // Box height
                                real,    // Box width
                                real,    // X location (bottom left corner of color boxes)
                                real,    // Y location
                                int);    // COLORBAR_LABEL


  
//-----------------------------------------------------------------------------------------------------------
// ColorBarHor2Style_MVU Create a Horizontal Color Bar from two ITRs with style options
//
// Notes                 The secondary ITR is used to blend horizontally with the
//                       primary ITR in each box.
//
// Available             5.1
//-----------------------------------------------------------------------------------------------------------

[_public] void ColorBarHor2Style_MVU(MVIEW,   // View
                                     ITR,     //
                                     ITR,     // Secondary ITR
                                     int,     // Decimals
                                     real,    // Annotation size
                                     real,    // Box height
                                     real,    // Box width
                                     real,    // X location (bottom left corner of color boxes)
                                     real,    // Y location
                                     int,     // COLORBAR_STYLE
                                     int);    // COLORBAR_LABEL


  
//-----------------------------------------------------------------------------------------------------------
// ColorBarHorStyle_MVU Create a Horizontal Color Bar in view with style options
//
// Available            5.1
//-----------------------------------------------------------------------------------------------------------

[_public] void ColorBarHorStyle_MVU(MVIEW,   // View
                                    ITR,     // Itr
                                    int,     // Decimals
                                    real,    // Annotation size
                                    real,    // Box height
                                    real,    // Box width
                                    real,    // X location (bottom left corner of color boxes)
                                    real,    // Y location
                                    int,     // COLORBAR_STYLE
                                    int);    // COLORBAR_LABEL


  
//-----------------------------------------------------------------------------------------------------------
// ColorBarStyle_MVU Create a Color Bar in view with style options
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ColorBarStyle_MVU(MVIEW,   // View
                                 ITR,     // Itr
                                 int,     // Decimals
                                 real,    // Annotation size
                                 real,    // Box height
                                 real,    // Box width
                                 real,    // X location (bottom left corner of color boxes)
                                 real,    // Y location
                                 int);    // COLORBAR_STYLE


  
//-----------------------------------------------------------------------------------------------------------
// ColorBarREG_MVU Create a Color Bar in view
//
// Notes           To allow for expansion, all parameters are passed inside the REG object.
//                 
//                 BAR_ORIENTATION        one of MVU_ORIENTATION_XXX (DEFAULT = MVU_ORIENTATION_VERTICAL)
//                 DECIMALS					decimals in plotted values (see sFormatStr_GS for rules) (DEFAULT = 1)
//                 ANNOFF						annotation offset from bar (+/- determines side of the bar left/right and below/above)
//                 BOX_SIZE               box height (mm) (width for horizontal color bar) (DEFAULT = 4)
//                 BAR_WIDTH              width (mm) (short dimension) of the color bar (DEFAULT = 8)
//                 MINIMUM_GAP            Minimum space between annotations, otherwise drop annotations (DEFAULT = 0 mm)
//                 The actual height is over-estimated, so even with zero gap there will normally always be some space between labels.
//                 FIXED_INTERVAL         Preset interval for annotations scale (DEFAULT = DUMMY, use color zones)
//                 FIXED_MINOR_INTERVAL   Preset minor interval for annotations scale (DEFAULT = DUMMY, if defined must be 1/10, 1/5, 1/4 or 1/2 of FIXED_INTERVAL)
//                 X								X location	(REQUIRED)
//                 Y								Y location	(REQUIRED)
//                 POST_MAXMIN            Post limit values at ends of the bar (0 or 1)? (DEFAULT = 0)
//                 DIVISION_STYLE         One of MVU_DIVISION_STYLE_XXX (DEFAULT = MVU_DIVISION_STYLE_LINES)
//
// Available       8.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ColorBarREG_MVU(MVIEW,   // View
                               ITR,     // Itr
                               ITR,     // Optional 2nd Itr (can be null)
                               REG);    // Parameters


  
//-----------------------------------------------------------------------------------------------------------
// ColorBarREGEx_MVU Create a Color Bar in view
//
// Notes             See ColorBarREG_MVU.  This is the same except for the
//                   additional Ranges VV parameter.        
//                   The VV is not part of the REG object, it contains the interval values for the exact interval option from an ASCII file.
//
// See also          ColorBarREG_MVU
//
// Available         9.10
//-----------------------------------------------------------------------------------------------------------

[_public] void ColorBarREGEx_MVU(MVIEW,   // View
                                 ST,      // ST with histogram info of original
                                 ITR,     // Itr
                                 ITR,     // Optional 2nd Itr (can be null)
                                 REG,     // Parameters
                                 VV);     // Ranges


  
//-----------------------------------------------------------------------------------------------------------
// Contour_MVU Creates a contour map.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Contour_MVU(MVIEW,    // View
                           string,   // Control file name
                           string);  // Grid file name


  
//-----------------------------------------------------------------------------------------------------------
// ContourPLY_MVU Creates a contour map with clipped areas.
//
// Notes          The clipping PLY can include a surrounding inclusive polygon
//                and zero, one or more interior exclusive polygons. Construct
//                a PLY object using the AddPolygonEx_PLY function, to add both
//                inclusive (as the first PLY) and exclusive interior regions.
//
// Available      5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] void ContourPLY_MVU(MVIEW,    // View
                              PLY,      // Clipping PLY
                              string,   // Control file name
                              string);  // Grid file name


  
//-----------------------------------------------------------------------------------------------------------
// CSymbLegend_MVU Plot a legend for the classified color symbols.
//
// Notes           If the symbol size, color, font etc are specified in
//                 the ITR's REG, then the Symbol scale factor is used
//                 allow the user to adjust the symbol sizes. They will be
//                 plotted at a size equal to the size in the REG times
//                 the scale factor.
//                 If no symbol size info can be found in the REG, then
//                 the symbol size is set equal to the Label Font Size.
//                 If no symbol font or number info is included in the
//                 REG, it is the programmer's responsibility to select
//                 the correct font and symbol before CSymbLegend is
//                 called. The same is true of the edge color.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void CSymbLegend_MVU(MVIEW,    // MVIEW object
                               real,     // Plot origin X
                               real,     // Plot origin Y
                               real,     // Label Font size (mm)
                               real,     // Symbol scale factor
                               string,   // AGG, ITR or ZON file name
                               string,   // Plot title
                               string);  // Plot subtitle


  
//-----------------------------------------------------------------------------------------------------------
// DecayCurve_MVU Plot decay curves at survey locations
//
// Notes          Box width and height are used to draw horizontal and vertical
//                bars. Curves outside the box are not clipped.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DecayCurve_MVU(MVIEW,    // View
                              VV,       // X coordinate VV
                              VV,       // Y coordinate VV
                              VA,       // VA channel to plot
                              VA,       // VA channel as horizontal axis (normally time channel)
                              int,      // Log option: 0 linear (default), 1 logarithm, 2 log/linear
                              real,     // Min value to apply log (must be > 0.0)
                              real,     // Angle in degrees measured CCW from East of the map
                              int,      // Draw horizontal bar: 0 none, 1 bottom, 2 top, 3 both
                              int,      // Draw vertical bar:   0 none, 1 bottom, 2 top, 3 both
                              real,     // X offset in mm: Horizontal distance between survey location and origin of the box inside which decay curvey is drawn
                              real,     // Y offset in mm
                              real,     // Box width in mm:Decay curve at each survey location is drawn within this box
                              real,     // Box height in mm
                              real,     // Minimum value for X (horizontal axis)
                              real,     // Minimum value for Y (vertical axis)
                              real,     // X scale
                              real,     // Y scale
                              real,     // Line pitch, default is 5.0mm
                              int,      // Line style
                              string);  // Line color


  
//-----------------------------------------------------------------------------------------------------------
// DirectionPlot_MVU Plot an arrow to indicate the direction of a flight line
//
// Notes             An arrow will be drawn in the direction from the first valid
//                   to the last points in the X and Y VVs.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void DirectionPlot_MVU(MVIEW,   // View
                                 VV,      // X VV
                                 VV,      // Y VV
                                 real,    // Arrow size in mm
                                 real,    // Location to draw in mm - can be X or Y depending on next parameter
                                 int);    // ARROW_ALIGNMENT


  
//-----------------------------------------------------------------------------------------------------------
// EMForward_MVU Plot an EM forward model against inverted data.
//
// Notes         This function is designed to display an inverted result beside
//               the forward model curves. This is useful for trouble-shooting
//               or understanding why a certain inversion result was obtained.
//               The earth model is a simple halfspace.
//               
//               The forward model is plotted either as a function of
//               resistivity at a single height, or as a function of height at
//               a single resistivity. In either case, the relevant VVs must be
//               completely filled (even if one is all the same value).
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void EMForward_MVU(MVIEW,   // View
                               real,    // Plot X origin
                               real,    // Plot Y origin
                               real,    // Plot X size
                               real,    // Plot Y size
                               real,    // Coil Separation (m)
                               real,    // Coil Frequency (Hz)
                               int,     // EMLAY_GEOMETRY
                               real,    // Inverted or current resistivity
                               real,    // Inverted or current height
                               real,    // In-phase datum
                               real,    // Quadrature datum
                               VV,      // Forward model resistivities
                               VV,      // Forward model heights
                               VV,      // Forward model In-phase (ppm)
                               VV,      // Forward model Quadrature (ppm)
                               int,     // Plot resistivity as linear (0) or log (1)
                               int);    // Plot as function of resistivity (0) or height (1)


  
//-----------------------------------------------------------------------------------------------------------
// ExportDatamineString_MVU Export selected map groups in a map view to a Datamine coordinate string file.
//
// Notes                    The lines, rectangles and polygons in the specified groups
//                          will be exported to a Datamine coordinate string (*.dm) file.
//                          The function attempts to duplicate the colors, etc. used.
//                          Complex polygon objects will be exported as independent
//                          single polygons.
//
// See also                 LST class
//
// Available                6.3
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExportDatamineString_MVU(MVIEW,    // View
                                          LST,      // LST with group names in the name part of the LST.
                                          string);  // Datamine string file (*.dm) to export to


  
//-----------------------------------------------------------------------------------------------------------
// ExportDXF3D_MVU Export selected map groups in a map view to an AutoCAD 3D DXF file.
//
// Notes           Supported objects exported include lines, polygons, text.
//
// See also        LST class
//
// Available       6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ExportDXF3D_MVU(MVIEW,   // View
                               LST,     // LST with group names in the name part of the LST.
                               WA);     // DXF file to export


  
//-----------------------------------------------------------------------------------------------------------
// ExportSurpacSTR_MVU Export selected map groups in a map view to a Surpac STR file.
//
// Notes               The lines, rectangles and polygons in the specified groups
//                     will be exported to a Surpac STR file. An accompanying styles
//                     file will be created which will attempt to duplicate the
//                     colors, etc. used.
//                     Complex polygon objects will be exported as independent
//                     single polygons.
//
// See also            LST class
//
// Available           6.2
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExportSurpacSTR_MVU(MVIEW,   // View
                                     LST,     // LST with group names in the name part of the LST.
                                     WA,      // STR file to export to
                                     WA);     // Styles file to export to


  
//-----------------------------------------------------------------------------------------------------------
// ExportMapGroupsToGDB_MVU Export map group(s) to database line(s).
//
// Available                9.4
//-----------------------------------------------------------------------------------------------------------

[_licensed] void ExportMapGroupsToGDB_MVU(MVIEW,   // View
                                          LST,     // LST with group names in the name part of the LST.
                                          DB);     // Database


  
//-----------------------------------------------------------------------------------------------------------
// FlightPlot_MVU Draw a flight line
//
// Notes          Current line color, thickness and style are used to
//                draw the line.
//                
//                Current font, font color and font style are used to
//                annotate the line labels.
//                
//                If current clipping is ON in the VIEW, lines will be
//                clipped to the window before plotting.  In this case,
//                labels should be located ABOVE or BELOW the line
//                traces to prevent labels being clipped.
//                
//                The offsets dOffA and dOffB control the vertical and
//                horizontal label offsets with respect to the ends of
//                the line trace and depending on the label location.
//                
//                The vertical line reference angle dVerAng is used
//                to determine if lines are considered vertical or
//                horizontal.  Vertical lines use the sUp parameter
//                to determine the label up direction.  Normally, use an
//                angle of 60 degrees unless there are lines that run in
//                this direction.
//
// See also       PathPlot_MVU
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void FlightPlot_MVU(MVIEW,    // View
                              VV,       // X
                              VV,       // Y
                              string,   // Line label
                              int,      // MVU_FLIGHT_LOCATE
                              real,     // Lines steeper than this angle are considered vertical and the up label direction is used.
                              int,      // Up label direction:   1 up is right, -1 up is left
                              real,     // Along line label offset in mm.
                              real);    // Perpendicular label offset mm.


  
//-----------------------------------------------------------------------------------------------------------
// GenAreas_MVU Generate areas from an line group.
//
// Notes        The specified line group will be used to create a new group that
//              is composed of all the resolved polygonal areas in the line group.
//              Each polygonal area is assigned a color/pattern as specified in the
//              color and pattern VV's.  Color/patterns are assigned in rotating
//              sequence.
//
// See also     ReGenAreas_MVU
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void GenAreas_MVU(MVIEW,    // View
                            string,   // Group with lines
                            VV,       // Colors  (color int)
                            VV,       // Patterns (int), must be same length at colors
                            real);    // Pattern size


  
//-----------------------------------------------------------------------------------------------------------
// GetRangeGOCADSurface_MVU Get the XYZ range of a GOCAD surface.
//
// Notes                    Required to set up a map view before doing the actual
//                          surface import.
//
// Available                6.4
//-----------------------------------------------------------------------------------------------------------

[_public] void GetRangeGOCADSurface_MVU(string,     // GOCAD file name
                                        var real,   // Min X value
                                        var real,   // Min Y value
                                        var real,   // Min Z value
                                        var real,   // Max X value
                                        var real,   // Max Y value
                                        var real);  // Max Z value


  
//-----------------------------------------------------------------------------------------------------------
// Histogram_MVU Plot the histogram on a map.
//
// Notes         This function just calls Histogram2_MVU with decimals set
//               to -7 (7 significant figures).
//
// See also      Histogram2_MVU, Histogram3_MVU
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Histogram_MVU(MVIEW,    // View
                             ST,       // ST with summary stats of original data
                             ST,       // ST with histogram info of original or log10 data
                             string,   // Title
                             string,   // Unit
                             real,     // X in mm (bottom left corner of histogram box)
                             real,     // Y in mm (bottom left corner of histogram box)
                             real,     // Box width in mm
                             real,     // Box height in mm
                             real,     // Minimum X in data unit (bottom left corner of histogram boxes)
                             real,     // Minimum Y in data unit
                             real,     // Box width in data unit
                             real,     // Box height in data unit
                             real,     // Width (mm) of the additional box for summary stats
                             int,      // Log horizontal axis: 0 - Normal, 1 - Log
                             int,      // Summary stats: 0 - do not draw, 1 - draw
                             int,      // Fill color
                             ST);      // ST with histogram for box-whisker plot (-1 for no plot)


  
//-----------------------------------------------------------------------------------------------------------
// Histogram2_MVU Plot the histogram on a map.
//
// Notes          A vertical line through from bottom to top horizontal axis is drawn
//                Also a label 'Threshold value' is plotted against this line. However,
//                None of them will be plotted if threshold value is dummy or outside
//                the X data range.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Histogram2_MVU(MVIEW,    // View
                              ST,       // ST with summary stats of original data
                              ST,       // ST with histogram info of original or log10 data
                              string,   // X axis title
                              string,   // Y axis title
                              real,     // Text size in mm for X/Y axis' titles. Accept dummy
                              string,   // Overall title. Plotted below X axis if X axis title is not given
                              real,     // Text size in mm for plot overall title. Accept dummy
                              string,   // Unit
                              real,     // X in mm (bottom left corner of histogram box)
                              real,     // Y in mm (bottom left corner of histogram box)
                              real,     // Box width in mm
                              real,     // Box height in mm
                              real,     // Minimum X in data unit (bottom left corner of histogram boxes)
                              real,     // Minimum Y in data unit
                              real,     // Box width in data unit
                              real,     // Box height in data unit
                              real,     // Width (mm) of the additional box for summary stats
                              int,      // Log horizontal axis: 0 - Normal, 1 - Log
                              int,      // Summary stats: 0 - do not draw, 1 - draw
                              int,      // Fill color
                              ST,       // ST with histogram for box-wisker plot (-1 for no plot)
                              real);    // X value (threshold value) to draw a vertical line (see notes)


  
//-----------------------------------------------------------------------------------------------------------
// Histogram3_MVU Plot the histogram on a map, specify decimals.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Histogram3_MVU(MVIEW,    // View
                              ST,       // ST with summary stats of original data
                              ST,       // ST with histogram info of original or log10 data
                              string,   // Title
                              string,   // Unit
                              real,     // X in mm (bottom left corner of histogram box)
                              real,     // Y in mm (bottom left corner of histogram box)
                              real,     // Box width in mm
                              real,     // Box height in mm
                              real,     // Minimum X in data unit (bottom left corner of histogram boxes)
                              real,     // Minimum Y in data unit
                              real,     // Box width in data unit
                              real,     // Box height in data unit
                              real,     // Width (mm) of the additional box for summary stats
                              int,      // Log horizontal axis: 0 - Normal, 1 - Log
                              int,      // Summary stats: 0 - do not draw, 1 - draw
                              int,      // Fill color
                              int,      // Decimals for data, negative for sig. fig.
                              int,      // Decimals for stats, negative for sig. fig.
                              ST);      // ST with histogram for box-whisker plot (-1 for no plot)


  
//-----------------------------------------------------------------------------------------------------------
// Histogram4_MVU As Histogram3_MVU, but allow probability scaling of percents.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Histogram4_MVU(MVIEW,    // View
                              ST,       // ST with summary stats of original data
                              ST,       // ST with histogram info of original or log10 data
                              string,   // Title
                              string,   // Unit
                              real,     // X in mm (bottom left corner of histogram box)
                              real,     // Y in mm (bottom left corner of histogram box)
                              real,     // Box width in mm
                              real,     // Box height in mm
                              real,     // Minimum X in data unit (bottom left corner of histogram boxes)
                              real,     // Minimum Y in data unit
                              real,     // Box width in data unit
                              real,     // Box height in data unit
                              real,     // Width (mm) of the additional box for summary stats
                              int,      // Log horizontal axis: 0 - Normal, 1 - Log
                              int,      // Summary stats: 0 - do not draw, 1 - draw
                              int,      // Probability scaling: 0 - linear scale, 1 - scale as normal distribution
                              int,      // Fill color
                              int,      // Decimals for data, negative for sig. fig.
                              int,      // Decimals for stats, negative for sig. fig.
                              ST);      // ST with histogram for box-whisker plot (-1 for no plot)


  
//-----------------------------------------------------------------------------------------------------------
// Histogram5_MVU As Histogram4_MVU, but allow ITR to color bars.
//
// Notes          The ITR can be empty (but must still be a valid ITR object).
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Histogram5_MVU(MVIEW,    // View
                              ST,       // ST with summary stats of original data
                              ST,       // ST with histogram info of original or log10 data
                              string,   // Title
                              string,   // Unit
                              real,     // [i] Lambda Value
                              real,     // X in mm (bottom left corner of histogram box)
                              real,     // Y in mm (bottom left corner of histogram box)
                              real,     // Box width in mm
                              real,     // Box height in mm
                              real,     // Minimum X in data unit (bottom left corner of histogram boxes)
                              real,     // Minimum Y in data unit
                              real,     // Box width in data unit
                              real,     // Box height in data unit
                              real,     // Width (mm) of the additional box for summary stats
                              int,      // Log horizontal axis: 0 - Normal, 1 - Log, 2 - Lambda
                              int,      // Summary stats: 0 - do not draw, 1 - draw
                              int,      // Probability scaling: 0 - linear scale, 1 - scale as normal distribution
                              int,      // Fill color
                              int,      // Decimals for data, negative for sig. fig.
                              int,      // Decimals for stats, negative for sig. fig.
                              ST,       // ST with histogram for box-whisker plot (-1 for no plot)
                              ITR);     // ITR to color bars.


  
//-----------------------------------------------------------------------------------------------------------
// iExportableDXF3DGroupsLST_MVU Return a LST of groups you can export using sExportDXF3D_MVU.
//
// Returns                       The number of groups in the LST.
//
// Notes                         Returns a list of visible groups that the DXF 3D export can
//                               export. Removes things like VOXD, AGG, and target
//                               groups starting with "Dh", which are typically plotted in 3D
//                               views on a reference plan oriented toward the user, and thus
//                               not exportable.
//
// Available                     7.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iExportableDXF3DGroupsLST_MVU(MVIEW,   // View
                                            LST);    // LST with group names in the name part of the LST.


  
//-----------------------------------------------------------------------------------------------------------
// iMapsetTest_MVU Test function to ensure parameters to Mapset_MVU is sane
//
// Returns         True if the parameters are good.
//
// Notes           Use ShowError_SYS to display errors that may have been encountered. This function can also be used
//                 to calculate the default scale without creating a map.
//
// Available       6.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iMapsetTest_MVU(real,       // Minimum X of data area (data units)
                              real,       // Maximum X of data area (data units)
                              real,       // Minimum Y of data area (data units)
                              real,       // Maximum Y of data area (data units)
                              string,     // Media size as a string 'x_cm,y_cm', or a standard paper size (e.g. 'A4', 'E')
                              int,        // 0 - landscape; 1 - portrait
                              int,        // 1 - map size fixed to media; 0 - map size adjusted to data and margins.
                              var real,   // Map scale (rDummy for default)
                              real,       // Conversion factor (to units/meter) (rDummy for default)
                              real,       // Left margin (cm)
                              real,       // Right margin (cm)
                              real,       // Bottom margin (cm)
                              real,       // Top margin (cm)
                              real);      // Inside data margin (cm)


  
//-----------------------------------------------------------------------------------------------------------
// iMapset2Test_MVU Test function to ensure parameters to Mapset_MVU is sane
//
// Returns          True if the parameters are good.
//
// Notes            Same as iMapsetTest_MVU, with vertical exaggeration.
//
// Available        8.3
//-----------------------------------------------------------------------------------------------------------

[_public] int iMapset2Test_MVU(real,       // Minimum X of data area (data units)
                               real,       // Maximum X of data area (data units)
                               real,       // Minimum Y of data area (data units)
                               real,       // Maximum Y of data area (data units)
                               string,     // Media size as a string 'x_cm,y_cm', or a standard paper size (e.g. 'A4', 'E')
                               int,        // 0 - landscape; 1 - portrait
                               int,        // 1 - map size fixed to media; 0 - map size adjusted to data and margins.
                               var real,   // Map scale (rDummy for default)
                               real,       // Vertical exaggeration (Normally 1.0)
                               real,       // Conversion factor (to units/meter) (rDummy for default)
                               real,       // Left margin (cm)
                               real,       // Right margin (cm)
                               real,       // Bottom margin (cm)
                               real,       // Top margin (cm)
                               real);      // Inside data margin (cm)


  
//-----------------------------------------------------------------------------------------------------------
// ImportGOCADSurface_MVU Import and plot a GOCAD surface model.
//
// Notes                  The vertex normals are not included in the
//                        GOCAD import, but are calculated using
//                        the normal of each defined triangle, and taking the
//                        average when vertex is shared among more than one triangle.
//
// Available              6.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ImportGOCADSurface_MVU(MVIEW,    // View
                                      string,   // GOCAD file name
                                      int);     // Color to plot (C_TRANSPARENT to use file-defined color).


  
//-----------------------------------------------------------------------------------------------------------
// LoadPlot_MVU Load a Geosoft PLT file into a MAP.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void LoadPlot_MVU(MAP,      // Map handle
                            string);  // Plot file name


  
//-----------------------------------------------------------------------------------------------------------
// MapFromPLT_MVU Creates a new map from a PLT file.
//
// Notes          This only creates a map, it does not read the PLT into
//                the map.  The base view and data view will be the same
//                size.
//
// See also       LoadPlot_MVU
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void MapFromPLT_MVU(MAP,      // MAP Handle
                              string,   // Name to use for the base map view
                              string,   // Name to use for the data view
                              string,   // Plot file name
                              real,     // Map paper size in X direction (cm)
                              real);    // Map paper size in Y direction (cm)


  
//-----------------------------------------------------------------------------------------------------------
// MapMDF_MVU Creates an MDF from a Map.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void MapMDF_MVU(MAP,      // MAP Handle
                          string,   // MDF file name
                          string);  // Data view name


  
//-----------------------------------------------------------------------------------------------------------
// Mapset_MVU Creates a new map directly from parameters.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Mapset_MVU(MAP,      // MAP Handle
                          string,   // Name to use for the base map view
                          string,   // Name to use for the data view
                          real,     // Minimum X of data area (data units)
                          real,     // Maximum X of data area (data units)
                          real,     // Minimum Y of data area (data units)
                          real,     // Maximum Y of data area (data units)
                          string,   // Media size as a string 'x_cm,y_cm', or a standard paper size (e.g. 'A4', 'E')
                          int,      // 0 - landscape; 1 - portrait
                          int,      // 1 - map size fixed to media; 0 - map size adjusted to data and margins.
                          real,     // Map scale (rDummy for default)
                          real,     // Conversion factor (to units/meter) (rDummy for default)
                          real,     // Left margin (cm)
                          real,     // Right margin (cm)
                          real,     // Bottom margin (cm)
                          real,     // Top margin (cm)
                          real);    // Inside data margin (cm)


  
//-----------------------------------------------------------------------------------------------------------
// Mapset2_MVU Same as Mapset_MVU, with vertical exaggeration.
//
// Available   8.3
//-----------------------------------------------------------------------------------------------------------

[_public] void Mapset2_MVU(MAP,      // MAP Handle
                           string,   // Name to use for the base map view
                           string,   // Name to use for the data view
                           real,     // Minimum X of data area (data units)
                           real,     // Maximum X of data area (data units)
                           real,     // Minimum Y of data area (data units)
                           real,     // Maximum Y of data area (data units)
                           string,   // Media size as a string 'x_cm,y_cm', or a standard paper size (e.g. 'A4', 'E')
                           int,      // 0 - landscape; 1 - portrait
                           int,      // 1 - map size fixed to media; 0 - map size adjusted to data and margins.
                           real,     // Map scale (rDummy for default)
                           real,     // Vertical Exaggeration (1.0 for none)
                           real,     // Conversion factor (to units/meter) (rDummy for default)
                           real,     // Left margin (cm)
                           real,     // Right margin (cm)
                           real,     // Bottom margin (cm)
                           real,     // Top margin (cm)
                           real);    // Inside data margin (cm)


  
//-----------------------------------------------------------------------------------------------------------
// MDF_MVU Creates a new map from an MDF file.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void MDF_MVU(MAP,      // MAP Handle
                       string,   // MDF file name
                       string,   // Name to use for the base map view
                       string);  // Name to use for the data view


  
//-----------------------------------------------------------------------------------------------------------
// PathPlot_MVU Draw a flight line
//
// Notes        See FlightPlot_MVU.  This is the same except for the
//              additional line gap parameter.
//
// See also     FlightPlot_MVU
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void PathPlot_MVU(MVIEW,    // View
                            VV,       // X
                            VV,       // Y
                            string,   // Line label
                            int,      // MVU_FLIGHT_LOCATE
                            real,     // Lines steeper than this angle are considered vertical and the up label direction is used.
                            int,      // Up label direction:   1 up is right -1 up is left
                            real,     // Along line label offset in mm.
                            real,     // Perpendicular label offset mm.
                            real);    // Maximum gap before breaking line, 0.0 for no breaks.


  
//-----------------------------------------------------------------------------------------------------------
// PathPlotEx_MVU Draw a flight line
//
// Notes          This is the same except for the additional line compass parameter.
//
// See also       PathPlot_MVU
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void PathPlotEx_MVU(MVIEW,    // View
                              VV,       // X
                              VV,       // Y
                              string,   // Line label
                              int,      // MVU_FLIGHT_LOCATE
                              int,      // MVU_FLIGHT_COMPASS
                              real,     // Lines steeper than this angle are considered vertical and the up label direction is used.
                              int,      // Up label direction:   1 up is right -1 up is left
                              real,     // Along line label offset in mm.
                              real,     // Perpendicular label offset mm.
                              real);    // Maximum gap before breaking line, 0.0 for no breaks.


  
//-----------------------------------------------------------------------------------------------------------
// PathPlotEx2_MVU Draw a flight line
//
// Notes           This is the same except for the additional line dummies parameter.
//
// See also        PathPlotEx_MVU
//
// Available       5.0.8
//-----------------------------------------------------------------------------------------------------------

[_public] void PathPlotEx2_MVU(MVIEW,    // View
                               VV,       // X
                               VV,       // Y
                               string,   // Line label
                               int,      // MVU_FLIGHT_LOCATE
                               int,      // MVU_FLIGHT_COMPASS
                               real,     // Lines steeper than this angle are considered vertical and the up label direction is used.
                               int,      // Up label direction:   1 up is right -1 up is left
                               real,     // Along line label offset in mm.
                               real,     // Perpendicular label offset mm.
                               real,     // Maximum gap before breaking line, 0.0 for no breaks.
                               int);     // MVU_FLIGHT_DUMMIES


  
//-----------------------------------------------------------------------------------------------------------
// PlotVoxelSlice_MVU Extract a vertical slice from a voxel along a path and plot it to a 2D view.
//
// Notes              The path is splined linearly between points and sampled at the input interval.
//                    The resulting vertical samples of cubes are plotted as "pixel strips" in the view.
//
// Available          2022.2
//-----------------------------------------------------------------------------------------------------------

[_public] void PlotVoxelSlice_MVU(MVIEW,   // View
                                  VOX,     // Voxel model
                                  ITR,     // colour model
                                  VV,      // x-values along the line
                                  VV,      // y-values along the line
                                  real,    // Distance at the first XY location (normally 0.0)
                                  real,    // Starting distance to plot
                                  real,    // Ending distance to plot
                                  real);   // Sampling resolution


  
//-----------------------------------------------------------------------------------------------------------
// PlotVoxelSurface_MVU Extract an iso-surface from a voxel and plot it to a 2D or 3D view.
//
// Notes                The Marching Cubes method of Lorensen and Cline, Computer Graphics, V21,
//                      Number 4, July 1987, is used to calculate a given iso-surface in a voxel
//                      model. The resulting surface is plotted to a 2D or 3D view. If the view
//                      is 2-D, then only the intersection of the surface with the 2D surface is
//                      plotted, using lines.
//
// Available            6.4
//-----------------------------------------------------------------------------------------------------------

[_public] void PlotVoxelSurface_MVU(MVIEW,   // View
                                    VOX,     // Voxel model
                                    real,    // Iso-surface value
                                    int,     // Drawing color
                                    real);   // Line thickness for line drawing, and 2D views.


  
//-----------------------------------------------------------------------------------------------------------
// PlotVoxelSurface2_MVU Extract an iso-surface from a voxel and plot it to a 2D or 3D view.
//
// Notes                 The Marching Cubes method of Lorensen and Cline, Computer Graphics, V21,
//                       Number 4, July 1987, is used to calculate a given iso-surface in a voxel
//                       model. The resulting surface is plotted to a 2D or 3D view. If the view
//                       is 2-D, then only the intersection of the surface with the 2D surface is
//                       plotted, using lines.
//
// Available             7.3
//-----------------------------------------------------------------------------------------------------------

[_public] void PlotVoxelSurface2_MVU(MVIEW,    // View
                                     VOX,      // Voxel model
                                     real,     // Iso-surface value
                                     int,      // Drawing color
                                     real,     // Line thickness for line drawing, and 2D views.
                                     real,     // Transparency (0 - transparent, 1 - opaque).
                                     string);  // Iso-surface name


  
//-----------------------------------------------------------------------------------------------------------
// GenerateSurfaceFromVoxel_MVU TODO...
//
// Notes                        TODO... Move to VOX method for surface generation only and use GeosurfaceD to display.
//
// Available                    8.5
//-----------------------------------------------------------------------------------------------------------

[_public] void GenerateSurfaceFromVoxel_MVU(MVIEW,    // View
                                            VOX,      // Voxel model
                                            int,      // MVU_VOX_SURFACE_METHOD
                                            int,      // MVU_VOX_SURFACE_OPTION
                                            real,     // Iso-surface value
                                            real,     // For closed surfaces: close between the selected value and this value (set equal to the Iso-surface to close within nearest values below, DUMMY to close within nearest value above)
                                            int,      // Drawing color
                                            real,     // Line thickness for line drawing, and 2D views.
                                            real,     // Transparency (0 - transparent, 1 - opaque).
                                            string);  // Geosurface file


  
//-----------------------------------------------------------------------------------------------------------
// Post_MVU Post values on a map.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Post_MVU(MVIEW,   // View
                        VV,      // X locations
                        VV,      // Y locations
                        VV,      // Values to post
                        int,     // Do not plot dummy values?
                        int,     // Numb Size
                        int,     // Format
                        int,     // Decimals
                        int,     // Reference point number
                        real);   // Text angle


  
//-----------------------------------------------------------------------------------------------------------
// PostEx_MVU Post values on a map with more paramters.
//
// Available  5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void PostEx_MVU(MVIEW,   // View
                          VV,      // X locations
                          VV,      // Y locations
                          VV,      // Values to post
                          VV,      // Station
                          int,     // Do not plot dummy values?
                          real,    // Base to remove, default is 0.0
                          real,    // Detection limit, can be GS_R8DM
                          int,     // Numb Size
                          int,     // Format
                          int,     // Decimals
                          real,    // Offset along line (right and above are positive)
                          real,    // Offset perpendicular to line
                          int,     // TRUE - Positive above, Negative below FALSE - All above.
                          real,    // Modulas on station vv
                          int,     // Reference point number
                          real,    // Text angle (degree, CCW from down-line)
                          int,     // Fixed angle ?
                          real,    // Vertical reference angle
                          int);    // 1 up is right, -1 up is left


  
//-----------------------------------------------------------------------------------------------------------
// Probability_MVU Plot a probability plot on a map.
//
// Notes           The ITR can be empty (but must still be a valid ITR object).
//
// Available       5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] void Probability_MVU(MVIEW,    // View
                               ST,       // ST with summary stats of original data
                               ST,       // ST with histogram info of original or log10 data
                               string,   // Title
                               string,   // Unit
                               int,      // Transform type (0: Raw, 1: Log, 2: Lambda)
                               real,     // Lambda Value for lambda transform
                               real,     // X in mm (bottom left corner of histogram box)
                               real,     // Y in mm (bottom left corner of histogram box)
                               real,     // Box width in mm
                               real,     // Box height in mm
                               real,     // Symbol size in mm
                               real,     // Sigma (X range is -sigma to sigma)
                               real,     // Width (mm) of the additional box for summary stats
                               int,      // Summary stats: 0 - do not draw, 1 - draw
                               int,      // Decimals for data, negative for sig. fig.
                               int,      // Decimals for stats, negative for sig. fig.
                               ITR);     // ITR to color symbols.


  
//-----------------------------------------------------------------------------------------------------------
// ProfilePlot_MVU Draw a profile along line trace
//
// Notes           Profiles will be drawn in the current line style.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ProfilePlot_MVU(MVIEW,   // View
                               VV,      // X
                               VV,      // Y
                               VV,      // Z
                               real,    // Lines steeper than this angle are considered vertical and the up label direction is used.
                               int,     // Up label direction:   1 up is right -1 up is left
                               real,    // Maximum gap in data to span (view units)
                               real,    // Z profile base, rDUMMY to use data minimum
                               real,    // Z scale in view units/Z unit
                               int);    // 1 to join profile to line ends.


  
//-----------------------------------------------------------------------------------------------------------
// ProfilePlotEx_MVU Draw a profile along line trace with more parameters
//
// Notes             Profiles will be drawn in the current line style.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ProfilePlotEx_MVU(MVIEW,    // View
                                 VV,       // X
                                 VV,       // Y
                                 VV,       // Z
                                 real,     // Lines steeper than this angle are considered vertical and the up label direction is used.
                                 int,      // Up label direction:   1 up is right -1 up is left
                                 real,     // Maximum gap in data to span (view units)
                                 real,     // Z profile base, rDUMMY to use data minimum
                                 real,     // Z scale in view units/Z unit
                                 int,      // 1 to join profile to line ends.
                                 int,      // Log option: 0 linear (default), 1 logarithm, 2 log/linear
                                 real,     // Log base
                                 int,      // Smooth curve option: 0 no (default), 1 yes
                                 string,   // Positive fill color
                                 string);  // Negative fill color


  
//-----------------------------------------------------------------------------------------------------------
// PropSymbLegend_MVU Draw a legend for proportional symbols.
//
// Notes              All symbol attributes, except for the size, are assumed
//                    to be defined (or defaults are used).
//                    Spacing is based on the maximum of the largest plotted symbol
//                    and the font size.
//
// Available          5.0.8
//-----------------------------------------------------------------------------------------------------------

[_public] void PropSymbLegend_MVU(MVIEW,    // MVIEW object
                                  real,     // Plot origin X
                                  real,     // Plot origin Y
                                  real,     // Label Font size (mm)
                                  real,     // Symbol scale factor (data value/mm)
                                  real,     // Base value to remove before scaling
                                  int,      // Number of symbols
                                  real,     // Starting symbol data value (>= Base value)
                                  real,     // Data value increment (>0.0)
                                  string,   // Plot title
                                  string);  // Plot subtitle


  
//-----------------------------------------------------------------------------------------------------------
// ReGenAreas_MVU Re-Generate from a line group and existing area group
//
// Notes          The area group must exist and will be modified to match the current
//                line group.
//                
//                All non-polygon entities in the current area group will remain in the
//                new area group.  All existing polygon groups will be used to determine
//                the most likely attributes for the new polygon groups.
//                
//                There must be existing polygon groups in the area group.
//
// See also       GenAreas_MVU
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ReGenAreas_MVU(MVIEW,    // View
                              string);  // Group with lines


  
//-----------------------------------------------------------------------------------------------------------
// SymbOff_MVU Draws symbols with an offset and against a flag channel
//
// Notes       Symbols are not plotted for positions where the flag VV
//             value is 0 or iDUMMY.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void SymbOff_MVU(MVIEW,   // View
                           VV,      // X, must be type of REAL
                           VV,      // Y, must be type of REAL
                           VV,      // Flag VV, must be type of INT
                           real,    // X Offset
                           real);   // Y Offset


  
//-----------------------------------------------------------------------------------------------------------
// TextBox_MVU Draw a wrapped text box
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void TextBox_MVU(MVIEW,    // View
                           real,     // Min X
                           real,     // Min Y
                           real,     // Max X
                           real,     // Max Y
                           string,   // Text
                           real,     // Line spacing (1.2 good)
                           int);     // MVU_TEXTBOX


  
//-----------------------------------------------------------------------------------------------------------
// Tick_MVU Draw line ticks on a map.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void Tick_MVU(MVIEW,   // View
                        VV,      // X locations
                        VV,      // Y locations
                        VV,      // Station
                        real,    // Tick size
                        real,    // Tick modulus on station vv
                        real,    // Major tick size
                        real);   // Major tick modulus on station vv


  
//-----------------------------------------------------------------------------------------------------------
// TickEx_MVU Same as Tick_MVU, with gap allowance.
//
// Available  6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void TickEx_MVU(MVIEW,   // View
                          VV,      // X locations
                          VV,      // Y locations
                          VV,      // Station
                          real,    // Tick size
                          real,    // Tick modulus on station vv
                          real,    // Major tick size
                          real,    // Major tick modulus on station vv
                          real);   // Maximum gap to span; set to 0 or rDUMMY to ignore all gaps.


  
//-----------------------------------------------------------------------------------------------------------
// TrndPath_MVU Plot min and max trend lines.
//
// Notes        Trend lines positions consist of X and Y VVs
//              interspersed with dummies, which separate the
//              individual trend sections.
//              Set the minimum number of sections to > 0 to
//              plot only the longer trend lines.
//              (The number of sections in one trend section is
//              equal to the number of points between dummies minus one.)
//              Set the minimum distance to > 0 to
//              plot only the longer trend lines.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void TrndPath_MVU(MVIEW,   // View
                            VV,      // X
                            VV,      // Y
                            int,     // Minimum number of sections
                            real);   // Minimum length of sections



//===========================================================================================================
//
// Deprecated Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// PlotVoxelSurface3_MVU Extract an iso-surface from a voxel and plot it to a 2D or 3D view.
//
// Notes                 Same as PlotVoxelSurface2_MVU but with a couple more options.
//
// Available             8.3
//-----------------------------------------------------------------------------------------------------------

[_public] void PlotVoxelSurface3_MVU(MVIEW,    // View
                                     VOX,      // Voxel model
                                     real,     // Iso-surface value
                                     int,      // Drawing color
                                     real,     // Line thickness for line drawing, and 2D views.
                                     real,     // Transparency (0 - transparent, 1 - opaque).
                                     string,   // Iso-surface name
                                     int,      // Create closed geosurface around voxel?
                                     int,      // Closed geosurface should enclose cells LESS than surface value?
                                     real);    // Exclude objects with volume less than this value


  
//-----------------------------------------------------------------------------------------------------------
// DuplicateChem_MVU Plot an ASSAY Duplicate result in a graph window.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void DuplicateChem_MVU(MVIEW,    // View
                                   VV,       // Duplicate data
                                   int,      // Log-transform: 0 - linear, 1 - log
                                   real,     // Detect Limit
                                   int,      // Number of old samples in the VV
                                   real,     // Tolerance as a function of std dev
                                   string,   // Title
                                   string,   // Unit
                                   real,     // X location (bottom left corner of graph)
                                   real,     // Y location
                                   real,     // Graph width
                                   real);    // Graph height


  
//-----------------------------------------------------------------------------------------------------------
// Scatter_MVU Plot the scatter plot on a map.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Scatter_MVU(MVIEW,    // View
                             string,   // Title
                             real,     // X location (bottom left corner of color boxes)
                             real,     // Y location
                             real,     // Box width
                             real,     // Box height
                             VV,       // Horizontal channel
                             VV,       // Vertical channel
                             VV,       // Mask channel
                             string,   // Horizontal channel name
                             string,   // Vertical channel name
                             string,   // Mask channel name
                             string,   // Horizontal channel units
                             string,   // Vertical channel units
                             real,     // Min. Horizontal value
                             real,     // Max. Horizontal value
                             real,     // Min. Vertical value
                             real,     // Max. Vertical value
                             real,     // Min. Horizontal range value
                             real,     // Max. Horizontal range value
                             real,     // Min. Vertical range value
                             real,     // Max. Vertical range value
                             int,      // Use Min Horz. Range selection?
                             int,      // Use Max Horz. Range selection?
                             int,      // Use Min Vert. Range selection?
                             int,      // Use Max Vert. Range selection?
                             int,      // Use linear horizontal axis scaling?
                             int,      // Use linear vertical axis scaling?
                             int);     // Symbol size (0: small, 1: medium, 2: large)


  
//-----------------------------------------------------------------------------------------------------------
// Scatter2_MVU Plot the scatter plot on a map using symbol number, size and color VVs.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Scatter2_MVU(MVIEW,    // View
                              string,   // Title
                              real,     // X location (bottom left corner of box)
                              real,     // Y location
                              real,     // Box width
                              real,     // Box height
                              VV,       // Horizontal channel
                              VV,       // Vertical channel
                              string,   // Decorated font name, "" for default symbol font (normally symbols.gfn)
                              VV,       // Symbol numbers
                              VV,       // Symbol sizes
                              VV,       // Colors  if symbol number or color == 0, do not plot
                              int,      // Annotation style 0 - outside, 1 - inside
                              string,   // Horizontal channel name
                              string,   // Vertical channel name
                              string,   // Horizontal channel units
                              string,   // Vertical channel units
                              real,     // Min. Horizontal value, rDUMMY for default
                              real,     // Max. Horizontal value
                              real,     // Min. Vertical value
                              real,     // Max. Vertical value
                              real,     // Min. Horizontal range value
                              real,     // Max. Horizontal range value
                              real,     // Min. Vertical range value
                              real,     // Max. Vertical range value
                              int,      // Use Min Horz. Range selection?
                              int,      // Use Max Horz. Range selection?
                              int,      // Use Min Vert. Range selection?
                              int,      // Use Max Vert. Range selection?
                              int,      // Horizontal axis scaling: 0 - linear, 1 - log
                              int);     // Vertical axis scaling


  
//-----------------------------------------------------------------------------------------------------------
// Standard_MVU Plot an ASSAY standard result in a graph window.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_licensed] void Standard_MVU(MVIEW,    // View
                              VV,       // Standard data
                              int,      // Number of old samples in the VV
                              real,     // Tolerance as a function of std dev (default=2)
                              string,   // Title
                              string,   // Unit
                              real,     // X location (bottom left corner of graph)
                              real,     // Y location
                              real,     // Graph width
                              real);    // Graph height





//*** endblock Generated


#endif
