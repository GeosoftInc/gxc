//*** extends 'class_empty.gxh'

#ifndef HSTR_GXH_DEFINED
#define HSTR_GXH_DEFINED

//*** block Header
// NOTICE: Do not edit anything here, it is generated code
//===========================================================================================================
//
// Class STR
//
//-----------------------------------------------------------------------------------------------------------
//
// This library is not a class. Use the STR library functions
// to work with and manipulate string variables. Since the
// GX Programming Language does not provide string literal
// tokens, you must use these functions for any string operations
// you want to perform.
//
//-----------------------------------------------------------------------------------------------------------



//*** endblock Header

//*** block Editable
// NOTICE: The code generator will not replace the code in this block

#define iCharComp_STR(A,B) (iChar_STR(A)==iChar_STR(B))
#define iCharN_STR(A,B) IiCharN_STR(A,(B),sizeof(A))

//*** endblock Editable

//*** block Generated
// NOTICE: Do not edit anything here, it is generated code


//===========================================================================================================
//
// FILE_EXT Definitions
//
// Extension option
//
// FILE_EXT_ADD_IF_NONE
// Will add the extension only if no extension is present.
//
// FILE_EXT_FORCE
// Will cause a renaming of the file extension to the new extension.
//
//===========================================================================================================


#define FILE_EXT_ADD_IF_NONE 0
#define FILE_EXT_FORCE 1


//===========================================================================================================
//
// STR_CASE Definitions
//
// Case sensitivity
//
// STR_CASE_TOLERANT
// 
//
// STR_CASE_SENSITIVE
// 
//
//===========================================================================================================


#define STR_CASE_TOLERANT 0
#define STR_CASE_SENSITIVE 1


//===========================================================================================================
//
// STR_ESCAPE Definitions
//
// How to handle escape
//
// ESCAPE_CONVERT
// Converts non-standard characters in a string to escape sequences.
//
// ESCAPE_REPLACE
// Replaces escape sequences with original characters.
//
//===========================================================================================================


#define ESCAPE_CONVERT 0
#define ESCAPE_REPLACE 1


//===========================================================================================================
//
// STR_FILE_PART Definitions
//
// Parts of a path string
//
// STR_FILE_PART_NAME
// File Name
//
// STR_FILE_PART_EXTENSION
// Extension
//
// STR_FILE_PART_DIRECTORY
// Directory
//
// STR_FILE_PART_VOLUME
// Drive
//
// STR_FILE_PART_QUALIFIERS
// Qualifiers
//
// STR_FILE_PART_NAME_EXTENSION
// Name and the Extension together
//
// STR_FILE_PART_FULLPATH_NO_QUALIFIERS
// Full name of file with no qualifiers
//
//===========================================================================================================


#define STR_FILE_PART_NAME 0
#define STR_FILE_PART_EXTENSION 1
#define STR_FILE_PART_DIRECTORY 2
#define STR_FILE_PART_VOLUME 3
#define STR_FILE_PART_QUALIFIERS 4
#define STR_FILE_PART_NAME_EXTENSION 5
#define STR_FILE_PART_FULLPATH_NO_QUALIFIERS 6


//===========================================================================================================
//
// STR_JUSTIFY Definitions
//
// String justification style
//
// STR_JUSTIFY_LEFT
// 
//
// STR_JUSTIFY_CENTER
// 
//
// STR_JUSTIFY_RIGHT
// 
//
//===========================================================================================================


#define STR_JUSTIFY_LEFT 0
#define STR_JUSTIFY_CENTER 1
#define STR_JUSTIFY_RIGHT 2


//===========================================================================================================
//
// STR_TRIM Definitions
//
// What to trim
//
// STR_TRIMRIGHT
// 
//
// STR_TRIMLEFT
// 
//
// STR_TRIMBOTH
// 
//
//===========================================================================================================


#define STR_TRIMRIGHT 1
#define STR_TRIMLEFT 2
#define STR_TRIMBOTH 3





//===========================================================================================================
//
// Data Input Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// iScanI_STR Convert a string to a GX int.
//
// Returns    Resulting Integer, iDUMMY is bad integer
//
// Available  6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] int iScanI_STR(string);  // String to convert to an integer


  
//-----------------------------------------------------------------------------------------------------------
// rScanDate_STR Convert a date string to a GX real.
//
// Returns       Resulting Real, rDUMMY if conversion fails.
//
// Notes         OLD usage, use ScanForm_STR instead.
//
// Available     6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] real rScanDate_STR(string,   // Date string
                             int);     // DATE_FORMAT


  
//-----------------------------------------------------------------------------------------------------------
// rScanForm_STR Convert a formated string to a real.
//
// Returns       Resulting Real, rDUMMY if conversion fails.
//
// Available     6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] real rScanForm_STR(string,   // Date string
                             int);     // GS_FORMATS


  
//-----------------------------------------------------------------------------------------------------------
// rScanR_STR Convert a string to a GX real.
//
// Returns    Resulting Real, rDUMMY if bad string.
//
// Available  6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] real rScanR_STR(string);  // String to convert to a real


  
//-----------------------------------------------------------------------------------------------------------
// rScanTime_STR Convert a time string to a GX real.
//
// Returns       Resulting Real, rDUMMY if conversion fails.
//
// Notes         OLD usage, use ScanForm_STR instead.
//
// Available     6.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] real rScanTime_STR(string,   // Date string
                             int);     // TIME_FORMAT



//===========================================================================================================
//
// File Name Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// IFileCombineParts_STR Combine file parts to build a file name.
//
// Available             5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IFileCombineParts_STR(string,       // Drive
                                     string,       // Directory
                                     string,       // Name
                                     string,       // Extension
                                     string,       // Qualifiers
                                     var string,   // Destination string, can be same as input
                                     int);         // String length
#define FileCombineParts_STR(drive, dir, file, ext, qual, file_name) IFileCombineParts_STR(drive, dir, file, ext, qual, file_name, sizeof(file_name))


  
//-----------------------------------------------------------------------------------------------------------
// IFileExt_STR Add a file extension onto a file name string.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IFileExt_STR(string,       // File name to extend
                            string,       // Extension if "", extenstion and '.' are stripped.
                            var string,   // Extended file name (can be same as input)
                            int,          // FILE_EXT
                            int);         // Length of buffer
#define FileExt_STR(ifile, ext, ofile, opt) IFileExt_STR(ifile, ext, ofile, opt, sizeof(ofile))


  
//-----------------------------------------------------------------------------------------------------------
// IFileNamePart_STR Get part of a file name.
//
// Available         5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IFileNamePart_STR(string,       // File name
                                 var string,   // Destination string, can be same as input
                                 int,          // String length
                                 int);         // STR_FILE_PART
#define FileNamePart_STR(file, file_part, part) IFileNamePart_STR(file, file_part, sizeof(file_part), part)


  
//-----------------------------------------------------------------------------------------------------------
// IGetMFile_STR Get the indexed filepath from a multiple filepath string
//
// Notes         The multifile string must use '|' as a delimiter.
//               Do not pass a string after calling iTokenize_STR.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetMFile_STR(string,       // Input multifile string
                             var string,   // Output filepath string
                             int,          // Sizeof output filepath string
                             int);         // Index of file
#define GetMFile_STR(in_str, out_str, index) IGetMFile_STR(in_str, out_str, sizeof(out_str), index)


  
//-----------------------------------------------------------------------------------------------------------
// IRemoveQualifiers_STR Remove file qualifiers from a file name
//
// Available             7.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] void IRemoveQualifiers_STR(string,       // Input file name
                                     var string,   // Output file name (can be same as input)
                                     int);         // Length of buffer
#define RemoveQualifiers_STR(ifile, ofile) IRemoveQualifiers_STR(ifile, ofile, sizeof(ofile))



//===========================================================================================================
//
// Formating Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// IFormatCRC_STR Convert a GX CRC value to a string.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IFormatCRC_STR(CRC,          // CRC value to format
                              var string,   // Resulting string
                              int,          // Size of the Resulting String
                              int);         // Width of the field
#define FormatCRC_STR(pul_crc, buff, width) IFormatCRC_STR(pul_crc, buff, sizeof(buff), width)


  
//-----------------------------------------------------------------------------------------------------------
// IFormatDate_STR Convert a GX real to a date string.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IFormatDate_STR(real,         // Date value in decimal years to format
                               var string,   // Resulting string
                               int,          // Size of the Resulting String
                               int,          // Width of the field
                               int);         // DATE_FORMAT
#define FormatDate_STR(real, buff, width, type) IFormatDate_STR(real, buff, sizeof(buff), width, type)


  
//-----------------------------------------------------------------------------------------------------------
// IFormatI_STR Convert a GX int to a string.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IFormatI_STR(int,          // Value to format
                            var string,   // Resulting string
                            int,          // Size of the Resulting String
                            int);         // Width of the field
#define FormatI_STR(value, buff, width) IFormatI_STR(value, buff, sizeof(buff), width)


  
//-----------------------------------------------------------------------------------------------------------
// IFormatR_STR Convert a GX real to a string with significant digits.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IFormatR_STR(real,         // Value to format
                            var string,   // Resulting string
                            int,          // Size of the Resulting String
                            int,          // Width of the field
                            int);         // Significant digits
#define FormatR_STR(real, buff, width, sig) IFormatR_STR(real, buff, sizeof(buff), width, sig)


  
//-----------------------------------------------------------------------------------------------------------
// IFormatR2_STR Convert a GX real to a string with given decimals.
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IFormatR2_STR(real,         // Value to format
                             var string,   // Resulting string
                             int,          // Size of the Resulting String
                             int,          // Width of the field
                             int);         // Decimals
#define FormatR2_STR(real, buff, width, sig) IFormatR2_STR(real, buff, sizeof(buff), width, sig)


  
//-----------------------------------------------------------------------------------------------------------
// IFormatReal_STR Convert a GX real to a string.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IFormatReal_STR(real,         // Value to format
                               var string,   // Resulting string
                               int,          // Size of the Resulting String
                               int,          // GS_FORMATS
                               int,          // Width of the field
                               int);         // Significant digits/decimals
#define FormatReal_STR(real, buff, type, width, dec) IFormatReal_STR(real, buff, sizeof(buff), type, width, dec)


  
//-----------------------------------------------------------------------------------------------------------
// IFormatTime_STR Convert a GX real to a time string.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IFormatTime_STR(real,         // Time value in decimal hours to format
                               var string,   // Resulting string
                               int,          // Size of the Resulting String
                               int,          // Width of the field
                               int,          // Decimals to format with
                               int);         // TIME_FORMAT
#define FormatTime_STR(real, buff, width, deci, type) IFormatTime_STR(real, buff, sizeof(buff), width, deci, type)



//===========================================================================================================
//
// General Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// _Escape_STR Convert/replace escape sequences in strings.
//
// Notes       Escape characters:
//             
//             \a      bell
//             \b      backspace
//             \f      formfeed
//             \n      new line
//             \r      carriage return
//             \t      tab
//             \v      vertical tab
//             \"      quote character
//             \x      take 'x' literally
//             \      backslash
//             \ooo    octal up to 3 characters
//             \xhh    hex up to 2 characters
//             
//             A common use of this function is to convert double-quote characters in
//             a user unput string to \" so the string can be placed in a tokenized
//             string.
//
// Available   5.0.6
//-----------------------------------------------------------------------------------------------------------

[_public] void _Escape_STR(var string,   // String to modify
                           int,          // String size
                           int);         // STR_ESCAPE
#define Escape_STR(str_val, opt) _Escape_STR(str_val, sizeof(str_val), opt)


  
//-----------------------------------------------------------------------------------------------------------
// iChar_STR Returns the ASCII value of a character.
//
// Returns   ASCII value of first character in string.
//
// Available 5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iChar_STR(string);  // String to return ascii value of first character


  
//-----------------------------------------------------------------------------------------------------------
// IiCharN_STR Returns the ASCII value of the n'th character.
//
// Returns     ASCII value of n'th character in string.
//             The first character is 0.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int IiCharN_STR(string,   // String
                          int,      // Character to get
                          int);     // Maximum string length (unused)


  
//-----------------------------------------------------------------------------------------------------------
// IJustify_STR Justify a string
//
// Notes        If the string is too big to fit in the number of display characters,
//              the output string will be "**" justified as specified.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IJustify_STR(string,       // String to justify
                            var string,   // Result string, can be same as input
                            int,          // Justification width
                            int,          // STR_JUSTIFY
                            int);         // Maximum size of result
#define Justify_STR(in_str, out_str, width, just) IJustify_STR(in_str, out_str, width, just, sizeof(out_str))


  
//-----------------------------------------------------------------------------------------------------------
// IReplaceiMatchString_STR Replaces all occurances of match string by replacement string with case insensitive.
//
// Notes                    If the replacement string is "" (NULL character)
//                          then the string to replace is removed from the
//                          input string, and the string is shortened.
//
// Available                7.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] void IReplaceiMatchString_STR(var string,   // Destination String
                                        string,       // Match string to replace
                                        string,       // Replacement string
                                        int);         // Size of the Destination String
#define ReplaceiMatchString_STR(istr, old, new_str) IReplaceiMatchString_STR(istr, old, new_str, sizeof(istr))


  
//-----------------------------------------------------------------------------------------------------------
// IReplaceMatchString_STR Replaces all occurances of match string by replacement string with case sensitive.
//
// Notes                   If the replacement string is "" (NULL character)
//                         then the string to replace is removed from the
//                         input string, and the string is shortened.
//
// Available               7.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] void IReplaceMatchString_STR(var string,   // Destination String
                                       string,       // Match string to replace
                                       string,       // Replacement string
                                       int);         // Size of the Destination String
#define ReplaceMatchString_STR(istr, old, new_str) IReplaceMatchString_STR(istr, old, new_str, sizeof(istr))


  
//-----------------------------------------------------------------------------------------------------------
// ISetCharN_STR Set the n'th character of a string using an ASCII value
//
// Available     5.1.4
//-----------------------------------------------------------------------------------------------------------

[_public] void ISetCharN_STR(var string,   // String
                             int,          // Character to set
                             int,          // Maximum string length
                             int);         // ASCII value
#define SetCharN_STR(str_val, c, ascii) ISetCharN_STR(str_val, c, sizeof(str_val), ascii)


  
//-----------------------------------------------------------------------------------------------------------
// ISplitString_STR Splits a string in two on a character.
//
// Notes            The original string is modified by terminating it
//                  at the character split.
//                  
//                  The part of the string past the character split is
//                  copied to the split string.
//                  
//                  Split characters in quoted strings are ignored.
//                  
//                  This function is mainly intended to separate comments
//                  from control file strings.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ISplitString_STR(var string,   // Original string
                                string,       // Split character (first character of string)
                                var string,   // Split string past split character.
                                int);         // Maximum length of split string.
#define SplitString_STR(origstr, ch, split) ISplitString_STR(origstr, ch, split, sizeof(split))


  
//-----------------------------------------------------------------------------------------------------------
// IStrcat_STR This method contatinates a string.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IStrcat_STR(var string,   // Destination String
                           string,       // String to add
                           int);         // Size of the Destination String
#define Strcat_STR(dest, orig) IStrcat_STR(dest, orig, sizeof(dest))


  
//-----------------------------------------------------------------------------------------------------------
// iStrcmp_STR This method compares two strings and returns these values
//
// Returns     A  <  B           -1
//             A ==  B            0
//             A  >  B            1
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iStrcmp_STR(string,   // String A
                          string,   // String B
                          int);     // STR_CASE


  
//-----------------------------------------------------------------------------------------------------------
// IStrcpy_STR This method copies a string into another string.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IStrcpy_STR(var string,   // Destination string
                           string,       // Origin string
                           int);         // Size of the destination string
#define Strcpy_STR(dest, orig) IStrcpy_STR(dest, orig, sizeof(dest))


  
//-----------------------------------------------------------------------------------------------------------
// iStriMask_STR Case insensitive comparison of two strings.
//
// Returns       0 if string does not match mask.
//               1 if string matches mask.
//
// Notes         Mask characters '*' - matches any one or more up to
//               next character
//               '?' - matches one character
//               
//               Test is case insensitive
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iStriMask_STR(string,   // Mask
                            string);  // String to test


  
//-----------------------------------------------------------------------------------------------------------
// IStrins_STR This method inserts a string at a specified position.
//
// Notes       If the specified position does not fall within the current string
//             the source string will simply be Concatenated.
//
// Available   5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] void IStrins_STR(var string,   // Destination String
                           int,          // Insert Position
                           string,       // String to add
                           int);         // Size of the Destination String
#define Strins_STR(dest, ins, orig) IStrins_STR(dest, ins, orig, sizeof(dest))


  
//-----------------------------------------------------------------------------------------------------------
// iStrlen_STR Returns the length of a string.
//
// Returns     String length.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iStrlen_STR(string);  // String to find the length of


  
//-----------------------------------------------------------------------------------------------------------
// iStrMask_STR Case sensitive comparison of two strings.
//
// Returns      0 if string does not match mask.
//              1 if string matches mask.
//
// Notes        Mask characters '*' - matches any one or more up to
//              next character
//              '?' - matches one character
//              
//              Test is case sensitive
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iStrMask_STR(string,   // Mask
                           string);  // String to test


  
//-----------------------------------------------------------------------------------------------------------
// iStrMin_STR Remove spaces and tabs and return length
//
// Returns     String length.
//
// Notes       String may be modified. This function should not be
//             used to determine if a file name string is defined, because
//             a valid file name can contain spaces, and once "tested" the
//             name will be altered. Instead, use iStrMin2_STR, or use
//             iFileExist_SYS to see if the file actually exists.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iStrMin_STR(var string);  // String to find the min length of


  
//-----------------------------------------------------------------------------------------------------------
// iStrMin2_STR Length less spaces and tabs, string unchanged.
//
// Returns      String length.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iStrMin2_STR(string);  // String to find the min length of


  
//-----------------------------------------------------------------------------------------------------------
// iStrncmp_STR Compares two strings to a given number of characters.
//
// Returns      A  <  B           -1
//              A ==  B            0
//              A  >  B            1
//
// Available    5.0.5
//-----------------------------------------------------------------------------------------------------------

[_public] int iStrncmp_STR(string,   // String A
                           string,   // String B
                           int,      // Number of characters to compare
                           int);     // STR_CASE


  
//-----------------------------------------------------------------------------------------------------------
// iStrStr_STR Scan a string for the occurrence of a given substring.
//
// Returns     -1 if the substring does not occur in the string
//             Index of first matching location if found
//
// Available   5.1.6
//-----------------------------------------------------------------------------------------------------------

[_public] int iStrStr_STR(string,   // String to scan
                          string,   // String to look for
                          int);     // STR_CASE


  
//-----------------------------------------------------------------------------------------------------------
// ISubstr_STR Extract part of a string.
//
// Notes       The destination string length will be less than the
//             requested length if the substring is not fully enclosed
//             in the origin string.
//
// Available   6.2
//-----------------------------------------------------------------------------------------------------------

[_public] void ISubstr_STR(var string,   // Destination string
                           int,          // Size of output string buffer
                           string,       // Origin string
                           int,          // Start location
                           int);         // Number of characters
#define Substr_STR(dest, orig, start, length) ISubstr_STR(dest, sizeof(dest), orig, start, length)


  
//-----------------------------------------------------------------------------------------------------------
// IToLower_STR Convert a string to lower case.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IToLower_STR(var string,   // String
                            int);         // Maximum Size
#define ToLower_STR(str_val) IToLower_STR(str_val, sizeof(str_val))


  
//-----------------------------------------------------------------------------------------------------------
// IToUpper_STR Convert a string to upper case.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IToUpper_STR(var string,   // String
                            int);         // Maximum Size
#define ToUpper_STR(str_val) IToUpper_STR(str_val, sizeof(str_val))


  
//-----------------------------------------------------------------------------------------------------------
// IXYZLine_STR Make a valid XYZ line name from a valid DB line name.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IXYZLine_STR(string,       // Line name to convert
                            var string,   // Buffer to hold new line name
                            int);         // Length of buffer
#define XYZLine_STR(line, xyz) IXYZLine_STR(line, xyz, sizeof(xyz))


  
//-----------------------------------------------------------------------------------------------------------
// MakeAlpha_STR Turns all non alpha-numeric characters into an _.
//
// Notes         THE STRING IS MODIFIED.
//
// Available     5.1.8
//-----------------------------------------------------------------------------------------------------------

[_public] void MakeAlpha_STR(var string);  // String to trim


  
//-----------------------------------------------------------------------------------------------------------
// Printf_STR Variable Argument PrintF function
//
// Available  7.3
//-----------------------------------------------------------------------------------------------------------

[_public] void Printf_STR(var string,   // Destination string
                          int,          // Size of the destination string
                          string);      // Pattern string
#define _Printf_STR(dest, mask) Printf_STR(dest, sizeof(dest), mask)


  
//-----------------------------------------------------------------------------------------------------------
// ReplaceChar_STR Replaces characters in a string.
//
// Notes           If the input replacement character is "", then the
//                 string will be truncated at the first character to replace.
//
// Available       5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ReplaceChar_STR(var string,   // String to modify
                               string,       // Character to replace (first character only)
                               string);      // Replacement character (first character only)


  
//-----------------------------------------------------------------------------------------------------------
// ReplaceChar2_STR Replaces characters in a string, supports simple removal.
//
// Notes            If the replacement character is "" (NULL character)
//                  then the character to replace is removed from the
//                  input string, and the string is shortened.
//
// Available        6.3
//-----------------------------------------------------------------------------------------------------------

[_public] void ReplaceChar2_STR(var string,   // String to modify
                                string,       // Character to replace (first character only)
                                string);      // Replacement character (first character only)


  
//-----------------------------------------------------------------------------------------------------------
// ReplaceMultiChar_STR Replaces multiple characters in a string.
//
// Notes                The number of characters to replace must equal
//                      the number of replacement characters.
//
// Available            5.1.5
//-----------------------------------------------------------------------------------------------------------

[_public] void ReplaceMultiChar_STR(var string,   // String to modify
                                    string,       // Characters to replace
                                    string);      // Replacement characters


  
//-----------------------------------------------------------------------------------------------------------
// ReplaceNonASCII_STR Replace non-ASCII characters in a string.
//
// Notes               All characthers > 127 will be replaced by the first character
//                     of the replacement string.
//
// Available           6.0
//-----------------------------------------------------------------------------------------------------------

[_public] void ReplaceNonASCII_STR(var string,   // String to modify
                                   string);      // Replacement character


  
//-----------------------------------------------------------------------------------------------------------
// SetChar_STR Set a string's first character using an ASCII value of a character.
//
// Available   5.1.4
//-----------------------------------------------------------------------------------------------------------

[_public] void SetChar_STR(var string,   // String
                           int);         // ASCII value


  
//-----------------------------------------------------------------------------------------------------------
// TrimQuotes_STR Remove double quotes.
//
// Notes          THE STRING IS MODIFIED.
//                This method goes through the string and removes all spaces in a
//                string except those enclosed in quotes. It then removes
//                any quotes. It is usfull for trimming unwanted spaces from
//                an input string but allows the user to use quotes as well.
//                If a quote follows a backslash, the quote is retained and
//                the backslash is deleted. These quotes are NOT treated as
//                delimiters.
//
// Available      5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void TrimQuotes_STR(var string);  // String to trim


  
//-----------------------------------------------------------------------------------------------------------
// TrimSpace_STR Remove leading and/or trailing whitespace.
//
// Notes         THE STRING IS MODIFIED.
//               Whitespace characters are defined as space, tab, carriage return,
//               new line, vertical tab or formfeed (0x09 to 0x0D, 0x20)
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void TrimSpace_STR(var string,   // String to trim
                             int);         // STR_TRIM


  
//-----------------------------------------------------------------------------------------------------------
// UnQuote_STR Remove double quotes from string
//
// Notes       THE STRING IS MODIFIED.
//             The pointers will be advanced past a first character
//             quote and a last character quote will be set to .\0'.
//             Both first and last characters must be quotes for the
//             triming to take place.
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void UnQuote_STR(var string);  // String to unquote



//===========================================================================================================
//
// Misc Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// IGenGroupName_STR Generate a group name string
//                   from type string, database and channel(optional) strings..
//
// Notes             The output group name string is formed in the way of typestr_dbstr_chstr.
//                   If the database/channel strings is too long to fit the output string
//                   (max total length of 1040, including the NULL ending), then
//                   the typestr will always be kept the full length to be the first part,
//                   while the dbstr and/or chstr will be shortened to be the
//                   second and/or third part of the output string.
//
// See also          GenNewGroupName_MVIEW
//
// Available         5.1.4
//-----------------------------------------------------------------------------------------------------------

[_public] void IGenGroupName_STR(string,       // Input type string (static part)
                                 string,       // Input db string
                                 string,       // Input ch string (could be 0 length)
                                 var string,   // Output group name string
                                 int);         // Output buffer lengths (maximum 32)
#define GenGroupName_STR(istr1, istr2, istr3, ostr) IGenGroupName_STR(istr1, istr2, istr3, ostr, sizeof(ostr))



//===========================================================================================================
//
// Tokenizing Functions
//
//===========================================================================================================


  
//-----------------------------------------------------------------------------------------------------------
// iCountTokens_STR Counts number of tokens.
//
// Returns          Number of tokens in the string.
//
// Notes            Delimiters are "soft" in that one or more delimiters
//                  is considered a single delimiter, and preceding and
//                  trailing delimiters are ignored.
//                  
//                  DO NOT use this function except in GXC code. The corresponding
//                  IGetToken_STR function will not operate correctly in GX.Net code.
//
// Available        5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iCountTokens_STR(string,   // String to tokenize
                               string);  // Delimiter characters


  
//-----------------------------------------------------------------------------------------------------------
// IGetToken_STR Get a token from a tokenized string.
//
// Notes         Call iTokens_STR  to prepare the tokenized
//               string.
//               You MUST NOT get tokens beyond number of tokens returned
//               by iTokens_STR or iTokens2_STR.
//               The first token has index 0.
//               
//               DO NOT use this function except in GXC code.
//               IGetToken_STR function will not operate correctly in GX.Net code.
//
// See also      iTokens_STR, GetToken_STR
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] void IGetToken_STR(var string,   // Destination string
                             int,          // Maximum destination string length
                             string,       // Tokenized string
                             int);         // Token number wanted  (0 is the first!)
#define GetToken_STR(dest, orig, tok) IGetToken_STR(dest, sizeof(dest), orig, tok)


  
//-----------------------------------------------------------------------------------------------------------
// iTokenize_STR Tokenize a string based on any characters.
//
// Returns       Number of tokens
//
// Notes         This uses a finite state machine to tokenize on these
//               rules:
//               
//               1. Any one character following an escape delimiter is
//               treated as a normal character.
//               
//               2. Any characters inside a quote string are treated as
//               normal characters.
//               
//               3. Any number of Soft delimiters in sequence without a
//               hard delimiter are treated as one hard delimited.
//               
//               4. Any number of soft delimiters can preceed or follow
//               a hard delimiter and are ignored.
//               
//               
//               EXAMPLE
//               
//               Soft = [ ]   Hard = [,]   Escape = [\]    Quote = ["]
//               
//               [this is a , , the "test," of   ,  \,\" my delimite  fi,]
//               
//               Results in:
//               
//               [this] [is] [a] [] [the] ["test,"] [of] [\,\"] [my] [delimite] [fi] []
//               
//               
//               NOT use this function except in GXC code. The corresponding
//               etToken_STR function will not operate correctly in GX.Net code.
//
// See also      GetToken_STR
//
// Available     5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iTokenize_STR(var string,   // STR - String containing token(s)
                            string,       // szSoft - Soft delimiters (spaces/tabs)
                            string,       // szHard - Hard delimiters (commas)
                            string,       // szEsc  - Escape delimiters (back-slash)
                            string);      // szQuote- Quote delimiters  (quote characters)


  
//-----------------------------------------------------------------------------------------------------------
// iTokens_STR Tokenize a string
//
// Returns     Number of tokens, maximum is 2048
//
// Notes       Delimiters in the string are reduced to a single NULL.
//             Delimiters withing double quoted strings are ignored.
//             Use GetToken_STR to extract tokens.
//             
//             DO NOT use this function except in GXC code. The corresponding
//             IGetToken_STR function will not operate correctly in GX.Net code.
//
// See also    iTokens2_STR, GetToken_STR
//
// Available   5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iTokens_STR(var string,   // String to tokenize
                          string);      // Delimiter characters


  
//-----------------------------------------------------------------------------------------------------------
// iTokens2_STR General tokenize a string
//
// Returns      Number of Tokens
//
// Notes        This function is for old GX compatibility only.
//              See iTokenize_STR.
//              
//              DO NOT use this function except in GXC code. The corresponding
//              IGetToken_STR function will not operate correctly in GX.Net code.
//
// Available    5.0
//-----------------------------------------------------------------------------------------------------------

[_public] int iTokens2_STR(var string,   // String to tokenize
                           string,       // szSoft - Soft delimiters (spaces/tabs)
                           string,       // szHard - Hard delimiters (commas)
                           string,       // szEsc  - Escape delimiters (back-slash)
                           string);      // szQuote- Quote delimiters  (quote characters)


  
//-----------------------------------------------------------------------------------------------------------
// ParseList_STR Parse a tokenized list to get a selection list.
//
// Notes         Given a list such as "1,3,4,6-9,12", it fills the
//               input buffer with 1 if the number is selected,
//               0 if not. The items are delimited with spaces
//               or commas, and ranges are acceptable, either using
//               a "-" or ":", e.g.  3-6 and 3:6 both mean 3,4,5, and 6.
//               Only values from 0 to one less than the buffer length
//               are used.  Out-of-range values are ignored.
//
// Available     5.0.1
//-----------------------------------------------------------------------------------------------------------

[_public] void ParseList_STR(string,   // String to be parsed
                             VV);      // Selection Buffer to fill



//===========================================================================================================
//
// Deprecated Functions
//
//===========================================================================================================





//*** endblock Generated


#endif
