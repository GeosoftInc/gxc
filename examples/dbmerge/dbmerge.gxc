//===========================================================================
// clang-format off
NAME          = "Geosoft Database Merge"
#include <version.gxh>
DESCRIPTION   = "

   Import a database into the current database.
   
    DBMERGE.GDB1     Database to modify
           .GDB2     Database to merge
           .LINES    \"Selected\" for selected lines
                     \"All\" to include all lines
           .CHANNELS \"Displayed\" for displayed channels
                     \"All\" to include all channels
           .REPLACE  \"Yes\" to replace existing data
                     \"No\" to skip line if data exists
                     \"Append\" to append data to current data
"

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/Database/Import"

// Revision History:
// v8.4.0: If creating a new line, preserve original fiducials.
// v8.1.0: Replaced iGetLength_DB with iGetChannelLength_DB.
// v6.3.0: Must divide by number of VA channels when calling iGetLength_DB.
// v6.2.0: Fixed QA6084 - wrong line handle used in call to iGetLength_DB.
// v6.0.1: Slightly better alignment of input data.
// v5.1.7: Fixed bug which negated the "Yes" Replace option.
// v5.1.3: Using FindChan_DB and iExistChan_DB
//===========================================================================
//                                 RESOURCES
//===========================================================================

RESOURCE = "dbmerge.gr"
#include "dbmerge.grh"

#define DUMMY_NONE 0
#define DUMMY_ENDS 1
#define DUMMY_ALL  2

//===========================================================================
//                                  INCLUDE
//===========================================================================

#include <all.gxh>
// clang-format on     // system

//===========================================================================
//                                 VARIABLES
//===========================================================================

EDB         eDB1,eDB2;
DB          hDB1,hDB2;
DB_SYMB     Line,Line1;
DB_SYMB     Ch,Ch1,Blob,Blob1;
DB_SELECT   Select;
REG         hREG1,hREG2;

DGW         Diag;
VV          hVV;
VA          Data1VA, Data2VA;
BF          hBF;

string(STR_MULTI_FILE) sFiles;
string(STR_FILE) sDB1,sDB2;
string(STR_DB_SYMBOL) sCh,sLine,sBlob;
string(1024) sTemp, sMsg, sProg, sAlias;
string(STR_DEFAULT_SHORT) sLines,sChans;

int i,iChan,iSelect,iBlobs,iDB,iNDB,iNewLine;
int iChType,iCol,iRpl,iLen1,iLen2,iMaxLen;
int iLines,iTotLines;
int iMergedData, iProt, iMergeDBLoaded;
real rProg;

//===========================================================================
//                                   CODE
//===========================================================================

{
   // --- Are we running interactively ? ---
   
   if (iInteractive_SYS()) {
   
   
      // --- Get the database ---

      eDB1 = Current_EDB();
      GetName_EDB(eDB1,sDB1);
      hDB1 = Lock_EDB(eDB1);
      

      // --- Create the dialogue ---

      Diag = Create_DGW("DBMERGE");
      

      // --- Set any defaults ---

      SetInfo_DGW(Diag,_DBMERGE_0,DGW_FILEPATH,sDB1);
      SetInfoSYS_DGW(Diag,_DBMERGE_1,DGW_FILEPATH,"DBMERGE","GDB2");
      SetInfoSYS_DGW(Diag,_DBMERGE_2,DGW_LISTALIAS,"DBMERGE","LINES");
      SetInfoSYS_DGW(Diag,_DBMERGE_3,DGW_LISTALIAS,"DBMERGE","CHANNELS");
      SetInfoSYS_DGW(Diag,_DBMERGE_4,DGW_TEXT,"DBMERGE","REPLACE");
      

      // --- Run the dialogue ---

      if (iRunDialogue_DGW(Diag) == -1) Cancel_SYS();
      

      // --- Get the strings ---

      GetInfoSYS_DGW(Diag,_DBMERGE_0,DGW_FILEPATH,"DBMERGE","GDB1");
      GetInfoSYS_DGW(Diag,_DBMERGE_1,DGW_FILEPATH,"DBMERGE","GDB2");
      GetInfoSYS_DGW(Diag,_DBMERGE_2,DGW_LISTALIAS,"DBMERGE","LINES");
      GetInfoSYS_DGW(Diag,_DBMERGE_3,DGW_LISTALIAS,"DBMERGE","CHANNELS");
      GetInfoSYS_DGW(Diag,_DBMERGE_4,DGW_TEXT,"DBMERGE","REPLACE");

      GetInfo_DGW(Diag,_DBMERGE_4,DGW_LISTALIAS,sAlias);

  
      // --- Destroy the dialogue ---

      Destroy_DGW(Diag);
      UnLock_EDB(eDB1);
      
   }


   // --- Get Database to merge data into ---

   GetString_SYS("DBMERGE","GDB1",sDB1);
   Load_EDB(sDB1);
   eDB1 = Current_EDB();
   

   // --- replace ---
   
   GetString_SYS("DBMERGE","REPLACE",sTemp);
   if (iCharComp_STR(sTemp,_n("Y")) || iCharComp_STR(sTemp,_n("y")) || !iStrcmp_STR(sAlias,"1",STR_CASE_TOLERANT))
      iRpl = 1;
   else if (iCharComp_STR(sTemp,_n("A")) || iCharComp_STR(sTemp,_n("a")) || !iStrcmp_STR(sAlias,"2",STR_CASE_TOLERANT))
      iRpl = 2;
   else   
      iRpl = 0;
      

   // --- get selection ---
   
   GetString_SYS("DBMERGE","LINES",sLines);
   if (iCharComp_STR(sLines,_n("A"))) {
      iSelect = TRUE;      
   } else
      iSelect = FALSE;


   // --- Create channel name VV ---
      
   hVV = Create_VV(INT,0);


   // --- Create REGs ---
   
   hREG1 = Create_REG(256);
   hREG2 = Create_REG(256);
   

   // --- Determine the number of databases to merge ---

   GetString_SYS("DBMERGE","GDB2",sFiles);
   iNDB = iCountTokens_STR(sFiles,"|");

   
   // --- Validate the input data bases ---
   // --- Databases cannot have the same name ---

   for(iDB=0; iDB<iNDB; iDB++) {

      GetMFile_STR(sFiles,sDB2,iDB);        
      if (iStrcmp_STR(sDB1,sDB2,STR_CASE_TOLERANT) == 0)
         Abort_SYS(_("Cannot merge database into itself."));
   }


   // --- lock master DB ---

   hDB1  = Lock_EDB(eDB1);
   GetRegSymb_DB(hDB1,NULLSYMB,hREG1);


   // --- turn on progress ---

   Progress_SYS(1);
   ProgName_SYS(_("Merge databases"),1);


   // --- Cycle through the databases to merge ---

   iMergedData = FALSE;    // no data merged yet
   for(iDB=0; iDB<iNDB; iDB++) {

      GetMFile_STR(sFiles,sDB2,iDB);        

		iMergeDBLoaded = iLoaded_EDB(sDB2);

      Load_EDB(sDB2);
      eDB2 = Current_EDB();

      if(iNDB>1) {
         Printf_STR(sProg, sizeof(sProg), _("Merging %s"), sDB1);
      }


      // --- get the channel list ---
   
      GetString_SYS("DBMERGE","CHANNELS",sChans);
      if (iCharComp_STR(sChans,_n("A"))) {
         hDB2 = Lock_EDB(eDB2);
         iChan = iSymbList_DB(hDB2,hVV,DB_SYMB_CHAN);
         UnLock_EDB(eDB2);
      } else {
         iChan = iDispChanList_EDB(eDB2,hVV);
      }


      // --- lock databases ---
   
      hDB2  = Lock_EDB(eDB2);
   
   
      if(iSelect) {    
         Select = GetSelect_DB(hDB2);
         Select_DB(hDB2,"",DB_LINE_SELECT_INCLUDE);
      }


      // --- Create new channels ---

      for (i=0;i<iChan;i++) {

         // --- add channel if not already there ---
      
         Ch = (DB_SYMB)iGetInt_VV(hVV,i);
         GetChanName_DB(hDB2,Ch,sCh);
       
         if (!iExistChan_DB(hDB1,sCh))
            DupSymbAcross_DB(hDB2,hDB1,Ch);
         
      }
   
         
      // --- Go through all selected Lines ---

      iLines = 0;
      iTotLines = iCountSelLines_DB(hDB2);
      Line = FirstSelLine_DB(hDB2);
      while (iIsLineValid_DB(hDB2,Line))
      {

         // --- Get the line label

         LockSymb_DB(hDB2,Line,DB_LOCK_READONLY,DB_WAIT_INFINITY);
         LineLabel_DB(hDB2,Line,sLine,7);
         UnLockSymb_DB(hDB2,Line);


         // --- Create Line ---

         iNewLine = 0;
         if (iExistSymb_DB(hDB1,sLine,DB_SYMB_LINE) == 1)
            Line1 = FindSymb_DB(hDB1,sLine,DB_SYMB_LINE);
         else {
            Line1 = DupSymbAcross_DB(hDB2,hDB1,Line);
            iNewLine = 1;
         }
         
      
         
         // --- In append mode, find the length of the longest channel's data ---

         iMaxLen = 0;         
         if(iRpl==2 && iNewLine==0) {
         
            for (i=0;i<iChan;i++) {
      
      
               // --- Get channel name ---
         
               Ch = (DB_SYMB)iGetInt_VV(hVV,i);
               GetChanName_DB(hDB2,Ch,sCh);
               Ch1 = FindChan_DB(hDB1,sCh);
               if (Ch1 == NULLSYMB) 
                  Abort_SYS(_("ASSERT - channels should exist by now."));
               
               LockSymb_DB(hDB1,Ch1,DB_LOCK_READONLY,DB_WAIT_INFINITY);
               iLen1 = iGetChannelLength_DB(hDB1, Line1, Ch1); 
               if(iLen1>iMaxLen) iMaxLen = iLen1;               
               UnLockSymb_DB(hDB1,Ch1);
            }
         }
         
         
         // --- Go through standard channels ---
   
         for (i=0;i<iChan;i++) {
   
   
            // --- Get channel name ---
      
            Ch = (DB_SYMB)iGetInt_VV(hVV,i);
            GetChanName_DB(hDB2,Ch,sCh);
            Ch1 = FindChan_DB(hDB1,sCh);
            if (Ch1 == NULLSYMB) 
               Abort_SYS(_("ASSERT - channels should exist by now."));
            LockSymb_DB(hDB1,Ch1,DB_LOCK_READWRITE,DB_WAIT_INFINITY);


            // --- progress ---
         
            if(iNDB==1) {
               Strcpy_STR(sProg,sLine);
               Strcat_STR(sProg,":");
               Strcat_STR(sProg,sCh);
            }
            ProgName_SYS(sProg,1);

            rProg = 100.0*( ((real)iDB + (real)iLines/(real)iTotLines) / (real)iNDB );
            ProgUpdate_SYS((int)rProg);
         
         
            // --- if not replacing, check if have data in output ---
         
            if (iRpl==0 && (iGetChannelLength_DB(hDB1,Line1,Ch1) != 0)) {
               UnLockSymb_DB(hDB1,Ch1);
               continue;
            }
                     
         
            // --- Get data from the channel found ---

            iChType = iGetChanType_DB(hDB2,Ch);
            iCol    = iGetColVA_DB(hDB2,Ch);

            // --- create VA ---
            
            Data2VA = CreateExt_VA(iChType,0,iCol);
               
               
            // --- get the data ---
            
            LockSymb_DB(hDB2,Ch,DB_LOCK_READONLY,DB_WAIT_NONE);      
            GetChanVA_DB(hDB2,Line,Ch,Data2VA);
            UnLockSymb_DB(hDB2,Ch);

            // --- Remove any protection ---

            iProt = iGetChanProtect_DB(hDB1, Ch1);
            SetChanProtect_DB(hDB1, Ch1, DB_CHAN_UNPROTECTED);
            
            
            // --- If appending, get initial data and extend it ---
            
            if(iRpl==2) {            			  
				  
               Data1VA = CreateExt_VA(iChType,0,iCol);

               GetChanVA_DB(hDB1,Line1,Ch1,Data1VA);
                  
               // --- Buffer input data to longest channel's length so all input data lines up. This does NOT
               //     account for original fiducial differences, or fiducial increments ---
                  
               iLen1 = iLen_VA(Data1VA);
               iLen2 = iLen_VA(Data2VA);
               if(iLen2>0 && iLen1<iMaxLen) {
                  SetLen_VA(Data1VA, iMaxLen);
                  SetIntN_VA(Data1VA, iLen1, iMaxLen-iLen1, iDUMMY);                     
               }
                  
					Append_VA(Data1VA, Data2VA);


					// --- If there is no data in the destination to start with, use the merging fiducials ---

					if (iLen1 == 0)
					{
						SetFidStart_VA(Data1VA, rGetFidStart_VA(Data2VA));
						SetFidIncr_VA(Data1VA, rGetFidIncr_VA(Data2VA));
					}
				  
				  
					// --- Output the data ---

               PutChanVA_DB(hDB1,Line1,Ch1,Data1VA);                          

               Destroy_VA(Data1VA);

            }
            else
               PutChanVA_DB(hDB1,Line1,Ch1,Data2VA);


            // --- Reset channel protection ---

            SetChanProtect_DB(hDB1, Ch1, iProt);

            if(iLen_VA(Data2VA) > 0) iMergedData = TRUE;

            Destroy_VA(Data2VA);            
         
            UnLockSymb_DB(hDB1,Ch1);
         
         }
      

         // --- Advance to Next Line ---

         Line = NextSelLine_DB(hDB2, Line);
         iLines++;

      }
   

      // --- Merge database REG ---
   
      GetRegSymb_DB(hDB2,NULLSYMB,hREG2);   
      Merge_REG(hREG1,hREG2,REG_MERGE_ADD);
   
   
      // --- copy blobs ---
   
      iBlobs = iSymbList_DB(hDB2,hVV,DB_SYMB_BLOB);
      for (i=0;i<iBlobs;i++) {
         Blob = (DB_SYMB)iGetInt_VV(hVV,i);
         GetSymbName_DB(hDB2,Blob,sBlob);
      
         if (iStrncmp_STR(sBlob,"__",2,STR_CASE_SENSITIVE)==0) continue;

         if (FindSymb_DB(hDB1,sBlob,DB_SYMB_BLOB) == NULLSYMB) {
      
            // --- copy blob to merged database ---
         
            hBF = Create_BF("",BF_READWRITE_NEW);

            LockSymb_DB(hDB2,Blob,DB_LOCK_READONLY,DB_WAIT_NONE);      
            ReadBlobBF_DB(hDB2,Blob,hBF);
            UnLockSymb_DB(hDB2,Blob);
         
            Blob1 = CreateSymb_DB(hDB1,sBlob,DB_SYMB_BLOB,DB_OWN_SHARED,DB_CATEGORY_BLOB_NORMAL); 
            Seek_BF(hBF,0,0);
            LockSymb_DB(hDB1,Blob1,DB_LOCK_READWRITE,DB_WAIT_NONE);
            WriteBlobBF_DB(hDB1,Blob1,hBF);
            UnLockSymb_DB(hDB1,Blob1);
         
            SetDestroyStatus_BF(hBF,BF_DELETE);
            DestroyEx_BF(hBF);
         }      
      }
   
   
      // --- replace selections ---
   
      if (iSelect)
         SetSelect_DB(hDB2,Select);

      UnLock_EDB(eDB2);
		if (iInteractive_SYS() && iMergeDBLoaded == 0)
			UnLoad_EDB(sDB2);
   }


   // --- Replace the REG ---
         
   SetRegSymb_DB(hDB1,NULLSYMB,hREG1);
   
      
   // --- select all lines in duplicate locks ---
      
   Select_DB(hDB1,"",DB_LINE_SELECT_INCLUDE);
   
   
   // --- clean up ---
   
   Progress_SYS(0);
   
   UnLock_EDB(eDB1);

   if (iInteractive_SYS()) DelLine0_EDB(eDB1);

	MakeCurrent_EDB(eDB1);
   
   Destroy_VV(hVV);
   Destroy_REG(hREG1);
   Destroy_REG(hREG2);


   if (iInteractive_SYS())
   {
      // --- If nothing happened, write an error/warning message ---

      if(!iMergedData && iRpl==0) {

         Strcpy_STR(sMsg, _("No data was merged. No data is merged\r\nin lines with the same name if there is \r\ndata in the channels in the destination database, \r\nand the replace option is set to \"no\""));
         DisplayMessage_SYS(_("Merge Databases"), sMsg);
      }
   }
}
