//===========================================================================
// clang-format off
NAME          = "Create a line intersection table"
#include <version.gxh>

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/LevTieLine"

DESCRIPTION   = "
   Find the intersections between lines.  The interection points will be 
   tabulated in a Geosoft ASCII table file, which can in turn be used by 
   the XLEVEL GX to extract leveling parameters.

   INTERSCT.InX       -  Input x channel
           .InY       -  Input y channel
           .InZ       -  Input z channel
           .Tol       -  Intersection tolerance (0.0 for line crossings)
           .Lines     -  \"Tie\" to find tie intersections only.
                         \"All\" to find all line intersections.
           .OldTable  -  Existing intersection table/database
           .Table     -  Ouput intersection table/database
           .StatsFile -  Output CSV file for statistics
"
// Revision History
// v7.1.0: Add support for intersection databases.
// v7.0.0: Refid locations to Z channel if Z fid increment is smaller.
// v5.1.4: Can now use existing intersection table for intersections.
//         Use current X,Y channels if not already set.
//         Using FindChan_DB and iExistChan_DB
//===========================================================================

RESOURCE = "intersct.gr"
#include "intersct.grh"

//===========================================================================

#include <all.gxh>
// clang-format on

//===========================================================================
//                             GLOBAL VARIABLES
//===========================================================================

string(STR_DB_SYMBOL) sInX, sInY, sInZ, sTmpX, sTmpY, sLine;
string(STR_FILE) sInput, sOutput;  // File Names
string(STR_FILE) sInputDB, sOutputDB, sCurDB, sExt, sDB, sStatsFile;
string(STR_DEFAULT) sProg;
string(STR_DEFAULT) sTableLineBuffer;
string(STR_DEFAULT_SHORT) sToken;

string(4) sOpt;  // Intersection option

EDB EData, EIntData;
DB Data, IntData;
DB_SYMB InX, InY, InZ, TmpX, TmpY, Line;  // Temp channels and line
DGW Diag;
LST List;  // List
LST LineLST;
real rTol, rFidIncrX, rFidIncrZ;
real rXDifference, rXDifferenceMin, rXDifferenceMax, rXDifferenceSum, rXDifferenceSumOfSquares, rXDifferenceShift, rXDifferenceStdDev, rXDifferenceShifted;
real rYDifference, rYDifferenceMin, rYDifferenceMax, rYDifferenceSum, rYDifferenceSumOfSquares, rYDifferenceShift, rYDifferenceStdDev, rYDifferenceShifted;
real rDistance, rDistanceMin, rDistanceMax, rDistanceSum, rDistanceSumOfSquares, rDistanceShift, rDistanceStdDev, rDistanceShifted;
real rDataDifference, rDataDifferenceMin, rDataDifferenceMax, rDataDifferenceSum, rDataDifferenceSumOfSquares, rDataDifferenceShift, rDataDifferenceStdDev, rDataDifferenceShifted;
real rN, rNSquared, rMeanOfSquares, rSquareOfMean;
int iIntersectionCount;
int i, iN, iTmp, iInGDB, iOutGDB, iReloadInputDB, iReloadOutputDB, iStatsFile;
RA TableReader;
WA TableWriter;

//===========================================================================
//                             INTERSECTION CODE
//===========================================================================

{
   // --- Get the Database ---

   EData = Current_EDB();
   GetName_EDB(EData, sCurDB);
   Data = Lock_EDB(EData);


   // --- See if this is an intersection database and make the original database current. ---

   GetRegSymbSetting_DB(Data, NULLSYMB, "Levelling.Database", sDB, sizeof(sDB));
   if (iStrlen_STR(sDB) > 0)
   {
      UnLock_EDB(EData);
      EData = Load_EDB(sDB);

      GetName_EDB(EData, sCurDB);
      Data = Lock_EDB(EData);
   }


   // --- Are we running interactively ? ---

   if (iInteractive_SYS())
   {
      // --- Create the Dialogue ---

      Diag = Create_DGW("InterSctForm");

      // --- Set up lists ---

      List = GetList_DGW(Diag, _INTERSCTFORM_0);
      SymbLST_DB(Data, List, DB_SYMB_CHAN);
      Sort_LST(List, 0, 0);
      List = GetList_DGW(Diag, _INTERSCTFORM_1);
      SymbLST_DB(Data, List, DB_SYMB_CHAN);
      Sort_LST(List, 0, 0);
      List = GetList_DGW(Diag, _INTERSCTFORM_2);
      SymbLST_DB(Data, List, DB_SYMB_CHAN);
      Sort_LST(List, 0, 0);

      // --- Set any Defaults ---

      GetString_SYS("Intersct", "InX", sInX);
      if (!iStrlen_STR(sInX))
      {
         GetXYZChan_DB(Data, DB_CHAN_X, sInX);
         SetString_SYS("Intersct", "InX", sInX);
      }
      GetString_SYS("Intersct", "InY", sInY);
      if (!iStrlen_STR(sInY))
      {
         GetXYZChan_DB(Data, DB_CHAN_Y, sInY);
         SetString_SYS("Intersct", "InY", sInY);
      }

      SetInfoSYS_DGW(Diag, _INTERSCTFORM_0, DGW_TEXT, "InterSct", "InX");
      SetInfoSYS_DGW(Diag, _INTERSCTFORM_1, DGW_TEXT, "InterSct", "InY");
      SetInfoSYS_DGW(Diag, _INTERSCTFORM_2, DGW_TEXT, "InterSct", "InZ");
      SetInfoSYS_DGW(Diag, _INTERSCTFORM_3, DGW_TEXT, "InterSct", "Tol");
      SetInfoSYS_DGW(Diag, _INTERSCTFORM_4, DGW_LISTALIAS, "InterSct", "Lines");
      SetInfoSYS_DGW(Diag, _INTERSCTFORM_5, DGW_FILEPATH, "InterSct", "OldTable");
      SetInfoSYS_DGW(Diag, _INTERSCTFORM_6, DGW_FILEPATH, "InterSct", "Table");
      SetInfoSYS_DGW(Diag, _INTERSCTFORM_7, DGW_FILEPATH, "InterSct", "StatsFile");

      // --- Run the Dialogue ---

      i = iRunDialogue_DGW(Diag);
      if (i != 0) Cancel_SYS();  // He hit cancel


      // --- Get the Strings ---

      GetInfoSYS_DGW(Diag, _INTERSCTFORM_0, DGW_TEXT, "InterSct", "InX");
      GetInfoSYS_DGW(Diag, _INTERSCTFORM_1, DGW_TEXT, "InterSct", "InY");
      GetInfoSYS_DGW(Diag, _INTERSCTFORM_2, DGW_TEXT, "InterSct", "InZ");
      GetInfoSYS_DGW(Diag, _INTERSCTFORM_3, DGW_TEXT, "InterSct", "Tol");
      GetInfoSYS_DGW(Diag, _INTERSCTFORM_4, DGW_LISTALIAS, "InterSct", "Lines");
      GetInfoSYS_DGW(Diag, _INTERSCTFORM_5, DGW_FILEPATH, "InterSct", "OldTable");
      GetInfoSYS_DGW(Diag, _INTERSCTFORM_6, DGW_FILEPATH, "InterSct", "Table");
      GetInfoSYS_DGW(Diag, _INTERSCTFORM_7, DGW_FILEPATH, "InterSct", "StatsFile");

      // --- Destroy the Dialogue ---

      Destroy_DGW(Diag);
   }


   // --- Get Parameters ---

	GetString_SYS("Intersct", "InX", sInX);
	GetString_SYS("Intersct", "InY", sInY);
   GetString_SYS("Intersct", "InZ", sInZ);


   if (iExistReal_SYS("Intersct", "Tol"))
   {
      rTol = rGetReal_SYS("Intersct", "Tol");
      if (rTol < 0.0) rTol = 0.0;
   }
   else
      rTol = 0.0;
   GetString_SYS("Intersct", "Lines", sOpt);
   GetString_SYS("Intersct", "OldTable", sInput);
   GetString_SYS("Intersct", "Table", sOutput);

   iStatsFile = 0;
   GetString_SYS("Intersct", "StatsFile", sStatsFile);
   if (iStrlen_STR(sStatsFile) != 0)
      iStatsFile = 1;


   // --- Get the absolute file names so the names can be compared. ---

   AbsoluteFileName_SYS(sInput, sInput);
   AbsoluteFileName_SYS(sOutput, sOutput);
   AbsoluteFileName_SYS(sCurDB, sCurDB);

   if (iStrlen_STR(sInput))
   {
      if (0 == iStrcmp_STR(sInput, sOutput, STR_CASE_TOLERANT))
         Abort_SYS(_("Input and output table files cannot be the same."));
      if (0 == iStrcmp_STR(sInput, sCurDB, STR_CASE_TOLERANT))
         Abort_SYS(_("The current database cannot be the input intersection database."));
      if (0 == iStrcmp_STR(sOutput, sCurDB, STR_CASE_TOLERANT))
         Abort_SYS(_("The current database cannot be the output intersection database."));
   }


   // --- Are the input or ouput tables databases? ---

   FileNamePart_STR(sInput, sExt, STR_FILE_PART_EXTENSION);
   iInGDB = 0;
   if (iStrlen_STR(sInput) != 0 &&
       iStrcmp_STR(sExt, "GDB", STR_CASE_TOLERANT) == 0)
      iInGDB = 1;

   FileNamePart_STR(sOutput, sExt, STR_FILE_PART_EXTENSION);
   iOutGDB = 0;
   if (iStrlen_STR(sOutput) != 0 &&
       iStrcmp_STR(sExt, "GDB", STR_CASE_TOLERANT) == 0)
      iOutGDB = 1;


   // --- If the input is a database, create a temporary input table ---

   if (iInGDB)
   {
      // --- Must unload intersection database to convert it ---

      Strcpy_STR(sInputDB, sInput);
      iReloadInputDB = 0;
      if (iLoaded_EDB(sInputDB))
      {
         UnLoad_EDB(sInputDB);
         iReloadInputDB = 1;
      }
      Strcpy_STR(sInput, "_TempInputIntersection.tbl");
      Progress_SYS(1);
      IntersectGDBtoTBL_DU(sInputDB, sInput);
      Progress_SYS(0);
   }


   // --- If the output is a database, create a temporary output table ---

   if (iOutGDB)
   {
      // --- Must unload intersection database to delete/overwrite it ---

      Strcpy_STR(sOutputDB, sOutput);
      iReloadOutputDB = 0;
      if (iLoaded_EDB(sOutputDB))
      {
         UnLoad_EDB(sOutputDB);
         iReloadOutputDB = 1;
      }
      Strcpy_STR(sOutput, "_TempOutputIntersection.tbl");
      if (iFileExist_SYS(sOutput) == 1)
      {
         if (iDeleteFile_SYS(sOutput) != 0)
         {
            Abort_SYS(_("ERROR: Failed to delete _TempOutputIntersection.tbl"));
         }
      }
   }


   // --- Do the Input Channels Exist ? ---

   InX = FindChan_DB(Data, sInX);
   if (InX == NULLSYMB)
      Abort_SYS(_("Input X channel does not exist."));
   InY = FindChan_DB(Data, sInY);
   if (InY == NULLSYMB)
      Abort_SYS(_("Input Y channel does not exist."));
   InZ = FindChan_DB(Data, sInZ);
   if (InZ == NULLSYMB)
      Abort_SYS(_("Input Z channel does not exist."));


   // --- Prepare to do the work ---

   Progress_SYS(1);


   // --- Lock the Symbols ---

   LockSymb_DB(Data, InX, DB_LOCK_READONLY, DB_WAIT_NONE);
   LockSymb_DB(Data, InY, DB_LOCK_READONLY, DB_WAIT_NONE);
   LockSymb_DB(Data, InZ, DB_LOCK_READONLY, DB_WAIT_NONE);


   //     The Intersect routines re-fid data to the X channels rate, so if
   //     if the Z channel is at a higher sampling rate than the X channel,
   //     then information can be lost. To get around this,
   //     then create temporary X and Y channels at the higher sampling rate.

   // --- Get a LST of all the currently selected lines ---

   LineLST = CreateSymbLST_DB();
   SelectedLineLST_DB(Data, LineLST);


   // --- Go through all the lines to see if we need to re-fid.
   //     This method assumes that there are not multiple fid increments
   //     for the same channel in different lines.
   //     This process is not necessary when calculating from an existing table. ---

   iTmp = GS_FALSE;
   if (iStrlen_STR(sInput) == 0)
   {
      iN = iSize_LST(LineLST);
      for (i = 0; i < iN; i++)
      {
         GetSymbItem_LST(LineLST, i, sLine, Line);

         rFidIncrX = rGetFidIncr_DB(Data, Line, InX);
         rFidIncrZ = rGetFidIncr_DB(Data, Line, InZ);
         if (rFidIncrX == rDUMMY) rFidIncrX = 1.0;
         if (rFidIncrZ == rDUMMY) rFidIncrZ = 1.0;

         if (rFidIncrZ < rFidIncrX)
         {
            iTmp = GS_TRUE;
            break;
         }
      }
   }


   // --- Do the re-fidding? ---

   if (iTmp)
   {
      // --- Temp channel names ---

      Strcpy_STR(sTmpX, "_IntTmpX");
      Strcpy_STR(sTmpY, "_IntTmpY");


      // --- Delete the temp channels if they already exist ---

      TmpX = FindChan_DB(Data, sTmpX);
      if (TmpX != NULLSYMB)
      {
         LockSymb_DB(Data, TmpX, DB_LOCK_READWRITE, DB_WAIT_NONE);
         DeleteSymb_DB(Data, TmpX);
      }
      TmpY = FindChan_DB(Data, sTmpY);
      if (TmpY != NULLSYMB)
      {
         LockSymb_DB(Data, TmpY, DB_LOCK_READWRITE, DB_WAIT_NONE);
         DeleteSymb_DB(Data, TmpY);
      }


      // --- Create copies of current X and Y ---

      TmpX = DupSymb_DB(Data, InX, sTmpX);
      TmpY = DupSymb_DB(Data, InY, sTmpY);


      // --- Refid ---

      Progress_SYS(1);
      Strcpy_STR(sProg, _("Re-sampling locations to the data fid increment."));
      ProgName_SYS(sProg, 1);

      iN = iSize_LST(LineLST);
      for (i = 0; i < iN; i++)
      {
         ProgUpdateL_SYS(i, iN);
         GetSymbItem_LST(LineLST, i, sLine, Line);

         CopyData_DB(Data, Line, InX, TmpX);
         CopyData_DB(Data, Line, InY, TmpY);
         ReFidCh_DU(Data, Line, InZ, TmpX);
         ReFidCh_DU(Data, Line, InZ, TmpY);
      }
      ProgUpdate_SYS(100);

      UnLockSymb_DB(Data, InX);
      UnLockSymb_DB(Data, InY);
      InX = TmpX;
      InY = TmpY;
   }


   // --- Do the Intersection ---

   if (iStrlen_STR(sInput))
      IntersectOld_DU(Data, InX, InY, InZ, sInput, sOutput);
   else
   {
      ToUpper_STR(sOpt);
      if (iCharComp_STR(sOpt, "A"))
         IntersectAll_DU(Data, InX, InY, InZ, rTol, sOutput);
      else
         Intersect_DU(Data, InX, InY, InZ, rTol, sOutput);
   }


   // --- UnLock Symbols / Delete temp X,Y ---

   if (iTmp)
   {
      DeleteSymb_DB(Data, InX);
      DeleteSymb_DB(Data, InY);
   }
   else
   {
      UnLockSymb_DB(Data, InX);
      UnLockSymb_DB(Data, InY);
   }
   UnLockSymb_DB(Data, InZ);


   // --- Release the Database ---

   UnLock_EDB(EData);


   // --- If the input is a database, reload it? ---

   if (iInGDB)
   {
      if (iReloadInputDB)
         Load_EDB(sInputDB);
      iDeleteFile_SYS(sInput);  // delete the temp table
   }



   if (iStatsFile==1)
   {
      // Scan the output table to find the minimum, maximum, and standard deviation for
      // the x-difference, y-difference, distance and data values of the intersections.

      // We calculate the standard deviation by calculating the variance as the difference
      // between the mean of squares and square of mean ( Var(X) = Avg(X^2) - (Avg(X))^2 )
      // and the taking the square root of the variance to get the standard deviation.
      // This method allows the standard deviation to be calculated in one pass over the
      // values.

      // We minimize possible floating-point rounding errors by subtracting a constant
      // value from each element. (Adding or subtracting a constant from all the values
      // doesn't change the variance.)

      iIntersectionCount = 0;
      rXDifferenceMin = 1000000000.0;
      rXDifferenceMax = 0.0;
      rXDifferenceSum = 0.0;
      rXDifferenceSumOfSquares = 0.0;
      rYDifferenceMin = 1000000000.0;
      rYDifferenceMax = 0.0;
      rYDifferenceSum = 0.0;
      rYDifferenceSumOfSquares = 0.0;
      rDistanceMin = 1000000000.0;
      rDistanceMax = 0.0;
      rDistanceSum = 0.0;
      rDistanceSumOfSquares = 0.0;
      rDataDifferenceMin = 1000000000.0;
      rDataDifferenceMax = 0.0;
      rDataDifferenceSum = 0.0;
      rDataDifferenceSumOfSquares = 0.0;
      TableReader = Create_RA(sOutput);

      rXDifferenceShift = rDUMMY;
      rYDifferenceShift = rDUMMY;
      rDistanceShift = rDUMMY;
      rDataDifferenceShift = rDUMMY;

      iSeek_RA(TableReader, 1);
      while(IiGets_RA(TableReader, sTableLineBuffer, STR_DEFAULT) == 0)
      {
         if(iStrlen_STR(sTableLineBuffer) == 0 || iStrncmp_STR(sTableLineBuffer,"/", 1, STR_CASE_TOLERANT) == 0)
            continue;

         iTokens_STR(sTableLineBuffer, " \t,");

         GetToken_STR(sToken, sTableLineBuffer, 2);
         rXDifference = rScanR_STR(sToken);
         if(rXDifference > rXDifferenceMax)
            rXDifferenceMax = rXDifference;
         if(rXDifference < rXDifferenceMin)
            rXDifferenceMin = rXDifference;
         if(rXDifferenceShift == rDUMMY)
            rXDifferenceShift = rXDifference;
         rXDifferenceShifted = rXDifference - rXDifferenceShift;
         rXDifferenceSum = rXDifferenceShifted + rXDifferenceSum;
         rXDifferenceSumOfSquares = rXDifferenceShifted*rXDifferenceShifted + rXDifferenceSumOfSquares;

         GetToken_STR(sToken, sTableLineBuffer, 3);
         rYDifference = rScanR_STR(sToken);
         if(rYDifference > rYDifferenceMax)
            rYDifferenceMax = rYDifference;
         if(rYDifference < rYDifferenceMin)
            rYDifferenceMin = rYDifference;
         if(rYDifferenceShift == rDUMMY)
            rYDifferenceShift = rYDifference;
         rYDifferenceShifted = rYDifference - rYDifferenceShift;
         rYDifferenceSum = rYDifferenceShifted + rYDifferenceSum;
         rYDifferenceSumOfSquares = rYDifferenceShifted*rYDifferenceShifted + rYDifferenceSumOfSquares;

         GetToken_STR(sToken, sTableLineBuffer, 4);
         rDistance = rScanR_STR(sToken);
         if(rDistance > rDistanceMax)
            rDistanceMax = rDistance;
         if(rDistance < rDistanceMin)
            rDistanceMin = rDistance;
         if(rDistanceShift == rDUMMY)
            rDistanceShift = rDistance;
         rDistanceShifted = rDistance - rDistanceShift;
         rDistanceSum = rDistanceShifted + rDistanceSum;
         rDistanceSumOfSquares = rDistanceShifted*rDistanceShifted + rDistanceSumOfSquares;

         GetToken_STR(sToken, sTableLineBuffer, 5);
         rDataDifference = rScanR_STR(sToken);
         if(rDataDifference > rDataDifferenceMax)
            rDataDifferenceMax = rDataDifference;
         if(rDataDifference < rDataDifferenceMin)
            rDataDifferenceMin = rDataDifference;
         if(rDataDifferenceShift == rDUMMY)
            rDataDifferenceShift = rDataDifference;
         rDataDifferenceShifted = rDataDifference - rDataDifferenceShift;
         rDataDifferenceSum = rDataDifferenceShifted + rDataDifferenceSum;
         rDataDifferenceSumOfSquares = rDataDifferenceShifted*rDataDifferenceShifted + rDataDifferenceSumOfSquares;

         iIntersectionCount = iIntersectionCount + 1;
      }

      rN = (real)iIntersectionCount;
      rNSquared = (real)(iIntersectionCount*iIntersectionCount);

      rMeanOfSquares = rXDifferenceSumOfSquares / rN;
      rSquareOfMean = rXDifferenceSum / rNSquared;
      rXDifferenceStdDev = rSqrt_MATH(rMeanOfSquares-rSquareOfMean);

      rMeanOfSquares = rYDifferenceSumOfSquares / rN;
      rSquareOfMean = rYDifferenceSum / rNSquared;
      rYDifferenceStdDev = rSqrt_MATH(rMeanOfSquares-rSquareOfMean);

      rMeanOfSquares = rDistanceSumOfSquares / rN;
      rSquareOfMean = rDistanceSum / rNSquared;
      rDistanceStdDev = rSqrt_MATH(rMeanOfSquares-rSquareOfMean);

      rMeanOfSquares = rDataDifferenceSumOfSquares / rN;
      rSquareOfMean = rDataDifferenceSum / rNSquared;
      rDataDifferenceStdDev = rSqrt_MATH(rMeanOfSquares-rSquareOfMean);

      TableWriter = Create_WA(sStatsFile, WA_NEW);
      Puts_WA(TableWriter, "                  Min          Max         StdDev\r\n");
      Printf_STR(sTableLineBuffer, sizeof(sTableLineBuffer),
                 "X_Position % 13.3f% 13.3f% 13.3f\r\n",
                 rXDifferenceMin, rXDifferenceMax, rXDifferenceStdDev);
      Puts_WA(TableWriter, sTableLineBuffer);
      Printf_STR(sTableLineBuffer, sizeof(sTableLineBuffer),
                 "Y_Position % 13.3f% 13.3f% 13.3f\r\n",
                 rYDifferenceMin, rYDifferenceMax, rYDifferenceStdDev);
      Puts_WA(TableWriter, sTableLineBuffer);
      Printf_STR(sTableLineBuffer, sizeof(sTableLineBuffer),
                 "Distance   % 13.3f% 13.3f% 13.3f\r\n",
                 rDistanceMin, rDistanceMax, rDistanceStdDev);
      Puts_WA(TableWriter, sTableLineBuffer);
      Printf_STR(sTableLineBuffer, sizeof(sTableLineBuffer),
                 "Data       % 13.3f% 13.3f% 13.3f\r\n",
                 rDataDifferenceMin, rDataDifferenceMax, rDataDifferenceStdDev);
      Puts_WA(TableWriter, sTableLineBuffer);
   }


   // --- If the output is a database, create it from the
   //     temp table, and load it. ---

   if (iOutGDB)
   {
      if (iFileExist_SYS(sOutput) == 1)
      {
         IntersectTBLtoGDB_DU(sOutput, sOutputDB);
         Strcpy_STR(sOutput, sOutputDB);

         EIntData = Load_EDB(sOutputDB);


         // --- Mark the intersection database with the flight database name ---

         IntData = Lock_EDB(EIntData);
         SetRegSymbSetting_DB(IntData, NULLSYMB, "Levelling.Database", sCurDB);
         Commit_DB(IntData);
         UnLock_EDB(EIntData);


         // --- delete the temp table ---

         iDeleteFile_SYS(sOutput);
      }
      else
      {
         DisplayMessage_SYS(_("Create Intersection Database"), _("No tie lines or intersections were found in the selected lines in the database."));
         Cancel_SYS();
      }
   }


   // --- pass on input channel ---

   SetString_SYS("LVCORR", "IN", sInZ);
   SetString_SYS("STATLEV", "IN", sInZ);
   SetString_SYS("FULLLEV", "IN", sInZ);
   SetString_SYS("XLEVEL", "REF", sInZ);
   SetString_SYS("XLEVEL", "INTERSECT", sOutput);


   // --- Done ---

   Progress_SYS(0);
}
