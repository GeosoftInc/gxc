//===========================================================================
// clang-format off
NAME          = "Append gravity survey to master database."
#include <version.gxh>

TRANSLATIONDOMAIN = "gravity"
TRANSLATIONFRIENDLYPATH = "GX/Gravity"

DESCRIPTION   = "

    GRAPPEND.MASTER   Master database
            .SURVEY   Survey database

"
// Revision History:
// v8.1.0: Replaced iGetLength_DB with iGetChannelLength_DB.
// v7.1.0: Delete empty L0 and display channels even for existing master GDB.
// v5.1.3: Using "Current" X and Y channels

//===========================================================================

RESOURCE = "grappend.gr"
#include "grappend.grh"

//===========================================================================

#include <all.gxh>
// clang-format on

//===========================================================================
//                             GLOBAL VARIABLES
//===========================================================================

DGW hDGW;  // Dialogue handle

EDB eDBi, eDBo;
DB hDBi, hDBo;
DB_SYMB Chan, TypeChan, StnChan, Group, SrcChan, Ch, ChX, ChY, LineSymbol;
REG hDataREG;  // Gravity data REG
REG hWorkREG;  // Gravity work REG
VV hTypeVV, hStnVV, hSrcVV;
IPJ hIPJ;
LST hLST, hChanLST, hCopyLST, hRenameLST, List, hLineSymbolLST, hLineSymbolLSTIn, hLineSymbolLSTOut;
WA hWA;

string(STR_FILE) sMaster, sSurvey, sReportFile, sCurrentSurveyFile, sSurveyFile;
string(STR_DEFAULT_SHORT) sType;
string(STR_DEFAULT_SHORT) sSrc, sSrcNew;
string(STR_DEFAULT_LONG) sMsg;
string(STR_DEFAULT_LONG) sSameLineNames;
string(STR_DB_SYMBOL) sStation, sLatitude, sLongitude, sFrom, sTo, sChan, sLineName, sLineNameIn, sLineNameOut;
int i, ii, iNew, iLen, iNChan, iAlternateChannels, iInteractive, n, inLineCount, outLineCount, j, k, sameLineCount, maxSameLineCount;
int iGscale, iClosure, iType, iCheck, iSurveyLoaded, iFile, iFiles;
int iDisplayReportFile, iLineEmpty;
real rStart, rIncr;

//===========================================================================
//                                    CODE
//===========================================================================

#define REMOVE(A, B)                              \
   if (A && iExistSymb_DB(hDBo, B, DB_SYMB_CHAN)) \
   {                                              \
      Chan = FindSymb_DB(hDBo, B, DB_SYMB_CHAN);  \
      LOCK_RW(hDBo, Chan);                        \
      DeleteSymb_DB(hDBo, Chan);                  \
   }

#define REMOVE_FROMSURVEY(A)                              \
   if (iExistSymb_DB(hDBi, A, DB_SYMB_CHAN)) \
   {                                              \
      Chan = FindSymb_DB(hDBi, A, DB_SYMB_CHAN);  \
      LOCK_RW(hDBi, Chan);                        \
      DeleteSymb_DB(hDBi, Chan);                  \
   }

{
   // --- get database and channel names ---

   hWorkREG = Create_REG(256);
   GetWorkspaceREG_SYS(hWorkREG);

   GetString_SYS("GRAPPEND", "MASTER", sMaster);
   if (iStrlen_STR(sMaster) == 0)
   {
      Get_REG(hWorkREG, "GRAVRED.MASTER_DATABASE", sMaster, sizeof(sMaster));
      if (iStrlen_STR(sMaster))
         SetString_SYS("GRAPPEND", "MASTER", sMaster);
   }

   GetString_SYS("GRAPPEND", "SURVEY", sSurvey);
   if (iStrlen_STR(sSurvey) == 0)
   {
      Get_REG(hWorkREG, "GRAVRED.SURVEY_DATABASE", sSurvey, sizeof(sSurvey));
      if (iStrlen_STR(sSurvey))
         SetString_SYS("GRAPPEND", "SURVEY", sSurvey);
   }


   // --- get current database REG and name ---

   hDataREG = Create_REG(256);
   if (iHaveCurrent_EDB())
   {
      eDBi = Current_EDB();
      hDBi = Lock_EDB(eDBi);
      hDataREG = Create_REG(256);
      GetRegSymb_DB(hDBi, NULLSYMB, hDataREG);


      // --- if a survey database, set the name ---

      Get_REG(hDataREG, "GRAVRED.TYPE", sType, sizeof(sType));
      if (iCharComp_STR(sType, "S"))
         GetName_DB(hDBi, DB_NAME_FILE, sSurvey);

      UnLock_EDB(eDBi);
   }


   if (iInteractive_SYS())
   {
      hDGW = Create_DGW("GRAPPEND");


      // --- Create the Dialogue ---

      SetInfoSYS_DGW(hDGW, _GRAPPEND_0, DGW_FILEPATH, "GRAPPEND", "SURVEY");
      SetInfoSYS_DGW(hDGW, _GRAPPEND_1, DGW_FILEPATH, "GRAPPEND", "MASTER");

      i = 0;
      iNew = FALSE;
      while (i == 0)
      {
         // --- Run the Dialogue ---

         if (iRunDialogue_DGW(hDGW) != 0) Cancel_SYS();


         // --- Get the Strings ---

         GetInfoSYS_DGW(hDGW, _GRAPPEND_0, DGW_FILEPATH, "GRAPPEND", "SURVEY");
         GetInfoSYS_DGW(hDGW, _GRAPPEND_1, DGW_FILEPATH, "GRAPPEND", "MASTER");

         GetString_SYS("GRAPPEND", "MASTER", sMaster);
         GetString_SYS("GRAPPEND", "SURVEY", sSurvey);

         if (!iFileExist_SYS(sMaster))
         {
            i = iDisplayQuestion_SYS(sMaster, _("Master database does not exist.  Create new?"));
            if (i) iNew = TRUE;
         }
         else
         {
            // --- Get selected line list from survey db ---
            eDBi = Load_EDB(sSurvey);
            hDBi = Lock_EDB(eDBi);
            hLineSymbolLSTIn = CreateSymbLST_DB();
            SelectedLineLST_DB(hDBi, hLineSymbolLSTIn);
            inLineCount = iSize_LST(hLineSymbolLSTIn);
            UnLock_EDB(eDBi);
            
            // --- Get selected line list from master db ---
            eDBo = Load_EDB(sMaster);
            hDBo = Lock_EDB(eDBo);
            hLineSymbolLSTOut = CreateSymbLST_DB();
            SelectedLineLST_DB(hDBo, hLineSymbolLSTOut);
            outLineCount = iSize_LST(hLineSymbolLSTOut);
            UnLock_EDB(eDBo);

            // --- Check if there is any same line in both dbs ---
            sameLineCount = 0;
            maxSameLineCount = 10;
            Strcpy_STR(sSameLineNames, "");
            for (k = 0; k < inLineCount; k++)
            {
               GetItem_LST(hLineSymbolLSTIn, 0, k, sLineNameIn);
               for (j = 0; j < outLineCount; j++)
               {
                  GetItem_LST(hLineSymbolLSTOut, 0, j, sLineNameOut);
                  if (iStrcmp_STR(sLineNameIn, sLineNameOut, STR_CASE_TOLERANT) == 0)
                  {
                     sameLineCount++;
                     Strcat_STR(sSameLineNames, "\r\n");
                     if (sameLineCount >= maxSameLineCount)
                     {
                        Strcat_STR(sSameLineNames, _("and more ..."));
                        break;
                     }
                     else
                     {
                        Strcat_STR(sSameLineNames, sLineNameOut);
                     }
                  }
               }
               if (sameLineCount >= maxSameLineCount)
                  break;
            }

            if (sameLineCount > 0)
            {
               if (sameLineCount > 1)
                  Printf_STR(sMsg, sizeof(sMsg), _("Groups/lines %s \r\nalready exist.  Append?"), sSameLineNames);
               else
                  Printf_STR(sMsg, sizeof(sMsg), _("Group/line %s \r\nalready exists.  Append?"), sSameLineNames);

               i = iDisplayQuestion_SYS(sMaster, sMsg);
            }
            else
            {
               i = 1;
            }
         }
      }

      Destroy_DGW(hDGW);
   }

   // --- Check for null input and output strings ---

   GetString_SYS("GRAPPEND", "MASTER", sMaster);
   GetString_SYS("GRAPPEND", "SURVEY", sSurvey);

   if (!iStrlen_STR(sMaster))
      Abort_SYS(_("Master database Not Specified!"));
   if (!iStrlen_STR(sSurvey))
      Abort_SYS(_("Survey database Not Specified!"));


   // --- set the master workspoace in the workspace REG ---

   Set_REG(hWorkREG, "GRAVRED.MASTER_DATABASE", sMaster);
   Set_REG(hWorkREG, "GRAVRED.SURVEY_DATABASE", sSurvey);


   // --- new master database? ---

   if (iNew || (iInteractive_SYS() == 0 && !iFileExist_SYS(sMaster)))
   {
      // --- create new database ---

      iDeleteFile_SYS(sMaster);
      Create_DB(sMaster, 100, 200, 250, 10, 100, "SUPER", "");
   }

   eDBo = Load_EDB(sMaster);


   // --- get VV's ---

   hTypeVV = Create_VV(INT, 0);
   hStnVV = Create_VV(-24, 0);
   hSrcVV = Create_VV(-32, 0);


   iDisplayReportFile = 0;

   // --- Load the databases ---

   iFiles = iCountTokens_STR(sSurvey,"|");
   for(iFile=0; iFile<iFiles; iFile++)
   {
      hDBo = Lock_EDB(eDBo);
   
      GetMFile_STR(sSurvey,sCurrentSurveyFile,iFile);
      iSurveyLoaded = iLoaded_EDB(sCurrentSurveyFile);

      eDBi = Load_EDB(sCurrentSurveyFile);
      hDBi = Lock_EDB(eDBi);


      // --- Ask the user for the Station, Longitude and Latitude channels if they are not currently present ---

      iAlternateChannels = !iExistChan_DB(hDBi, _n("Station"))
                           || !iExistChan_DB(hDBi, _n("Longitude"))
                           || !iExistChan_DB(hDBi, _n("Latitude"));

      if (iAlternateChannels)
      {
         if (!iStrlen_STR(sStation) || !iExistChan_DB(hDBi, sStation) ||
             !iStrlen_STR(sLongitude) || !iExistChan_DB(hDBi, sLongitude) ||
             !iStrlen_STR(sLatitude) || !iExistChan_DB(hDBi, sLatitude) )
         {
            if (iInteractive_SYS())
            {
               // --- Create the Channels Dialogue ---

               hDGW = Create_DGW("GRAPPEND2");

               // --- Set up lists ---

               hChanLST = Create_LST(80);
               ChanLST_DB(hDBi, hChanLST);

               List = GetList_DGW(hDGW,_GRAPPEND2_0);
               Copy_LST(List,hChanLST);
               List = GetList_DGW(hDGW,_GRAPPEND2_1);
               Copy_LST(List,hChanLST);
               List = GetList_DGW(hDGW,_GRAPPEND2_2);
               Copy_LST(List,hChanLST);

               // --- Set any Defaults ---

               SetInfoSYS_DGW(hDGW,_GRAPPEND2_0,DGW_TEXT,"GRAPPEND","STATION");
               SetInfoSYS_DGW(hDGW,_GRAPPEND2_1,DGW_TEXT,"GRAPPEND","LONGITUDE");
               SetInfoSYS_DGW(hDGW,_GRAPPEND2_2,DGW_TEXT,"GRAPPEND","LATITUDE");


               // --- Run the Dialogue ---
               if (iRunDialogue_DGW(hDGW) != 0) Cancel_SYS();

               GetInfoSYS_DGW(hDGW,_GRAPPEND2_0,DGW_TEXT,"GRAPPEND","STATION");
               GetInfoSYS_DGW(hDGW,_GRAPPEND2_1,DGW_TEXT,"GRAPPEND","LONGITUDE");
               GetInfoSYS_DGW(hDGW,_GRAPPEND2_2,DGW_TEXT,"GRAPPEND","LATITUDE");
            }

            // --- Get values and apply the hard-wired defaults ---

            GetString_SYS("GRAPPEND","STATION", sStation);
            GetString_SYS("GRAPPEND","LONGITUDE", sLongitude);
            GetString_SYS("GRAPPEND","LATITUDE", sLatitude);
         }
      }
      else
      {
         Strcpy_STR(sStation, _n("Station"));
         Strcpy_STR(sLongitude, _n("Longitude"));
         Strcpy_STR(sLatitude, _n("Latitude"));
      }

      if (!iStrlen_STR(sStation))
         Strcpy_STR(sStation, _n("Station"));
      if (!iStrlen_STR(sLongitude))
         Strcpy_STR(sLongitude, _n("Longitude"));
      if (!iStrlen_STR(sLatitude))
         Strcpy_STR(sLatitude, _n("Latitude"));


      // --- Need to do some fancy renaming and copying if importing non-standard channel names to hard-wired channels in the master database ---

      iAlternateChannels = iStrcmp_STR(sStation, _n("Station"), STR_CASE_TOLERANT) ||
                           iStrcmp_STR(sLongitude, _n("Longitude"), STR_CASE_TOLERANT) ||
                           iStrcmp_STR(sLatitude, _n("Latitude"), STR_CASE_TOLERANT);

      hCopyLST = CreateSymbLST_DB();
      hRenameLST = CreateSymbLST_DB();

      if (iAlternateChannels)
      {
         Strcpy_STR(sReportFile, _n("Append.log"));
         hWA = Create_WA(sReportFile, WA_NEW);
         if (iStrcmp_STR(sStation, _n("Station"), STR_CASE_TOLERANT))
         {
            AddItem_LST(hCopyLST, sStation, _n("Station"));
            Printf_STR(sMsg, sizeof(sMsg),
                       _("Channel \"%s\" has been appended to channels \"%s\" and \"Station\"."),
                       sStation, sStation);
            Puts_WA(hWA, sMsg);
            NewLine_WA(hWA);

            if (iExistChan_DB(hDBi, _n("Station")))
            {
               Strcpy_STR(sFrom, _n("Station"));
               Strcpy_STR(sTo, "_");
               Strcat_STR(sTo, sFrom);
               while(iExistChan_DB(hDBi, sTo))
               {
                  Strcpy_STR(sChan, sTo);
                  Strcpy_STR(sTo, "_");
                  Strcat_STR(sTo, sChan);
               }
               AddItem_LST(hRenameLST, sFrom, sTo);
               Printf_STR(sMsg, sizeof(sMsg), _("Channel \"%s\" has been appended as channel \"%s\"."),
                          sFrom, sTo);
               Puts_WA(hWA, sMsg);
               NewLine_WA(hWA);
            }
         }

         if (iStrcmp_STR(sLongitude, _n("Longitude"), STR_CASE_TOLERANT))
         {
            AddItem_LST(hCopyLST, sLongitude, _n("Longitude"));
            Printf_STR(sMsg, sizeof(sMsg),
                       _("Channel \"%s\" has been appended to channels \"%s\" and \"Longitude\"."),
                       sLongitude, sLongitude);
            Puts_WA(hWA, sMsg);
            NewLine_WA(hWA);

            if (iExistChan_DB(hDBi, _n("Longitude")))
            {
               Strcpy_STR(sFrom, _n("Longitude"));
               Strcpy_STR(sTo, "_");
               Strcat_STR(sTo, sFrom);
               while(iExistChan_DB(hDBi, sTo))
               {
                  Strcpy_STR(sChan, sTo);
                  Strcpy_STR(sTo, "_");
                  Strcat_STR(sTo, sChan);
               }
               AddItem_LST(hRenameLST, sFrom, sTo);
               Printf_STR(sMsg, sizeof(sMsg), _("Channel \"%s\" has been appended as channel \"%s\"."),
                          sFrom, sTo);
               Puts_WA(hWA, sMsg);
               NewLine_WA(hWA);
            }
         }

         if (iStrcmp_STR(sLatitude, _n("Latitude"), STR_CASE_TOLERANT))
         {
            AddItem_LST(hCopyLST, sLatitude, _n("Latitude"));
            Printf_STR(sMsg, sizeof(sMsg),
                       _("Channel \"%s\" has been appended to channels \"%s\" and \"Latitude\"."),
                       sLatitude, sLatitude);
            Puts_WA(hWA, sMsg);
            NewLine_WA(hWA);

            if (iExistChan_DB(hDBi, _n("Latitude")))
            {
               Strcpy_STR(sFrom, _n("Latitude"));
               Strcpy_STR(sTo, "_");
               Strcat_STR(sTo, sFrom);
               while(iExistChan_DB(hDBi, sTo))
               {
                  Strcpy_STR(sChan, sTo);
                  Strcpy_STR(sTo, "_");
                  Strcat_STR(sTo, sChan);
               }
               AddItem_LST(hRenameLST, sFrom, sTo);
               Printf_STR(sMsg, sizeof(sMsg), _("Channel \"%s\" has been appended as channel \"%s\"."),
                          sFrom, sTo);
               Puts_WA(hWA, sMsg);
               NewLine_WA(hWA);
            }
         }
      }

      SetWorkspaceREG_SYS(hWorkREG);


      // --- Rename existing hard-wired channel names that are NOT to be imported as-is ---

      n = iSize_LST(hRenameLST);
      if (n > 0)
      {
         for(i=0; i<n; i++)
         {
            GetItem_LST(hRenameLST, LST_ITEM_NAME, i, sFrom);
            GetItem_LST(hRenameLST, LST_ITEM_VALUE, i, sTo);

            Chan = FindChan_DB(hDBi, sFrom);
            LOCK_RW(hDBi, Chan);
            SetChanName_DB(hDBi, Chan, sTo);
            UNLOCK(hDBi, Chan);
         }
      }

      // --- Copy alternate Station, Longitude and Latitude channels to hard-wired versions before appending ---

      n = iSize_LST(hCopyLST);
      if (n > 0)
      {
         UnLock_EDB(eDBi);
         MakeCurrent_EDB(eDBi);

         iInteractive = iInteractive_SYS();
         SetInteractive_SYS(0);
         for(i = 0; i<n; i++)
         {
            GetItem_LST(hCopyLST, LST_ITEM_NAME, i, sFrom);
            GetItem_LST(hCopyLST, LST_ITEM_VALUE, i, sTo);
            SetString_SYS("COPY", "FROM", sFrom);
            SetString_SYS("COPY", "TO", sTo);
            SetString_SYS("COPY", "DECIMATE", "1");
            SetString_SYS("COPY", "FIDSTART", "");
            SetString_SYS("COPY", "FIDINCR", "");

            iRunGX_SYS("copy.gx");
         }
         SetInteractive_SYS(iInteractive);

         hDBi = Lock_EDB(eDBi);
      }


      // --- check existing channels ---

      iGscale = !iExistSymb_DB(hDBo, _n("_Gscale"), DB_SYMB_CHAN);
      iClosure = !iExistSymb_DB(hDBo, _n("Closure"), DB_SYMB_CHAN);
      iType = !iExistSymb_DB(hDBo, _n("Type"), DB_SYMB_CHAN);


      // --- duplicate target channels ---

      DupChans_DU(hDBi, hDBo);


      // --- remove unwanted channels ---

      REMOVE(iGscale, _n("_Gscale"))
      REMOVE(iClosure, _n("Closure"))


      // --- get the gravity group, normalize all channels ---

      Group = CreateSymb_DB(hDBo, _n("GravData"), DB_SYMB_LINE, DB_OWN_SHARED, DB_CATEGORY_LINE_GROUP);
      AssociateAll_DB(hDBo, Group);
      StnChan = FindSymb_DB(hDBo, _n("Station"), DB_SYMB_CHAN);


      // --- unprotect all channels ---

      UnLock_EDB(eDBo);
      MakeCurrent_EDB(eDBo);
      iRunGX_SYS("chanpoff");
      hDBo = Lock_EDB(eDBo);


      // --- refid to station channel ---

      LOCK_RW(hDBo, StnChan);
      ReFidAllCh_DU(hDBo, Group, StnChan);
      iLen = iGetChannelLength_DB(hDBo, Group, StnChan);
      UNLOCK(hDBo, StnChan);


      // --- find/create a source file channel ---

      FileNamePart_STR(sSurvey, sSrcNew, STR_FILE_PART_NAME);
      SrcChan = FindSymb_DB(hDBo, "Source", DB_SYMB_CHAN);
      if (SrcChan == NULLSYMB)
      {
         // --- create a source channel ---

         SrcChan = CreateSymb_DB(hDBo, "Source", DB_SYMB_CHAN, DB_OWN_SHARED, -32);
         Associate_DB(hDBo, Group, SrcChan);

         SetLen_VV(hSrcVV, iLen);
         FillString_VV(hSrcVV, _n("unknown"));
      }
      else
      {
         // --- source channel exists, look for survey ---

         LOCK_R(hDBo, SrcChan);
         GetChanVV_DB(hDBo, Group, SrcChan, hSrcVV);
         UNLOCK(hDBo, SrcChan);

         rStart = rGetFidStart_VV(hSrcVV);
         rIncr = rGetFidIncr_VV(hSrcVV);
         iCheck = TRUE && iInteractive_SYS();
         for (i = 0; i < iLen; i++)
         {
            GetString_VV(hSrcVV, i, sSrc);
            TrimSpace_STR(sSrc, STR_TRIMBOTH);
            if (iStrcmp_STR(sSrc, sSrcNew, STR_CASE_TOLERANT) == 0)
            {
               // --- survey already loaded ---

               if (iCheck)
               {
                  if (!iDisplayQuestion_SYS(
                         sSurvey, _("Survey already merged. Do you want to replace previous survey?")))
                  {
                     Exit_SYS();
                  }
                  iCheck = FALSE;
               }


               // --- remove this data ---

               ModFidRange_DU(hDBo, Group, rStart, rIncr, i, 1, DU_MODFID_DELETE);
               if (i + 1 < iLen) Copy2_VV(hSrcVV, i, hSrcVV, i + 1, (iLen - i - 1));
               i--;
               iLen--;
            }
            else if (iStrlen_STR(sSrc) == 0)
                 SetString_VV(hSrcVV, i, _n("unknown"));
         }
      }

      // --- put source back ---

      LOCK_RW(hDBo, SrcChan);
      PutChanVV_DB(hDBo, Group, SrcChan, hSrcVV);
      UNLOCK(hDBo, SrcChan);


      // --- Normalize the output data, append input data, then normalize output again ---

      Append_DU(hDBi, hDBo, TRUE);
      LOCK_RW(hDBo, StnChan);
      ReFidAllCh_DU(hDBo, Group, StnChan);
      UNLOCK(hDBo, StnChan);


      // --- set new source data ---

      LOCK_RW(hDBo, SrcChan);
      GetChanVV_DB(hDBo, Group, SrcChan, hSrcVV);

      FileNamePart_STR(sCurrentSurveyFile, sSurveyFile, STR_FILE_PART_NAME);
      for (i = iLen; i < iLength_VV(hSrcVV); i++)
         SetString_VV(hSrcVV, i, sSurveyFile);
      
      PutChanVV_DB(hDBo, Group, SrcChan, hSrcVV);
      UNLOCK(hDBo, SrcChan);


      // --- remove non-stations ---

      TypeChan = FindSymb_DB(hDBo, "Type", DB_SYMB_CHAN);

      if (TypeChan != NULLSYMB)
      {
         // --- go through all line groups ---
		 
         hLineSymbolLST = CreateSymbLST_DB();
         LineLST_DB(hDBo, hLineSymbolLST);
         n = iSize_LST(hLineSymbolLST);
         for (iNChan = 0; iNChan < n; iNChan++)
         {
            LOCK_RW(hDBo, TypeChan);
            GtSymbItem_LST(hLineSymbolLST, iNChan, sLineName, STR_DB_SYMBOL, LineSymbol);
            GetChanVV_DB(hDBo, LineSymbol, TypeChan, hTypeVV);
            UNLOCK(hDBo, TypeChan);

            rStart = rGetFidStart_VV(hTypeVV);
            rIncr = rGetFidIncr_VV(hTypeVV);
            iLen = iLength_VV(hTypeVV);
            for (i = 0; i < iLen; i++)
            {
               ii = iGetInt_VV(hTypeVV, i);
               if (ii != iDUMMY && ii != 1)
               {
                  // --- not a reading, remove it ---

                  ModFidRange_DU(hDBo, LineSymbol, rStart, rIncr, i, 1, DU_MODFID_DELETE);
                  if (i + 1 < iLen) Copy2_VV(hTypeVV, i, hTypeVV, i + 1, (iLen - i - 1));
                  i--;
                  iLen--;
               }
            }
         }
      }


      // --- sort line/stations ---

      if (iExistSymb_DB(hDBo, "Line", DB_SYMB_CHAN))
      {
         // --- sort by line/station ---

         SetString_SYS("SORTALL2", "CHANNEL1", "Line");
         SetString_SYS("SORTALL2", "ORDER1", "ASCENDING");
         SetString_SYS("SORTALL2", "CHANNEL2", "Station");
         SetString_SYS("SORTALL2", "ORDER2", "ASCENDING");
         SetString_SYS("SORTALL2", "READONLY", "YES");

         UnLock_EDB(eDBo);
		   MakeCurrent_EDB(eDBo);
         if (iRunGX_SYS("sortal2") != 0)
            Abort_SYS(_("Sort failed."));
         hDBo = Lock_EDB(eDBo);
      }
      else
      {
         // --- sort by  station ---

         SetString_SYS("SORTALL", "CHANNEL", "Station");
         SetString_SYS("SORTALL", "ORDER", "ASCENDING");
         SetString_SYS("SORTALL", "READONLY", "YES");

         UnLock_EDB(eDBo);
		   MakeCurrent_EDB(eDBo);
         if (iRunGX_SYS("sortal") != 0)
            Abort_SYS(_("Sort failed."));
         hDBo = Lock_EDB(eDBo);
      }


      // --- copy projections if not set ---

      hIPJ = Create_IPJ();
      Ch = GetXYZChanSymb_DB(hDBi, DB_CHAN_X);
      if (Ch != NULLSYMB)
      {
         ChX = GetXYZChanSymb_DB(hDBo, DB_CHAN_X);
         if (ChX != NULLSYMB)
         {
            GetIPJ_DB(hDBo, ChX, hIPJ);
            if (iSourceType_IPJ(hIPJ) == IPJ_TYPE_NONE)
            {
               ChY = GetXYZChanSymb_DB(hDBo, DB_CHAN_Y);
               if (ChY != NULLSYMB)
               {
                  GetIPJ_DB(hDBi, Ch, hIPJ);
                  SetIPJ_DB(hDBo, ChX, ChY, hIPJ);
               }
            }
         }
      }
      Ch = FindSymb_DB(hDBi, "Longitude", DB_SYMB_CHAN);
      if (Ch != NULLSYMB)
      {
         ChX = FindSymb_DB(hDBo, "Longitude", DB_SYMB_CHAN);
         if (ChX != NULLSYMB)
         {
            GetIPJ_DB(hDBo, ChX, hIPJ);
            if (iSourceType_IPJ(hIPJ) == IPJ_TYPE_NONE)
            {
               ChY = FindSymb_DB(hDBo, "Latitude", DB_SYMB_CHAN);
               if (ChY != NULLSYMB)
               {
                  GetIPJ_DB(hDBi, Ch, hIPJ);
                  SetIPJ_DB(hDBo, ChX, ChY, hIPJ);
               }
            }
         }
      }
      Destroy_IPJ(hIPJ);


	   // --- Remove any temp copied channels from the input survey database ---

	   n = iSize_LST(hCopyLST);
	   for(i = 0; i<n; i++)
	   {
         GetItem_LST(hCopyLST, LST_ITEM_VALUE, i, sTo);
		   REMOVE_FROMSURVEY(sTo)
       }

	   // --- Rename back any channels renamed above ---

	   n = iSize_LST(hRenameLST);
	   if (n > 0)
	   {
         for(i=0; i<n; i++)
		   {
            GetItem_LST(hRenameLST, LST_ITEM_NAME, i, sFrom);
			   GetItem_LST(hRenameLST, LST_ITEM_VALUE, i, sTo);

			   Chan = FindChan_DB(hDBi, sTo);
			   LOCK_RW(hDBi, Chan);
			   SetChanName_DB(hDBi, Chan, sFrom);
			   UNLOCK(hDBi, Chan);
		   }
	   }

	   // --- remove empty line/group(s) ---
	   hLineSymbolLST = CreateSymbLST_DB();
	   LineLST_DB(hDBo, hLineSymbolLST);
	   n = iSize_LST(hLineSymbolLST);
	   for (i = 0; i < n; i++)
	   {
		  GtSymbItem_LST(hLineSymbolLST, i, sLineName, STR_DB_SYMBOL, LineSymbol);
		  iLineEmpty = iIsLineEmpty_DB(hDBo, LineSymbol);
		  if (iLineEmpty)
		  {
			 LockSymb_DB(hDBo, LineSymbol, DB_LOCK_READWRITE, DB_WAIT_INFINITY); 
	         DeleteSymb_DB(hDBo, LineSymbol);
		  }
	   }

       // --- display all ---

       UnLock_EDB(eDBi);
       UnLock_EDB(eDBo);
   
       iNChan = 1;
       if (!iScript_SYS())
       {
          hLST = Create_LST(64);
          iNChan = iDispChanLST_EDB(eDBo, hLST);
       }

       if (iNew || iNChan == 0)
         LoadAllChans_EDB(eDBo);

	   if (iSurveyLoaded == 0)
		   UnLoad_EDB(sSurvey);


       // --- Report to display? ---

       if (iSize_LST(hCopyLST) > 0)
       {
          Destroy_WA(hWA);
          iDisplayReportFile += 1;
       }
   }

   Destroy_SYS(hTypeVV);
   Destroy_SYS(hStnVV);
   Destroy_SYS(hSrcVV);

   MakeCurrent_EDB(eDBo);


   // --- Report to display? ---

   if (iDisplayReportFile && iInteractive_SYS())
   {
      SetString_SYS("EDIT","FILE",sReportFile);
      SetString_SYS("EDIT","CHILD","Yes");
      iRunGX_SYS("edit");
   }
}
