//===========================================================================

// clang-format off
NAME          = "Line path line plot"
#include <version.gxh>

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/Surface Mapping/Survey Lines"

DESCRIPTION   = "

        PATH.LINE_THICKNESS      line thickness
            .LINE_COLOR          line color
            .LINE_TYPE           line type
            .TICKFLAG            draw ticks? 0 no (default), 1 yes
            .LABEL_FORMAT        label format (see help)
            .LABEL_LOCATION      label location (see help)
            .LABEL_COMPASS       add compass direction (see help)
            .LABEL_SIZE          label size in mm.
            .LABEL_COLOR         label color
            .LABEL_WEIGHT        label weight
            .H_OFFSET            horizontal label offset
            .V_OFFSET            vertical label offset
            .GAP                 maximum gap before breaking line
            .TICK_SIZE           tick size (mm)
            .TICK_STATION        tick reference channel
            .TICK_MOD            minor tick interval
            .TICK_MTMOD          major tick interval
            .TICK_MTSIZE         major tick size (mm)
"
// Revision History:
// v9.0:   Ask user whether to overwrite existing group.
//         Added line type option.
//         Turn on mask to view.
// v6.3.0: Added TickEx_MVU to make use of the gap variable.
// v5.1.3: Using "Current" X and Y channels

//===========================================================================

RESOURCE = "path.gr"
#include "path.grh"

//===========================================================================

#include <all.gxh>
   // clang-format on


   //===========================================================================
   //                             VARIABLES
   //===========================================================================

   string(STR_DB_SYMBOL) sLine,
   sLine1, sStation;
string(8) sFormat;
string(2) sChar;
string(STR_DEFAULT_SHORT) sLabelColor, sLineColor, sFont;
string(STR_DEFAULT_LONG) sMsg;
string(STR_GROUP) sGrpName, sPresetGrpName;
string(STR_FILE) sFile, sLabel;

EDB EData;
DB Data;
DB_SYMB XCh, YCh, SCh;  // Channel handles
DB_SYMB Line;           // Line handle
EMAP EMap;
MAP Map;
MVIEW View;
DGW Diag;
REG MapReg;
LPT Lpt;
VV VVx, VVy, VVs;
IPJ DataIPJ;
LST List;
int i, iLines, iTotLines, iGrpMode, iGrpClipMode;
int iFormat, iLoc, iUp, iTick;
int iLen, iStation, iLabelDir, iLabelCompass;
int iLabelWeight, iLineType;
real rScale, rSize, rMod, rMtMod, rMtSize;
real rHoff, rVoff, rGap;
real rVangle, rThickness, rLabelSize, rThinRes;


//===========================================================================
//                           MAP CODE
//===========================================================================

{
   // --- Ensure we have a base map and that we are not working with grid documents ---

   if (iRunGX_SYS("sclmap") != 0)
      Cancel_SYS();

   
   // --- Allow for some script-mode settings ---
   
   iGrpMode = MVIEW_GROUP_NEW;
   iGrpClipMode = CLIP_ON;
   Strcpy_STR(sPresetGrpName, "");
   if (iInteractive_SYS() == 0)
   {
      iGrpMode = iGetInt_SYS("PATH", "GROUP_MODE");
      if (iGrpMode != MVIEW_GROUP_APPEND)
         iGrpMode = MVIEW_GROUP_NEW;

      iGrpClipMode = iGetInt_SYS("PATH", "GROUP_CLIP_MODE");
      if (iGrpClipMode != CLIP_OFF)
         iGrpClipMode = CLIP_ON;

      GetString_SYS("PATH", "GROUP_NAME", sPresetGrpName);
   }


   // --- get current map and database ---

   EData = CurrentNoActivate_EDB();
   Data = Lock_EDB(EData);
   EMap = CurrentNoActivate_EMAP();  // --- just to make sure we have one ---


   // --- Set defaults ---

   DefaultString_SYS("PATH", "LINE_COLOR", "K");
   DefaultInt_SYS("PATH", "LINE_TYPE", 0);
   DefaultReal_SYS("PATH", "LINE_THICKNESS", 0.15);
   DefaultInt_SYS("PATH", "TICKFLAG", 0);
   DefaultString_SYS("PATH", "LABEL_FORMAT", "TL");
   DefaultInt_SYS("PATH", "LABEL_DIR", 0);
   DefaultInt_SYS("PATH", "LABEL_COMPASS", 0);
   DefaultInt_SYS("PATH", "LABEL_LOCATION", 1);
   DefaultReal_SYS("PATH", "LABEL_SIZE", 2.5);
   DefaultString_SYS("PATH", "LABEL_COLOR", "K");
   DefaultInt_SYS("PATH", "LABEL_WEIGHT", 0);
   DefaultReal_SYS("PATH", "H_OFFSET", 2.0);
   DefaultReal_SYS("PATH", "V_OFFSET", 0.0);
   DefaultReal_SYS("PATH", "GAP", 0.0);


   // --- Are we running interactively ? ---

   if (iInteractive_SYS())
   {
      // --- Create the Dialogue ---

      Diag = Create_DGW("path");


      // --- Line types ---

      Lpt = Create_LPT();
      List = GetList_DGW(Diag, _PATH_2);
      GetStandardLST_LPT(Lpt, List);
      AddItem_LST(List, _("Double line"), _n("101"));
      AddItem_LST(List, _("Equals"), _n("102"));


      // --- Set up the Font Weight LST ---

      List = GetList_DGW(Diag, _PATH_10);
      FontWeightLST_MVIEW(List);


      // --- Set any Defaults from INI ---

      SetInfoSYS_DGW(Diag, _PATH_0, DGW_TEXT, "PATH", "LINE_THICKNESS");
      SetInfoSYS_DGW(Diag, _PATH_1, DGW_TEXT, "PATH", "LINE_COLOR");
      SetInfoSYS_DGW(Diag, _PATH_2, DGW_LISTALIAS, "PATH", "LINE_TYPE");
      SetInfoSYS_DGW(Diag, _PATH_3, DGW_LISTALIAS, "PATH", "TICKFLAG");
      SetInfoSYS_DGW(Diag, _PATH_4, DGW_LISTALIAS, "PATH", "LABEL_FORMAT");
      SetInfoSYS_DGW(Diag, _PATH_5, DGW_LISTALIAS, "PATH", "LABEL_DIR");
      SetInfoSYS_DGW(Diag, _PATH_6, DGW_LISTALIAS, "PATH", "LABEL_COMPASS");
      SetInfoSYS_DGW(Diag, _PATH_7, DGW_LISTALIAS, "PATH", "LABEL_LOCATION");
      SetInfoSYS_DGW(Diag, _PATH_8, DGW_TEXT, "PATH", "LABEL_SIZE");
      SetInfoSYS_DGW(Diag, _PATH_9, DGW_TEXT, "PATH", "LABEL_COLOR");
      SetInfoSYS_DGW(Diag, _PATH_10, DGW_LISTALIAS, "PATH", "LABEL_WEIGHT");
      SetInfoSYS_DGW(Diag, _PATH_11, DGW_TEXT, "PATH", "H_OFFSET");
      SetInfoSYS_DGW(Diag, _PATH_12, DGW_TEXT, "PATH", "V_OFFSET");
      SetInfoSYS_DGW(Diag, _PATH_13, DGW_TEXT, "PATH", "GAP");
      SetInfoSYS_DGW(Diag, _PATH_14, DGW_TEXT, "PATH", "THINRES");


      // --- Run the Dialogue ---

      i = iRunDialogue_DGW(Diag);
      if (i == 1)
         Cancel_SYS();  // He hit cancel


      // --- Put values back in INI ---

      GetInfoSYS_DGW(Diag, _PATH_0, DGW_TEXT, "PATH", "LINE_THICKNESS");
      GetInfoSYS_DGW(Diag, _PATH_1, DGW_TEXT, "PATH", "LINE_COLOR");
      GetInfoSYS_DGW(Diag, _PATH_2, DGW_LISTALIAS, "PATH", "LINE_TYPE");
      GetInfoSYS_DGW(Diag, _PATH_3, DGW_LISTALIAS, "PATH", "TICKFLAG");
      GetInfoSYS_DGW(Diag, _PATH_4, DGW_LISTALIAS, "PATH", "LABEL_FORMAT");
      GetInfoSYS_DGW(Diag, _PATH_5, DGW_LISTALIAS, "PATH", "LABEL_DIR");
      GetInfoSYS_DGW(Diag, _PATH_6, DGW_LISTALIAS, "PATH", "LABEL_COMPASS");
      GetInfoSYS_DGW(Diag, _PATH_7, DGW_LISTALIAS, "PATH", "LABEL_LOCATION");
      GetInfoSYS_DGW(Diag, _PATH_8, DGW_TEXT, "PATH", "LABEL_SIZE");
      GetInfoSYS_DGW(Diag, _PATH_9, DGW_TEXT, "PATH", "LABEL_COLOR");
      GetInfoSYS_DGW(Diag, _PATH_10, DGW_LISTALIAS, "PATH", "LABEL_WEIGHT");
      GetInfoSYS_DGW(Diag, _PATH_11, DGW_TEXT, "PATH", "H_OFFSET");
      GetInfoSYS_DGW(Diag, _PATH_12, DGW_TEXT, "PATH", "V_OFFSET");
      GetInfoSYS_DGW(Diag, _PATH_13, DGW_TEXT, "PATH", "GAP");
      GetInfoSYS_DGW(Diag, _PATH_14, DGW_TEXT, "PATH", "THINRES");

      Destroy_DGW(Diag);
   }


   // --- tick ---

   if (iGetInt_SYS("PATH", "TICKFLAG") == 1)
   {
      iTick = TRUE;

      if (iInteractive_SYS())
      {
         // --- Create the Dialogue ---

         Diag = Create_DGW("TICK");


         // --- Set up lists ---

         List = GetList_DGW(Diag, _TICK_0);
         SymbLST_DB(Data, List, DB_SYMB_CHAN);
         Sort_LST(List, 0, 0);


         // --- Set any Defaults from INI ---

         SetInfoSYS_DGW(Diag, _TICK_0, DGW_TEXT, "PATH", "TICK_STATION");
         SetInfoSYS_DGW(Diag, _TICK_1, DGW_TEXT, "PATH", "TICK_MOD");
         SetInfoSYS_DGW(Diag, _TICK_2, DGW_TEXT, "PATH", "TICK_MTMOD");
         SetInfoSYS_DGW(Diag, _TICK_3, DGW_TEXT, "PATH", "TICK_SIZE");
         SetInfoSYS_DGW(Diag, _TICK_4, DGW_TEXT, "PATH", "TICK_MTSIZE");

         // --- Run the Dialogue ---

         if (iRunDialogue_DGW(Diag) != 0)
            Cancel_SYS();

         // --- Put values back in INI ---

         GetInfoSYS_DGW(Diag, _TICK_0, DGW_TEXT, "PATH", "TICK_STATION");
         GetInfoSYS_DGW(Diag, _TICK_1, DGW_TEXT, "PATH", "TICK_MOD");
         GetInfoSYS_DGW(Diag, _TICK_2, DGW_TEXT, "PATH", "TICK_MTMOD");
         GetInfoSYS_DGW(Diag, _TICK_3, DGW_TEXT, "PATH", "TICK_SIZE");
         GetInfoSYS_DGW(Diag, _TICK_4, DGW_TEXT, "PATH", "TICK_MTSIZE");

         Destroy_DGW(Diag);
      }
   }
   else
      iTick = FALSE;


   // --- get database and map ---

   Map = Lock_EMAP(EMap);
   MapReg = GetREG_MAP(Map);


   // --- Get parameters ---

   rThickness = rGetReal_SYS("PATH", "LINE_THICKNESS");
   GetString_SYS("PATH", "LINE_COLOR", sLineColor);
   iLineType = iGetInt_SYS("PATH", "LINE_TYPE");
   if (iLineType == iDUMMY) iLineType = 0;
   GetString_SYS("PATH", "LABEL_FORMAT", sFormat);
   iLabelDir = iGetInt_SYS("PATH", "LABEL_DIR");
   iLabelCompass = iGetInt_SYS("PATH", "LABEL_COMPASS");
   iLoc = iGetInt_SYS("PATH", "LABEL_LOCATION");
   rLabelSize = rGetReal_SYS("PATH", "LABEL_SIZE");
   GetString_SYS("PATH", "LABEL_COLOR", sLabelColor);
   iLabelWeight = iGetInt_SYS("PATH", "LABEL_WEIGHT");
   rHoff = rGetReal_SYS("PATH", "H_OFFSET");
   rVoff = rGetReal_SYS("PATH", "V_OFFSET");
   rGap = rGetReal_SYS("PATH", "GAP");
   rThinRes = rGetReal_SYS("PATH", "THINRES");
   if (rThinRes == rDUMMY) rThinRes = 0.02;


   // --- Set TICK defaults ---


   if (iTick)
   {
      if (iExistString_SYS("PATH", "TICK_STATION"))
      {
         GetString_SYS("PATH", "TICK_STATION", sStation);
         iStation = 1;
      }
      else
         iStation = 0;

      if (iExistReal_SYS("PATH", "TICK_MOD"))
         rMod = rGetReal_SYS("PATH", "TICK_MOD");
      else
         rMod = 0.0;

      if (iExistReal_SYS("PATH", "TICK_MTMOD"))
         rMtMod = rGetReal_SYS("PATH", "TICK_MTMOD");
      else
         rMtMod = 0.0;

      if (iExistReal_SYS("PATH", "TICK_SIZE"))
         rSize = rGetReal_SYS("PATH", "TICK_SIZE");
      else
         rSize = 1.0;

      if (iExistReal_SYS("PATH", "TICK_MTSIZE"))
         rMtSize = rGetReal_SYS("PATH", "TICK_MTSIZE");
      else
         rMtSize = 1.5 * rSize;
   }
   else
      iStation = 0;


   // --- vertical line info ---

   Get_REG(MapReg, "MAP.UP_DIRECTION", sLabel, sizeof(sLabel));
   if (iStrcmp_STR(_n("left"), sLabel, STR_CASE_TOLERANT) == 0)
      iUp = -1;
   else
      iUp = 1;

   rVangle = rDUMMY;
   GetReal_REG(MapReg, "MAP.UP_ANGLE", rVangle);
   if (rVangle == rDUMMY)
      rVangle = 67.5;


   // --- construct format option ---

   iLen = iStrlen_STR(sFormat);
   iFormat = 0;
   for (i = 0; i < iLen; i++)
   {
      Substr_STR(sChar, sFormat, i, 1);
      if (iCharComp_STR(sChar, "T"))
         iFormat += DB_LINE_LABEL_FORMAT_TYPE;
      else if (iCharComp_STR(sChar, "L"))
         iFormat += DB_LINE_LABEL_FORMAT_LINE;
      else if (iCharComp_STR(sChar, "V"))
         iFormat += DB_LINE_LABEL_FORMAT_VERSION;
      else if (iCharComp_STR(sChar, "F"))
         iFormat += DB_LINE_LABEL_FORMAT_FLIGHT;
   }

   // --- Handle Dir and Compass ---

   if (iLabelDir) iLoc += MVU_FLIGHT_DIRECTION;

   // --- Do the reference channels exist ? ---

   XCh = GetXYZChanSymb_DB(Data, DB_CHAN_X);
   if (XCh == NULLSYMB)
      Abort_SYS(_("The current X channel does not exist."));

   YCh = GetXYZChanSymb_DB(Data, DB_CHAN_Y);
   if (YCh == NULLSYMB)
      Abort_SYS(_("The current Y channel does not exist."));

   if (iStation)
   {
      SCh = FindSymb_DB(Data, sStation, DB_SYMB_CHAN);
      if (SCh == NULLSYMB)
         Abort_SYS(_("Station (ref) channel does not exist."));
   }


   // --- open the data view ---

   View = Create_MVIEW(Map, "*Data", MVIEW_WRITEOLD);

   // --- Handle Projections ---

   DataIPJ = Create_IPJ();
   GetIPJ_DB(Data, XCh, DataIPJ);
   SetWorkingIPJ_MVIEW(View, DataIPJ);


   // --- Turn on the group clipping ---

   GroupClipMode_MVIEW(View, iGrpClipMode);


   // --- create path group ---

   if (iExistString_SYS("PATH", "FORCE_GROUP_NAME"))
   {
      GetString_SYS("PATH", "FORCE_GROUP_NAME", sGrpName);
      SetString_SYS("PATH", "FORCE_GROUP_NAME", "");
   }
   else
   {
      GetName_DB(Data, DB_NAME_FILE, sFile);
      FileNamePart_STR(sFile, sLabel, STR_FILE_PART_NAME);
      GenGroupName_STR("PATH", sLabel, "", sGrpName);
   }
   Strcpy_STR(sLabel, sGrpName);

   if (iInteractive_SYS() == 1)
   {
      if (iExistGroup_MVIEW(View, sGrpName) == 1)
      {
         Printf_STR(sMsg, sizeof(sMsg), _("The line path group %s already exists.\nDo you want to overwrite it?"), sGrpName);
         if (iDisplayQuestion_SYS(_("Line path plot"), sMsg) == 0)
         {
            i = 0;
            do
            {
               i++;
               Printf_STR(sLabel, sizeof(sLabel), _n("%s_%d"), sGrpName, i);
            } while (iExistGroup_MVIEW(View, sLabel) == 1);
         }
      }
   }
   else if (iStrlen_STR(sPresetGrpName) != 0)
      Strcpy_STR(sLabel, sPresetGrpName);

   StartGroup_MVIEW(View, sLabel, iGrpMode);


   // --- set plotting parameters ---

   SetThinRes_MVIEW(View, rThinRes);
   rScale = rScaleMM_MVIEW(View);


   // --- set font characteristics ---

   if (iGlobal_SYS("MONTAJ.DEFAULT_MAP_FONT", sFont) == 1)
      Strcpy_STR(sFont, _n("Arial"));
   TextFont_MVIEW(View, sFont, FALSE, iLabelWeight, FALSE);
   TextColor_MVIEW(View, iColor_MVIEW(sLabelColor));
   TextSize_MVIEW(View, rLabelSize * rScale);


   // --- set line characteristics ---

   LineColor_MVIEW(View, iColor_MVIEW(sLineColor));
   LineThick_MVIEW(View, rThickness * rScale);
   LineStyle_MVIEW(View, iLineType, 10.0 * rScale);


   // --- Create link to database ---

   Link_MVIEW(View, Data, _n("Data Link"));


   // --- get some VV's ---

   VVx = Create_VV(REAL, 0);
   VVy = Create_VV(REAL, 0);
   if (iStation)
      VVs = Create_VV(REAL, 0);


   // --- Lock the channel symbols ---

   LockSymb_DB(Data, XCh, DB_LOCK_READONLY, DB_WAIT_INFINITY);
   LockSymb_DB(Data, YCh, DB_LOCK_READONLY, DB_WAIT_INFINITY);
   if (iStation)
      LockSymb_DB(Data, SCh, DB_LOCK_READONLY, DB_WAIT_INFINITY);


   // --- Draw lines ---

   iLines = 0;
   iTotLines = iCountSelLines_DB(Data);
   Progress_SYS(1);
   Line = FirstSelLine_DB(Data);
   while (iIsLineValid_DB(Data, Line))
   {
      // --- get line label ---

      LockSymb_DB(Data, Line, DB_LOCK_READONLY, DB_WAIT_INFINITY);
      LineLabel_DB(Data, Line, sLine, iFormat);
      UnLockSymb_DB(Data, Line);


      // --- Update the Progress Bar ---

      Strcpy_STR(sLabel, _("Drawing line: "));
      Strcat_STR(sLabel, sLine);
      ProgName_SYS(sLabel, 0);
      ProgUpdateL_SYS(iLines, iTotLines);


      // --- Get X and Y ---

      GetChanVV_DB(Data, Line, XCh, VVx);
      GetChanVV_DB(Data, Line, YCh, VVy);
      if (iStation)
      {
         GetChanVV_DB(Data, Line, SCh, VVs);
         ReFidVV_VV(VVx, VVs);
         ReFidVV_VV(VVy, VVs);
      }
      else
         ReFidVV_VV(VVy, VVx);


      // --- add line link ---

      LineLabel_DB(Data, Line, sLine1, DB_LINE_LABEL_FORMAT_LINK);
      ChangeLineMessage_MVIEW(View, sLine1);


      // --- Draw the line ---

      PathPlotEx_MVU(View, VVx, VVy, sLine, iLoc, iLabelCompass, rVangle, iUp, rHoff * rScale, rVoff * rScale, rGap);


      // --- TICK ---

      if (iTick)
      {
         if (iStation)
            TickEx_MVU(View, VVx, VVy, VVs, rSize * rScale, rMod, rMtSize * rScale, rMtMod, rGap);
         else
            TickEx_MVU(View, VVx, VVy, (VV)-1, rSize * rScale, rMod, rMtSize * rScale, rMtMod, rGap);
      }


      // --- Advance to Next Line ---

      Line = NextSelLine_DB(Data, Line);
      iLines++;
   }

   Progress_SYS(0);

   // --- Unlock the channel symbol ---

   UnLockSymb_DB(Data, XCh);
   UnLockSymb_DB(Data, YCh);
   if (iStation)
      UnLockSymb_DB(Data, SCh);


   // --- Add maker object ---

   EasyMaker_MVIEW(View, _("Line path plot"), "PATH;TICK;");


   // --- done ---

   Destroy_VV(VVx);
   Destroy_VV(VVy);
   Destroy_MVIEW(View);
   Destroy_IPJ(DataIPJ);
   UnLock_EMAP(EMap);
   UnLock_EDB(EData);
}
