//===========================================================================
// clang-format off
NAME          = "Clip to a boundary"
#include <version.gxh>

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/Map Tools"

DESCRIPTION   = "

   Mask a a channel in the database against one or more polygons
   defined in a polygon file.  Data points inside or outside the
   polygons will be dummied in the reference channel.
   
   If a new mask channel is created, then it is initalized to 1
   before the masking operation occurs.

     POLYMASK.INX      -  Input X Channel Name.
             .INY      -  Input Y Channel Name.
             .FILE     -  Input boundary file.
             .MASK     -  Channel to mask.
             .DUMMY    -  \"inside\" - dummy data inside polygons.
                       -  \"outside\" - dummy data outside polygons (default).
				 .GDB      -  If defined, use this database, not the current one,
				              and don't load it if it is not already loaded.
"
// Revision History:
// v6.3.0: Mask channel can be new.
//         Set defaults for X,Y to current X,Y.
// v5.1.3: Using FindChan_DB and iExistChan_DB
//===========================================================================
//                                 RESOURCES
//===========================================================================

RESOURCE = "polymask.gr"
#include   "polymask.grh"

//===========================================================================
//                                 INCLUDES
//===========================================================================

#include <all.gxh>
// clang-format on

//===========================================================================
//                                 VARIABLES
//===========================================================================

string(STR_DB_SYMBOL) sXCh,
sYCh, sMask;                    // Channel Names
string(STR_FILE) sDB;              // Database Name
string(STR_FILE) sTable;           // Table Name
string(STR_DEFAULT_SHORT) sDummy;  // Dummy option

EDB EData;
DB Data;  // database handle

DB_SYMB XCh, YCh, MCh;  // Channel Handles
DB_SYMB Line;           // Line Handle
DGW Diag;               // Dialogue handle
LST List;               // List handle
PLY Polygon;            // Polygon Object
VV VVm;                 // Mask data

int i;
int iDummy;     // Inside/Outside option
int iLines;     // Number of Lines Processed
int iTotLines;  // Total Number of Lines to Process
int iN, iNew, iLoaded;

string(STR_DEFAULT_SHORT) sTemp;  // temporary number formating string
string(STR_DEFAULT) sLabel;

//===========================================================================
//                                 CODE
//===========================================================================

{
   // --- Get database ---

	GetString_SYS("POLYMASK", "GDB", sDB);
	iLoaded = 0;
	if (iStrlen_STR(sDB) > 0)
	{
		SetString_SYS("POLYMASK", "GDB", "");  // force reset each time
		iLoaded = iLoaded_EDB(sDB);
		if (iLoaded)
		{
		   EData = LoadNoActivate_EDB(sDB);
			Data = Lock_EDB(EData);
		}
		else
			Data = Open_DB(sDB, _n("SUPER"), "");
	}
	else
	{
		iLoaded = 1;
	   EData = CurrentNoActivate_EDB();
		Data = Lock_EDB(EData);
	}

   // --- Are we running interactively ? ---

   if (iInteractive_SYS())
   {
      // --- Create the Dialogue ---

      Diag = Create_DGW("POLYMASK");


      // --- Set up lists ---

      List = GetList_DGW(Diag, _POLYMASK_0);
      SymbLST_DB(Data, List, DB_SYMB_CHAN);
      Sort_LST(List, 0, 0);
      List = GetList_DGW(Diag, _POLYMASK_1);
      SymbLST_DB(Data, List, DB_SYMB_CHAN);
      Sort_LST(List, 0, 0);
      List = GetList_DGW(Diag, _POLYMASK_3);
      SymbLST_DB(Data, List, DB_SYMB_CHAN);
      Sort_LST(List, 0, 0);


      //--- If X,Y not defined, set to current X, Y ---

      GetString_SYS("POLYMASK", "INX", sXCh);
      if (!iStrlen_STR(sXCh))
      {
         GetXYZChan_DB(Data, DB_CHAN_X, sXCh);
         SetString_SYS("POLYMASK", "INX", sXCh);
      }

      GetString_SYS("POLYMASK", "INY", sYCh);
      if (!iStrlen_STR(sYCh))
      {
         GetXYZChan_DB(Data, DB_CHAN_Y, sYCh);
         SetString_SYS("POLYMASK", "INY", sYCh);
      }


      // --- Set any Defaults ---

      SetInfoSYS_DGW(Diag, _POLYMASK_0, DGW_TEXT, "POLYMASK", "INX");
      SetInfoSYS_DGW(Diag, _POLYMASK_1, DGW_TEXT, "POLYMASK", "INY");
      SetInfoSYS_DGW(Diag, _POLYMASK_2, DGW_FILEPATH, "POLYMASK", "FILE");
      SetInfoSYS_DGW(Diag, _POLYMASK_3, DGW_TEXT, "POLYMASK", "MASK");
      SetInfoSYS_DGW(Diag, _POLYMASK_4, DGW_LISTALIAS, "POLYMASK", "DUMMY");

      // --- Run the Dialogue ---

      i = iRunDialogue_DGW(Diag);
      if (i != 0) Cancel_SYS();  // He hit cancel


      // --- Get the Strings ---

      GetInfoSYS_DGW(Diag, _POLYMASK_0, DGW_TEXT, "POLYMASK", "INX");
      GetInfoSYS_DGW(Diag, _POLYMASK_1, DGW_TEXT, "POLYMASK", "INY");
      GetInfoSYS_DGW(Diag, _POLYMASK_2, DGW_FILEPATH, "POLYMASK", "FILE");
      GetInfoSYS_DGW(Diag, _POLYMASK_3, DGW_TEXT, "POLYMASK", "MASK");
      GetInfoSYS_DGW(Diag, _POLYMASK_4, DGW_LISTALIAS, "POLYMASK", "DUMMY");

      // --- Destroy the Dialogue ---

      Destroy_DGW(Diag);
   }


   // --- Turn On Progress ---

   Progress_SYS(1);
   ProgName_SYS(_("Mask to polygons"), 1);


   // --- Get Parameters ---

   GetString_SYS("POLYMASK", "INX", sXCh);
   GetString_SYS("POLYMASK", "INY", sYCh);
   GetString_SYS("POLYMASK", "FILE", sTable);
   GetString_SYS("POLYMASK", "MASK", sMask);
   GetString_SYS("POLYMASK", "DUMMY", sDummy);


   // --- Does the Input Channel Exist ? ---

   if (!iExistChan_DB(Data, sXCh))
      Abort_SYS(_("Input X channel does not exist."));
   XCh = FindChan_DB(Data, sXCh);

   if (!iExistChan_DB(Data, sYCh))
      Abort_SYS(_("Input Y channel does not exist."));
   YCh = FindChan_DB(Data, sYCh);

   iNew = 0;
   if (iExistChan_DB(Data, sMask))
   {
      MCh = FindChan_DB(Data, sMask);
      LOCK_RW(Data, MCh);
   }
   else
   {
      iNew = 1;
      MCh = CreateSymb_DB(Data, sMask, DB_SYMB_CHAN, DB_OWN_SHARED, DB_CATEGORY_CHAN_LONG);
      LOCK_RW(Data, MCh);


      // --- Set the mask channel CLASS attribute to "MASK" ---

      SetRegSymbSetting_DB(Data, MCh, "CLASS", "MASK");


      // --- Create VV for initialization ---

      VVm = Create_VV(INT, 0);
   }


   // --- dummy setting ---

   ToUpper_STR(sDummy);
   if (iCharComp_STR(sDummy, "I"))
      iDummy = DU_MASK_INSIDE;
   else
      iDummy = DU_MASK_OUTSIDE;  // default


   // --- Create the Polygon ---

   Polygon = Create_PLY();


   // --- Load the Data ---

   LoadTable_PLY(Polygon, sTable);


   // --- Prepare to do the work ---

   iLines = 0;
   iTotLines = iCountSelLines_DB(Data);


   // --- Lock the Symbols ---

   LOCK_R(Data, XCh);
   LOCK_R(Data, YCh);


   // --- Go through all selected Lines ---

   Line = FirstSelLine_DB(Data);
   while (iIsLineValid_DB(Data, Line))
   {
      // --- Update the Progress Bar ---

      LockSymb_DB(Data, Line, DB_LOCK_READWRITE, DB_WAIT_NONE);
      GetSymbName_DB(Data, Line, sTemp);

      Strcpy_STR(sLabel, _("Mask line: "));
      Strcat_STR(sLabel, sTemp);
      ProgName_SYS(sLabel, 0);
      ProgUpdateL_SYS(iLines, iTotLines);


      // --- For new mask channels, init to 1 ---

      if (iNew)
      {
         GetChanVV_DB(Data, Line, XCh, VVm);
         iN = iLength_VV(VVm);
         SetLen_VV(VVm, iN);
         FillInt_VV(VVm, 1);
         PutChanVV_DB(Data, Line, MCh, VVm);
      }


      // --- Mask ---

      PolyMask_DU(Data, Line, XCh, YCh, MCh, Polygon, iDummy);


      // --- unlock the line ---

      UnLockSymb_DB(Data, Line);


      // --- Advance to Next Line ---

      Line = NextSelLine_DB(Data, Line);
      iLines++;
   }


   // --- Add maker ---

   EasyMakerSymb_DB(Data, MCh, _("Polyline mask"), "POLYMASK;");


   // --- Unlock the Symbol ---

   UnLockSymb_DB(Data, XCh);
   UnLockSymb_DB(Data, YCh);
   UnLockSymb_DB(Data, MCh);


   // --- Done ---

   Destroy_PLY(Polygon);
   Progress_SYS(0);

   
	// --- Release the Database ---

	if (iLoaded == 1)
	{
		UnLock_EDB(EData);
		LoadChan_EDB(EData, sMask);
	}
	else
		Destroy_DB(Data);
}
