//===========================================================================
// clang-format off
NAME          = "Calculate statistics of marked data"
#include <version.gxh>
	DESCRIPTION   = "

	Calculates statistics of the currently selected data in DBEDIT.

	INTERACTIVE PARAMETERS:

none

	BATCH PARAMETERS:

STAT.CHAN - input database channel
	STAT.FILE - output file containing statistics report

	"

	TRANSLATIONDOMAIN = "core"
	TRANSLATIONFRIENDLYPATH = "GX/Montaj Popups/Selected Data"

	// Revision History:
   // v2022.2.0: Added extra stats
	// v7.4:   Added support for exponent display format.
	// v7.2:   Added length-weighted mean values for From-To drillhole datasets.
	//         Display stats to number of decimals shown in the GDB.
	// v7.1.1: QA 16631 Added support in script mode for VA channel selection.
	// v7.0.1: QA 13014 Added error message if no channel is selected.
	// v5.1.8: Added current line/chan/fid selection to dialog
	//         Geographic channel values now converted to geographic values.
	// v5.1.5: Modified to allow defining the window elements in VA for statistics.
	// v5.1.3: Using FindChan_DB and iExistChan_DB
	//===========================================================================

	RESOURCE = "stat.gr"
#include "stat.grh"

	//===========================================================================

#include <all.gxh>
// clang-format on

#define FORMATREAL(A)                                        \
   if (iFormat == DB_CHAN_FORMAT_GEOGR)                      \
      FormatReal_STR(A, Str, FORMAT_GEOGRAPHIC, 20, 2);      \
   else if (iFormat == DB_CHAN_FORMAT_EXP)                   \
      FormatReal_STR(A, Str, FORMAT_EXP, 20, iChanDecimals); \
   else                                                      \
      FormatR2_STR(A, Str, 20, iChanDecimals)

// Output an integer statistic (significant digits only)
#define SETDIALOG_INT(STAT) \
   rVal = rGetInfo_ST(hST, STAT);   \
   FormatR_STR(rVal, Str, 20, 19);  \
   SetInfo_DGW(Diag, iDlg++, DGW_TEXT, Str)

// Output a real-valued static in the channel numeric format and decimals (Normal, Exponential, Geographic)
#define SETDIALOG_REAL(STAT) \
   rVal = rGetInfo_ST(hST, STAT);   \
   FORMATREAL(rVal); \
   SetInfo_DGW(Diag, iDlg++, DGW_TEXT, Str)

// Output a real-valued static in Normal format with specified number of decimals
#define SETDIALOG_REAL2(STAT, DEC) \
   rVal = rGetInfo_ST(hST, STAT);   \
   FormatR2_STR(rVal, Str, 20, DEC);  \
   SetInfo_DGW(Diag, iDlg++, DGW_TEXT, Str)


#define WRITELINE(TEXT, VAL) \
   Puts_WA(hWA, TEXT);   \
   iLen = iWidth - iStrlen_STR(TEXT); \
   if (iLen < 0) iLen = 0; \
   for(i=0; i<iLen; i++) Puts_WA(hWA, " ");  \
   Puts_WA(hWA, " ");   \
   Puts_WA(hWA, VAL);   \
   NewLine_WA(hWA)     

// Output an integer statistic (significant digits only) to a file
#define WRITELINE_INT(STAT, TEXT) \
   rVal = rGetInfo_ST(hST, STAT);   \
   FormatR_STR(rVal, sVal, 20, 19);  \
   WRITELINE(TEXT, sVal)

// Output a real-valued static in the channel numeric format and decimals (Normal, Exponential, Geographic)
// to a file
#define WRITELINE_REAL(STAT, TEXT) \
   rVal = rGetInfo_ST(hST, STAT);   \
   FORMATREAL(rVal); \
   WRITELINE(TEXT, Str)

// Output a real-valued static in Normal format with specified number of decimals to a file
#define WRITELINE_REAL2(STAT, TEXT, DEC) \
   rVal = rGetInfo_ST(hST, STAT);   \
   FormatR2_STR(rVal, sVal, 20, DEC); \
   WRITELINE(TEXT, sVal)

#define SET_ARRAY_CHANNEL_STRING(CHAN, TEXT) \
      if (iVAColumn > 1)   \
      {  \
         Strcpy_STR(Str, CHAN);  \
         Strcat_STR(Str, TEXT);  \
         FormatI_STR(iStart, sVal, 6);  \
         Strcat_STR(Str, sVal);   \
         Strcat_STR(Str, _(" to "));   \
         FormatI_STR(iEnd, sVal, 6);   \
         Strcat_STR(Str, sVal);  \
         Strcat_STR(Str, _n("]"));  \
      }  \
      else  \
      {  \
         Strcpy_STR(Str, CHAN);  \
      }  

#define WRITE_CHANNEL(CHAN) \
      SET_ARRAY_CHANNEL_STRING(CHAN, _(" [Columns: ")) \
      WRITELINE(_("Channel Name:"), Str);

#define SETDIALOG_CHANNEL(DIAG, CHAN) \
      SET_ARRAY_CHANNEL_STRING(CHAN, _n(" [")) \
      SetInfo_DGW(DIAG, iDlg++, DGW_TEXT, Str)

//===========================================================================
//                             GLOBAL VARIABLES
//===========================================================================

real rVal, rWeightedMean, rLength;
string(STR_DEFAULT) sTemp, sVal;
int iLen;

EDB EData;
DB Data;
string(STR_FILE) sDB;
string(STR_DB_SYMBOL) sChan, sLine;
string(STR_DEFAULT_SHORT) sFid;
DB_SYMB Chan;
DB_SYMB Line;

int i, i2, iNLines, iFormat, iDrillHole, iInteractive, iChanDecimals, iDec, iChanType;
int iVAColumn, iStart, iEnd, iStartOld, iEndOld, iSelection, iOK;
int iDlg, iWidth, iStrings;
real rNTot, rNValid, rNBlank, rNonBlank;

ST hST;
DGW Diag, Diag2;

WA hWA;
string(STR_FILE) sFile;
string(STR_DEFAULT_LONG) Str, sSkippedLines;

//===========================================================================
//                              CODE
//===========================================================================

{
   // --- Report statistics ---

   iDrillHole = 0;

   iWidth = iStrlen_STR(_("Number of Valid Items:"));

   // --- Create ST object to hold channel stats ---

   hST = CreateExact_ST();

   if (iInteractive_SYS())
   {
      // ---------------------------------------- INTERACTIVE MODE ---------------------------------------

      // --- Get the database ---

      EData = Current_EDB();


      // --- Get the current line/channel selection

      GetCurrentSelection_EDB(EData, sDB, sChan, sLine, sFid);


      // --- Channel must be selected ---

      if (iStrlen_STR(sChan) == 0)
         Abort_SYS(_("A channel must be selected/highlighted for mark statistics."));


      // --- Is the channel geographic? ---

      Data = Lock_EDB(EData);
      Chan = FindSymb_DB(Data, sChan, DB_SYMB_CHAN);
      LockSymb_DB(Data, Chan, DB_LOCK_READONLY, DB_WAIT_INFINITY);
      iFormat = iGetChanFormat_DB(Data, Chan);
      iChanDecimals = iGetChanDecimal_DB(Data, Chan);
      iDec = iChanDecimals;
      if (iDec < 3)
         iDec = 3;
      iVAColumn = iGetColVA_DB(Data, Chan);
      iChanType = iGetChanType_DB(Data, Chan);
      UnLockSymb_DB(Data, Chan);


      // --- Is this a drill project and does the user have a Target license? ---

      if (iExistChan_DB(Data, "DH_From") &&
          iExistChan_DB(Data, "DH_To") &&
          iVAColumn == 1 &&
          iFormat != DB_CHAN_FORMAT_GEOGR)
         iDrillHole = 1;


      // --- Prepare to do the work ---

      Progress_SYS(1);

      iSelection = 1;
      iStart = 0;
      iEnd = 0;

      Chan = FindSymb_DB(Data, sChan, DB_SYMB_CHAN);
      LockSymb_DB(Data, Chan, DB_LOCK_READWRITE, DB_WAIT_INFINITY);


      // --- Dialog for VA elements selection ---

      if (iVAColumn > 1)
      {
         GetVAWindows_DB(Data, Chan, iStartOld, iEndOld);

         do
         {
            iOK = 0;

            // --- VA Elements Selection ---

            Diag = Create_DGW("StatForm3");

            SetInfoSYS_DGW(Diag, _STATFORM3_0, DGW_LISTALIAS, "STAT_VA", "SELECTION");

            i = iRunDialogue_DGW(Diag);
            if (i == -1) Cancel_SYS();  // He hit cancel

            GetInfoSYS_DGW(Diag, _STATFORM3_0, DGW_LISTALIAS, "STAT_VA", "SELECTION");

            Destroy_DGW(Diag);

            iSelection = iGetInt_SYS("STAT_VA", "SELECTION");

            if (iSelection == 1)
            {  // --- All Elements

               iStart = 0;
               iEnd = iVAColumn - 1;
               iOK = 1;
            }
            else if (iSelection == 2)
            {  // --- Current Window Elements

               Diag = Create_DGW("StatForm4");

               FormatI_STR(iStartOld, Str, 20);
               SetInfo_DGW(Diag, _STATFORM4_0, DGW_TEXT, Str);
               FormatI_STR(iEndOld, Str, 20);
               SetInfo_DGW(Diag, _STATFORM4_1, DGW_TEXT, Str);

               i = iRunDialogue_DGW(Diag);
               if (i == -1) Cancel_SYS();  // He hit cancel

               Destroy_DGW(Diag);

               iStart = iStartOld;
               iEnd = iEndOld;
               if (i == 0) iOK = 1;
            }
            else if (iSelection == 3)
            {  // --- Define New Window Elements

               Diag = Create_DGW("StatForm5");

               SetInfoSYS_DGW(Diag, _STATFORM5_0, DGW_TEXT, "STAT_VA", "START_ELEM");
               SetInfoSYS_DGW(Diag, _STATFORM5_1, DGW_TEXT, "STAT_VA", "END_ELEM");

               i = iRunDialogue_DGW(Diag);
               if (i == -1) Cancel_SYS();  // He hit cancel
               if (i == 0) iOK = 1;

               GetInfoSYS_DGW(Diag, _STATFORM5_0, DGW_TEXT, "STAT_VA", "START_ELEM");
               GetInfoSYS_DGW(Diag, _STATFORM5_1, DGW_TEXT, "STAT_VA", "END_ELEM");

               Destroy_DGW(Diag);

               GetString_SYS("STAT_VA", "START_ELEM", sTemp);
               if (!iStrlen_STR(sTemp))
                  iStart = 0;
               else
                  iStart = iGetInt_SYS("STAT_VA", "START_ELEM");

               GetString_SYS("STAT_VA", "END_ELEM", sTemp);
               if (!iStrlen_STR(sTemp))
                  iEnd = iVAColumn - 1;
               else
                  iEnd = iGetInt_SYS("STAT_VA", "END_ELEM");

               if (iStart < 0) iStart = 0;
               if (iEnd > iVAColumn - 1) iEnd = iVAColumn - 1;
            }
         } while (iOK == 0);

         SetVAWindows_DB(Data, Chan, iStart, iEnd);
      }
      UnLockSymb_DB(Data, Chan);
      UnLock_EDB(EData);


      if (iDrillHole == 1)
      {
         SetString_SYS("DH_STATS", "LVM_CHANNEL", sChan);
         SetString_SYS("DH_STATS", "LVM_LINE", sLine);
         SetString_SYS("DH_STATS", "LVM_STARTFID", sFid);
         SetString_SYS("DH_STATS", "LVM_SKIPPED_LINES", "");

         iInteractive = iInteractive_SYS();
         SetInteractive_SYS(0);
         iRunGX_SYS("geogxnet.dll(Geosoft.GX.DrillHole.LengthWeightedMean;Calculate)");
         SetInteractive_SYS(iInteractive);

         rWeightedMean = rGetReal_SYS("DH_STATS", "LVM_DOUBLE");
         rLength = rGetReal_SYS("DH_STATS", "LVM_LENGTH");
         GetString_SYS("DH_STATS", "LVM_SKIPPED_LINES", sSkippedLines);

         EData = Current_EDB();
      }


      // --- Do the work ---

      Statistics_EDB(EData, hST);

      if (iVAColumn > 1)
      {
         Data = Lock_EDB(EData);
         LockSymb_DB(Data, Chan, DB_LOCK_READWRITE, DB_WAIT_INFINITY);
         SetVAWindows_DB(Data, Chan, iStartOld, iEndOld);
         UnLockSymb_DB(Data, Chan);
         UnLock_EDB(EData);
      }


      // --- Done ---

      Progress_SYS(0);

      // --- Special handling for string channels with no valid numeric items ---

      iStrings = 0;
      rNTot = rGetInfo_ST(hST, ST_TOTAL);
      rNValid = rGetInfo_ST(hST, ST_ITEMS);
      rNBlank = rGetInfo_ST(hST, ST_NEMPTYSTRINGS);
      if (iChanType < 0 && rNTot > 0.0)
         iStrings = 1;


      // --- Create the Dialogue ---

      if (iStrings == 1 && rNValid == 0.0)
      {
         Diag = Create_DGW("StatFormJustStrings");
         iDrillHole = 0;
      }
      else if (iDrillHole == 1)
      {
         if (iStrings == 1)
            Diag = Create_DGW("StatFormDHStrings");
         else
            Diag = Create_DGW("StatFormDH");
      }
      else
      {
         if (iStrings == 1)
            Diag = Create_DGW("StatFormStrings");
         else
            Diag = Create_DGW("StatForm");
      }


      // --- Set any Defaults ---

      if (iStrings && rNValid == 0.0)
      {
         iDlg = _STATFORMSTRINGS_0;
         SETDIALOG_CHANNEL(Diag, sChan);
         SetInfo_DGW(Diag, _STATFORMSTRINGS_1, DGW_TEXT, sLine);
         SetInfo_DGW(Diag, _STATFORMSTRINGS_2, DGW_TEXT, sFid);

         iDlg = _STATFORMSTRINGS_2 + 1;
         SETDIALOG_INT(ST_TOTAL);

         rNonBlank = rNTot - rNBlank;
         FormatR2_STR(rNonBlank, Str, 20, 0);
         SetInfo_DGW(Diag, _STATFORMSTRINGS_4, DGW_TEXT, Str);

         iDlg = _STATFORMSTRINGS_4 + 1;         
         SETDIALOG_INT(ST_NEMPTYSTRINGS);
         SETDIALOG_INT(ST_ITEMS);
      }
      else if (iDrillHole == 1)
      {
         iDlg = _STATFORMDH_0;
         SETDIALOG_CHANNEL(Diag, sChan);
         SetInfo_DGW(Diag, _STATFORMDH_1, DGW_TEXT, sLine);
         SetInfo_DGW(Diag, _STATFORMDH_2, DGW_TEXT, sFid);

         iDlg = _STATFORMDH_2 + 1;
         SETDIALOG_INT(ST_TOTAL);

         if (iStrings == 1)
         {
            SETDIALOG_INT(ST_NEMPTYSTRINGS);
            SETDIALOG_INT(ST_ITEMS);
         }
         else
         {
            SETDIALOG_INT(ST_ITEMS);
            SETDIALOG_INT(ST_DUMMIES);
         }

         SETDIALOG_REAL(ST_MIN);
         SETDIALOG_REAL(ST_MAX);
         SETDIALOG_REAL(ST_MEAN);

         FormatR2_STR(rWeightedMean, Str, 20, iChanDecimals);
         if (iStrcmp_STR(Str, "*", STR_CASE_TOLERANT) != 0 && iStrlen_STR(sSkippedLines) > 0)
            Strcat_STR(Str, "*");
         SetInfo_DGW(Diag, iDlg++, DGW_TEXT, Str);

         FormatR2_STR(rLength, Str, 20, 2);
         if (iStrcmp_STR(Str, "*", STR_CASE_TOLERANT) != 0 && iStrlen_STR(sSkippedLines) > 0)
            Strcat_STR(Str, "*");
         SetInfo_DGW(Diag, iDlg++, DGW_TEXT, Str);

         if (iFormat == DB_CHAN_FORMAT_GEOGR)
         {
            SETDIALOG_REAL(ST_STDDEV);
         }
         else
         {
            SETDIALOG_REAL2(ST_STDDEV, iDec);
         }

         SETDIALOG_REAL2(ST_STDERR, iDec);
         SETDIALOG_REAL2(ST_VARIANCE, iDec);
         SETDIALOG_REAL2(ST_SKEW, iDec);
         SETDIALOG_REAL2(ST_KURTOSIS, iDec);

         SETDIALOG_REAL(ST_SUM);
      }
      else
      {
         iDlg = _STATFORM_0;
         SETDIALOG_CHANNEL(Diag, sChan);
         SetInfo_DGW(Diag, _STATFORM_1, DGW_TEXT, sLine);
         SetInfo_DGW(Diag, _STATFORM_2, DGW_TEXT, sFid);

         iDlg = _STATFORM_2 + 1;
         SETDIALOG_INT(ST_TOTAL);
         if (iStrings == 1)
         {
            SETDIALOG_INT(ST_NEMPTYSTRINGS);
            SETDIALOG_INT(ST_ITEMS);
         }
         else
         {
            SETDIALOG_INT(ST_ITEMS);
            SETDIALOG_INT(ST_DUMMIES);
         }

         SETDIALOG_REAL(ST_MIN);
         SETDIALOG_REAL(ST_MAX);
         SETDIALOG_REAL(ST_RANGE);
         SETDIALOG_REAL(ST_MEAN);
         SETDIALOG_REAL(ST_MEDIAN);
         SETDIALOG_REAL(ST_SIMPLE_MODE);

         if (iFormat == DB_CHAN_FORMAT_GEOGR)
         {
            SETDIALOG_REAL(ST_STDDEV);
         }
         else
         {
            SETDIALOG_REAL2(ST_STDDEV, iDec);
         }

         SETDIALOG_REAL2(ST_STDERR, iDec);
         SETDIALOG_REAL2(ST_VARIANCE, iDec);
         SETDIALOG_REAL2(ST_SKEW, iDec);
         SETDIALOG_REAL2(ST_KURTOSIS, iDec);

         SETDIALOG_REAL(ST_SUM);
      }

      // --- Run the Dialogue ---

      do
      {
         i = iRunDialogue_DGW(Diag);

         if (i == 1)
         {
            // --- File save dialog ---

            Diag2 = Create_DGW("StatForm2");

            SetInfoSYS_DGW(Diag2, _STATFORM2_0, DGW_FILEPATH, "STAT", "FILE");

            i2 = iRunDialogue_DGW(Diag2);

            if (i2 == 0)
            {
               GetInfoSYS_DGW(Diag2, _STATFORM2_0, DGW_FILEPATH, "STAT", "FILE");

               GetString_SYS("STAT", "FILE", sFile);

               hWA = Create_WA(sFile, 0);

               Puts_WA(hWA, _n("Statistics Information"));
               NewLine_WA(hWA);
               NewLine_WA(hWA);

               WRITELINE(_("Database:"), sDB);
               WRITE_CHANNEL(sChan)
               WRITELINE(_("Line:"), sLine);
               WRITELINE(_("Fiducial range:"), sFid);
               NewLine_WA(hWA);

               WRITELINE_INT(ST_TOTAL, _("Number of Items:"));

               if (iStrings == 1 && rNValid == 0.0)
               {
                  FormatR2_STR(rNonBlank, Str, 20, 0);
                  WRITELINE(_("Number of Non-Blank Items:"), Str);               
                  WRITELINE_INT(ST_NEMPTYSTRINGS, _("Number of Blank Items:"));
               }
               else
               {
                  if (iStrings == 1)
                  {
                     WRITELINE_INT(ST_NEMPTYSTRINGS, _("Number of Blank Items:"));
                     WRITELINE_INT(ST_ITEMS, _("Number of Numeric Items:"));
                  }
                  else
                  {
                     WRITELINE_INT(ST_ITEMS, _("Number of Valid Items:"));
                     WRITELINE_INT(ST_DUMMIES, _("Number of Dummies:"));
                  }
                  NewLine_WA(hWA);

                  WRITELINE_REAL(ST_MIN, _("Minimum value:"));
                  WRITELINE_REAL(ST_MAX, _("Maximum value:"));
                  WRITELINE_REAL(ST_RANGE, _("Range:"));
                  NewLine_WA(hWA);
               
                  WRITELINE_REAL(ST_MEAN, _("Mean value:"));

                  if (iDrillHole == 1)
                  {
                     FormatR2_STR(rWeightedMean, Str, 20, iChanDecimals);
                     WRITELINE(_("Length Weighted Mean:"), Str);
                     FormatR2_STR(rLength, Str, 20, iChanDecimals);
                     WRITELINE(_("Total length:"), Str);
                  }
                  WRITELINE_REAL(ST_MEDIAN, _("Median value:"));
                  WRITELINE_REAL(ST_SIMPLE_MODE, _("Mode value:"));
                  WRITELINE_REAL(ST_SUM, _("Sum of values:"));
                  NewLine_WA(hWA);

                  if (iFormat == DB_CHAN_FORMAT_GEOGR)
                  {
                     WRITELINE_REAL(ST_STDDEV, _("Standard Deviation:"));
                  }
                  else
                  {
                     WRITELINE_REAL2(ST_STDDEV, _("Standard Deviation:"), iDec);
                  }

                  WRITELINE_REAL2(ST_STDERR, _("Standard Error:"), iDec);
                  WRITELINE_REAL2(ST_VARIANCE, _("Variance:"), iDec);
                  WRITELINE_REAL2(ST_SKEW, _("Skew:"), iDec);
                  WRITELINE_REAL2(ST_KURTOSIS, _("Kurtosis:"), iDec);
               }
               NewLine_WA(hWA);
               
               Destroy_WA(hWA);
            }

            // --- Destroy the Dialogue ---

            Destroy_DGW(Diag2);
         }

      } while (i == 1);

      // --- Destroy the Dialogue ---

      Destroy_DGW(Diag);


      // --- Save the channel name for scripting ---

      SetString_SYS("STAT", "CHAN", sChan);
   }
   else
   {
      // ---------------------------------------- SCRIPT MODE ---------------------------------------

      // --- Get the Current Database ---

      EData = Current_EDB();


      // --- Open the database ---

      Data = Lock_EDB(EData);


      // --- Get database name ---

      GetName_DB(Data, DB_NAME_FILE, sDB);


      // --- Get channel name ---

      GetString_SYS("STAT", "CHAN", sChan);
      if (iStrlen_STR(sChan) <= 0)
         Abort_SYS(_("You must specify the channel name"));


      // --- Create channel handle ---

      if (!iExistChan_DB(Data, sChan))
         Chan = CreateSymb_DB(Data, sChan, DB_SYMB_CHAN, DB_OWN_SHARED, DB_CATEGORY_CHAN_DOUBLE);
      Chan = FindChan_DB(Data, sChan);


      LockSymb_DB(Data, Chan, DB_LOCK_READWRITE, DB_WAIT_INFINITY);

      iChanDecimals = iGetChanDecimal_DB(Data, Chan);
      iDec = iChanDecimals;
      if (iDec < 3)
         iDec = 3;

      // --- Get VA channel handling

      iSelection = iGetInt_SYS("STAT_VA", "SELECTION");
      iVAColumn = 1;
      if (iSelection >= 1 && iSelection <= 3)
      {
         iVAColumn = iGetColVA_DB(Data, Chan);

         if (iSelection == 1)
         {  // --- All Elements

            iStart = 0;
            iEnd = iVAColumn - 1;
         }
         else
         {  // --- Define New Window Elements

            GetString_SYS("STAT_VA", "START_ELEM", sTemp);
            if (!iStrlen_STR(sTemp))
               iStart = 0;
            else
               iStart = iGetInt_SYS("STAT_VA", "START_ELEM");

            GetString_SYS("STAT_VA", "END_ELEM", sTemp);
            if (!iStrlen_STR(sTemp))
               iEnd = iVAColumn - 1;
            else
               iEnd = iGetInt_SYS("STAT_VA", "END_ELEM");

            if (iStart < 0) iStart = 0;
            if (iEnd > iVAColumn - 1) iEnd = iVAColumn - 1;
         }
         SetVAWindows_DB(Data, Chan, iStart, iEnd);
      }
      UnLockSymb_DB(Data, Chan);


      // --- Turn on the progress bar ---

      Progress_SYS(1);


      // --- Load data channel to ST ---

      i = 1;
      Line = FirstSelLine_DB(Data);
      iNLines = iCountSelLines_DB(Data);
      LockSymb_DB(Data, Chan, DB_LOCK_READONLY, DB_WAIT_INFINITY);
      while (iIsLineValid_DB(Data, Line))
      {
         ProgName_SYS(_("Calculating channel statistics"), 0);
         ProgUpdateL_SYS(i, iNLines);
         Stat_DU(Data, Line, Chan, hST);
         Line = NextSelLine_DB(Data, Line);
         i++;
      }
      UnLockSymb_DB(Data, Chan);


      // --- Get name of file to store stats ---

      GetString_SYS("STAT", "FILE", sFile);


      // --- Open handle to write stats ---

      if (iStrlen_STR(sFile) <= 0)
         Strcpy_STR(sFile, _n("stdout"));
      hWA = Create_WA(sFile, 0);


      // --- Get data from ST and display it ---

      Puts_WA(hWA, _("CHANNEL STATISTICS REPORT"));
      NewLine_WA(hWA);
      NewLine_WA(hWA);

      WRITELINE(_("Database:"), sDB);
      WRITE_CHANNEL(sChan)
      NewLine_WA(hWA);

      WRITELINE_INT(ST_TOTAL, _("Number of Items:"));
      WRITELINE_INT(ST_ITEMS, _("Number of Valid Items:"));
      WRITELINE_INT(ST_DUMMIES, _("Number of Dummies:"));
      NewLine_WA(hWA);

      WRITELINE_REAL(ST_MIN, _("Minimum value:"));
      WRITELINE_REAL(ST_MAX, _("Maximum value:"));
      WRITELINE_REAL(ST_RANGE, _("Range: "));
      NewLine_WA(hWA);

      WRITELINE_REAL(ST_MEAN, _("Mean value:"));
      WRITELINE_REAL(ST_MEDIAN, _("Median value:"));
      WRITELINE_REAL(ST_SIMPLE_MODE, _("Mode value:"));
      WRITELINE_REAL(ST_SUM, _("Sum of values:"));
      NewLine_WA(hWA);

      if (iFormat == DB_CHAN_FORMAT_GEOGR)
      {
         WRITELINE_REAL(ST_STDDEV, _("Standard Deviation:"));
      }
      else
      {
         WRITELINE_REAL2(ST_STDDEV, _("Standard Deviation:"), iDec);
      }

      WRITELINE_REAL2(ST_STDERR, _("Standard Error:"), iDec);
      WRITELINE_REAL2(ST_VARIANCE, _("Variance:"), iDec);
      WRITELINE_REAL2(ST_SKEW, _("Skew:"), iDec);
      WRITELINE_REAL2(ST_KURTOSIS, _("Kurtosis:"), iDec);
      NewLine_WA(hWA);



      // --- Done ---

      Destroy_WA(hWA);
      Progress_SYS(0);

      // --- Release the Database ---

      UnLock_EDB(EData);
   }
}
