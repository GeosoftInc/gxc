//===========================================================================
// clang-format off
NAME          = "Level a channel to  cross lines"
#include <version.gxh>

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/LevTieLine/Simple Levelling"

DESCRIPTION   = "
  Applies a full leveling correction to a channel by moving the unleveled
  channel to match defined level points from cross-line intersections
  defined in a different channel.

   FULLLEV.IN      - Input channel
          .OUT     - Output levelled channel
          .ERROR   - Cross-line error channel
          .TYPE    - \"Line\" to process lines.
                     \"Tie\" to process tie lines.
                     \"Selected\"  to process selected lines.
"
// Revision History:
// v7.1.0: Automatically switch current database from intersection database to flight database.
//===========================================================================
//                                 RESOURCES
//===========================================================================

RESOURCE = "fulllev.gr"
#include "fulllev.grh"

//===========================================================================
//                                 INCLUDES
//===========================================================================

#include <all.gxh>
   // clang-format on

   //===========================================================================
   //                             GLOBAL VARIABLES
   //===========================================================================

   string(STR_DB_SYMBOL) sInCh,
   sConCh, sOutCh;                // Channel Name
string(STR_DEFAULT_SHORT) sType;  // TYPE
int iLines, iTotLines;

string(STR_DEFAULT_SHORT) sTemp;  // temporary number formating string
string(STR_DEFAULT) sLabel;
string(STR_FILE) sDB;

EDB EData;
DB Data;
DB_SYMB InCh, ConCh, OutCh;  // Channel Handles
DB_SYMB Line;
DGW Diag;
LST List;          // list handle
DB_SELECT Select;  // saved selection
int i;             // utility int

//===========================================================================
//                              CODE
//===========================================================================

{
   // --- Get the Database ---

   EData = Current_EDB();
   Data = Lock_EDB(EData);


   // --- See if this is an intersection database and make the original database current. ---

   GetRegSymbSetting_DB(Data, NULLSYMB, "Levelling.Database", sDB, sizeof(sDB));
   if (iStrlen_STR(sDB) > 0)
   {
      UnLock_EDB(EData);

      EData = Load_EDB(sDB);
      Data = Lock_EDB(EData);
   }


   // --- Are we running interactively ? ---

   if (iInteractive_SYS())
   {
      // --- Create the Dialogue ---

      Diag = Create_DGW("FullLevForm");

      // --- Set up input and output lists ---

      List = GetList_DGW(Diag, _FULLLEVFORM_0);
      SymbLST_DB(Data, List, DB_SYMB_CHAN);
      Sort_LST(List, 0, 0);
      List = GetList_DGW(Diag, _FULLLEVFORM_1);
      SymbLST_DB(Data, List, DB_SYMB_CHAN);
      Sort_LST(List, 0, 0);
      List = GetList_DGW(Diag, _FULLLEVFORM_2);
      SymbLST_DB(Data, List, DB_SYMB_CHAN);
      Sort_LST(List, 0, 0);


      // --- Set any Defaults ---

      SetInfoSYS_DGW(Diag, _FULLLEVFORM_0, DGW_TEXT, "FullLev", "IN");
      SetInfoSYS_DGW(Diag, _FULLLEVFORM_1, DGW_TEXT, "FullLev", "ERROR");
      SetInfoSYS_DGW(Diag, _FULLLEVFORM_2, DGW_TEXT, "FullLev", "OUT");
      SetInfoSYS_DGW(Diag, _FULLLEVFORM_3, DGW_LISTALIAS, "FullLev", "TYPE");

      // --- Run the Dialogue ---

      i = iRunDialogue_DGW(Diag);
      if (i != 0) Cancel_SYS();  // He hit cancel


      // --- Get the Strings ---

      GetInfoSYS_DGW(Diag, _FULLLEVFORM_0, DGW_TEXT, "FullLev", "IN");
      GetInfoSYS_DGW(Diag, _FULLLEVFORM_1, DGW_TEXT, "FullLev", "ERROR");
      GetInfoSYS_DGW(Diag, _FULLLEVFORM_2, DGW_TEXT, "FullLev", "OUT");
      GetInfoSYS_DGW(Diag, _FULLLEVFORM_3, DGW_LISTALIAS, "FullLev", "TYPE");

      // --- Destroy the Dialogue ---

      Destroy_DGW(Diag);
   }

   // --- Get Parameters ---

   GetString_SYS("FullLev", "IN", sInCh);
   GetString_SYS("FullLev", "ERROR", sConCh);
   GetString_SYS("FullLev", "OUT", sOutCh);
   GetString_SYS("FullLev", "TYPE", sType);


   // --- Do the Input & Level Channels Exist ? ---

   if (!iExistSymb_DB(Data, sInCh, DB_SYMB_CHAN))
      Abort_SYS(_("Input Z channel does not exist."));
   InCh = FindSymb_DB(Data, sInCh, DB_SYMB_CHAN);

   if (!iExistSymb_DB(Data, sConCh, DB_SYMB_CHAN))
      Abort_SYS(_("Input Level Control channel does not exist."));
   ConCh = FindSymb_DB(Data, sConCh, DB_SYMB_CHAN);


   // --- Create and output channel if it does not exist ---

   if (!iExistSymb_DB(Data, sOutCh, DB_SYMB_CHAN))
      DupSymbNoLock_DB(Data, InCh, sOutCh);
   OutCh = FindSymb_DB(Data, sOutCh, DB_SYMB_CHAN);


   // --- work out the selection ---

   if (!iCharComp_STR(sType, "S"))
   {
      Select = GetSelect_DB(Data);
      Select_DB(Data, "", DB_LINE_SELECT_EXCLUDE);

      if (iCharComp_STR(sType, "L"))
         Select_DB(Data, "L", DB_LINE_SELECT_INCLUDE);
      else if (iCharComp_STR(sType, "T"))
         Select_DB(Data, "T", DB_LINE_SELECT_INCLUDE);
      else
         Abort_SYS(_("TYPE must be \"Line\", \"Tie\" or \"Selected\""));
   }


   // --- Prepare to do the work ---

   iLines = 0;
   iTotLines = iCountSelLines_DB(Data);
   Progress_SYS(1);
   ProgName_SYS(_("Leveling"), 1);


   // --- Lock the channel symbols ---

   LockSymb_DB(Data, ConCh, DB_LOCK_READONLY, DB_WAIT_NONE);
   if (InCh != OutCh) LockSymb_DB(Data, InCh, DB_LOCK_READONLY, DB_WAIT_NONE);
   LockSymb_DB(Data, OutCh, DB_LOCK_READWRITE, DB_WAIT_NONE);

   // --- Go through all selected Lines ---

   Line = FirstSelLine_DB(Data);

   while (iIsLineValid_DB(Data, Line))
   {
      // --- Update the Progress Bar ---

      LockSymb_DB(Data, Line, DB_LOCK_READWRITE, DB_WAIT_NONE);
      GetSymbName_DB(Data, Line, sTemp);
      UnLockSymb_DB(Data, Line);
      Strcpy_STR(sLabel, _("Level line: "));
      Strcat_STR(sLabel, sTemp);
      ProgName_SYS(sLabel, 0);
      ProgUpdateL_SYS(iLines, iTotLines);


      // --- Apply the Level Correction ---

      Move_DU(Data, Line, InCh, ConCh, OutCh, DU_MOVE_PLUS);


      // --- Advance to Next Line ---

      Line = NextSelLine_DB(Data, Line);
      iLines++;
   }

   // --- Add maker ---

   EasyMakerSymb_DB(Data, OutCh, _("Level a channel"), "FULLLEV;");

   // --- Unlock the channel symbol ---

   UnLockSymb_DB(Data, ConCh);
   if (InCh != OutCh) UnLockSymb_DB(Data, InCh);
   UnLockSymb_DB(Data, OutCh);


   // --- return selections if not FULListical levelling ---

   if (!iCharComp_STR(sType, "S"))
      SetSelect_DB(Data, Select);


   // --- Done ---

   Progress_SYS(0);

   // --- Release the Database ---

   UnLock_EDB(EData);
}
