//===========================================================================
// clang-format off
NAME          = "PolyGen"
#include <version.gxh>

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/Map Tools"

DESCRIPTION   = "
Create a polygon area group from a line interpretation group.

Interactive only.

"

// Revision History
// v6.3.0: Group name buffers were not large enough.
//===========================================================================

RESOURCE = "polygen.gr"
#include "polygen.grh"

//===========================================================================

#include <all.gxh>
   // clang-format on

   //===========================================================================
   //                             GLOBAL VARIABLES
   //===========================================================================

   DGW hDGW;  // Main Dialogue handle
EMAP eMAP;
MAP hMAP;
MVIEW hMV;
LST hLST;
VV hColVV;
VV hPatVV;

string(STR_VIEW) sView;
string(STR_GROUP) sGroup;
string(STR_DEFAULT_LONG) sTemp, sFont, sViewGrp, sLineGrp, sAliasFlag;

int i, ii, iMaxUnits, iMaxCol, iFill, iLegend, iLines;
real rBoxSize, rBoxSep, rColWidth, rTextSize, rMM, rPatSize;
real rX, rY, rX0, rY0, rMinX, rMaxX, rMinY, rMaxY, rYt;

//===========================================================================
//                            GROUP UTIL CODE
//===========================================================================

{
   // --- Initialize all parameters ---

   if (!iInteractive_SYS())
      Abort_SYS(_("This GX will only run interactively."));

   eMAP = Current_EMAP();
   hMAP = Lock_EMAP(eMAP);


   i = 0;
   while (i == 0)
   {
      // --- Create the Dialogue ---

      hDGW = Create_DGW("POLYGEN");
      hLST = GetList_DGW(hDGW, _POLYGEN_0);
      GroupList_MAP(hMAP, hLST);
      Sort_LST(hLST, 0, 0);

      SetInfoSYS_DGW(hDGW, _POLYGEN_0, DGW_TEXT, "POLYGEN", "GROUP");
      SetInfoSYS_DGW(hDGW, _POLYGEN_1, DGW_LISTALIAS, "POLYGEN", "FILL");
      SetInfoSYS_DGW(hDGW, _POLYGEN_2, DGW_TEXT, "POLYGEN", "MAX_UNITS");
      SetInfoSYS_DGW(hDGW, _POLYGEN_3, DGW_TEXT, "POLYGEN", "LEGEND");

      while (i == 0)
      {
         i = iRunDialogue_DGW(hDGW);
         if (i == -1) Cancel_SYS();

         GetInfoSYS_DGW(hDGW, _POLYGEN_0, DGW_TEXT, "POLYGEN", "GROUP");
         GetInfoSYS_DGW(hDGW, _POLYGEN_1, DGW_LISTALIAS, "POLYGEN", "FILL");
         GetInfoSYS_DGW(hDGW, _POLYGEN_2, DGW_TEXT, "POLYGEN", "MAX_UNITS");
         GetInfoSYS_DGW(hDGW, _POLYGEN_3, DGW_TEXT, "POLYGEN", "LEGEND");

         GetInfo_DGW(hDGW, _POLYGEN_3, DGW_LISTALIAS, sAliasFlag);

         // --- get parameters ---

         iMaxUnits = iGetInt_SYS("POLYGEN", "MAX_UNITS");
         if (iMaxUnits <= 0)
         {
            DisplayMessage_SYS(_("Invalid maximum units"), _("Maximum units must be at least 1."));
            i = 0;
            continue;
         }

         GetString_SYS("POLYGEN", "GROUP", sViewGrp);
         Strcpy_STR(sLineGrp, sViewGrp);
         iTokens_STR(sLineGrp, "\\");
         GetToken_STR(sView, sLineGrp, 0);
         GetToken_STR(sGroup, sLineGrp, 1);
      }

      Destroy_SYS(hDGW);


      // --- get other parameters ---

      GetString_SYS("POLYGEN", "FILL", sTemp);
      if (iCharComp_STR(sTemp, "P"))
         iFill = 1;
      else if (iCharComp_STR(sTemp, "B"))
         iFill = 2;
      else
         iFill = 0;

      iLegend = iGetYesNo_SYS("POLYGEN", "LEGEND");
      if (iLegend == 0)
         iLegend = !iStrcmp_STR(sAliasFlag, "1", STR_CASE_TOLERANT);


      // --- if plotting a legend, get legend parameters

      if (iLegend)
      {
         hDGW = Create_DGW("LEGEND");

         SetInfoSYS_DGW(hDGW, _POLYGEN_0, DGW_TEXT, "POLYGEN", "BOX_SIZE");
         SetInfoSYS_DGW(hDGW, _POLYGEN_1, DGW_TEXT, "POLYGEN", "BOX_SEPARATION");
         SetInfoSYS_DGW(hDGW, _POLYGEN_2, DGW_TEXT, "POLYGEN", "TEXT_SIZE");
         SetInfoSYS_DGW(hDGW, _POLYGEN_3, DGW_TEXT, "POLYGEN", "TEXT_LINES");
         SetInfoSYS_DGW(hDGW, _POLYGEN_4, DGW_TEXT, "POLYGEN", "MAX_UNITS_PER_COLUMN");
         SetInfoSYS_DGW(hDGW, _POLYGEN_5, DGW_TEXT, "POLYGEN", "COLUMN_SEPARATION");

         i = iRunDialogue_DGW(hDGW);
         if (i == -1) Cancel_SYS();

         GetInfoSYS_DGW(hDGW, _POLYGEN_0, DGW_TEXT, "POLYGEN", "BOX_SIZE");
         GetInfoSYS_DGW(hDGW, _POLYGEN_1, DGW_TEXT, "POLYGEN", "BOX_SEPARATION");
         GetInfoSYS_DGW(hDGW, _POLYGEN_2, DGW_TEXT, "POLYGEN", "TEXT_SIZE");
         GetInfoSYS_DGW(hDGW, _POLYGEN_3, DGW_TEXT, "POLYGEN", "TEXT_LINES");
         GetInfoSYS_DGW(hDGW, _POLYGEN_4, DGW_TEXT, "POLYGEN", "MAX_UNITS_PER_COLUMN");
         GetInfoSYS_DGW(hDGW, _POLYGEN_5, DGW_TEXT, "POLYGEN", "COLUMN_SEPARATION");

         Destroy_SYS(hDGW);


         // --- get legend parameters ---

         rBoxSize = rGetReal_SYS("POLYGEN", "BOX_SIZE");
         rBoxSep = rGetReal_SYS("POLYGEN", "BOX_SEPARATION");
         rTextSize = rGetReal_SYS("POLYGEN", "TEXT_SIZE");
         iLines = iGetInt_SYS("POLYGEN", "TEXT_LINES");
         rColWidth = 0.0;
         if (iExistInt_SYS("POLYGEN", "MAX_UNITS_PER_COLUMN"))
         {
            iMaxCol = iGetInt_SYS("POLYGEN", "MAX_UNITS_PER_COLUMN");
            if ((iMaxCol < 1) || (iMaxCol > iMaxUnits))
               iMaxCol = iMaxUnits;
            else
               rColWidth = rGetReal_SYS("POLYGEN", "COLUMN_SEPARATION");
         }
         else
            iMaxCol = iMaxUnits;
      }
      else
      {
         rBoxSize = 10.0;
         rBoxSep = rBoxSize / 2.0;
         rTextSize = rBoxSize / 4.0;
         rColWidth = rBoxSize * 8.0;
      }
   }


   // --- initialize colours/patterns ---

   hColVV = Create_VV(INT, iMaxUnits);
   hPatVV = Create_VV(INT, iMaxUnits);

   for (i = 0; i < iMaxUnits; i++)
   {
      // --- colour ---

      if (iFill == 1)
         SetInt_VV(hColVV, i, C_BLACK);
      else
         switch (iMod_MATH(i, 14))
         {
         case 0:
            SetInt_VV(hColVV, i, C_RED);
            break;
         case 1:
            SetInt_VV(hColVV, i, C_GREEN);
            break;
         case 2:
            SetInt_VV(hColVV, i, C_BLUE);
            break;
         case 3:
            SetInt_VV(hColVV, i, C_CYAN);
            break;
         case 4:
            SetInt_VV(hColVV, i, C_MAGENTA);
            break;
         case 5:
            SetInt_VV(hColVV, i, C_YELLOW);
            break;
         case 6:
            SetInt_VV(hColVV, i, C_GREY);
            break;
         case 7:
            SetInt_VV(hColVV, i, C_LT_RED);
            break;
         case 8:
            SetInt_VV(hColVV, i, C_LT_GREEN);
            break;
         case 9:
            SetInt_VV(hColVV, i, C_LT_BLUE);
            break;
         case 10:
            SetInt_VV(hColVV, i, C_LT_CYAN);
            break;
         case 11:
            SetInt_VV(hColVV, i, C_LT_MAGENTA);
            break;
         case 12:
            SetInt_VV(hColVV, i, C_LT_YELLOW);
            break;
         case 13:
            SetInt_VV(hColVV, i, C_LT_GREY);
            break;
         }

      // --- pattern ---

      if (iFill == 0)
         SetInt_VV(hPatVV, i, 0);
      else
      {
         if (i <= 7)
            SetInt_VV(hPatVV, i, 100 + iMod_MATH(i * 3, 21));
         else
            SetInt_VV(hPatVV, i, 100 + iMod_MATH((i - 6) * 3, 21));
      }
   }


   // --- default pattern size ---

   hMV = Create_MVIEW(hMAP, sView, MVIEW_WRITEOLD);
   rMM = rScaleMM_MVIEW(hMV);
   rBoxSize *= rMM;
   rBoxSep *= rMM;
   rTextSize *= rMM;
   rColWidth *= rMM;
   rPatSize = rBoxSize / 4.0;


   // --- draw group ---

   Progress_SYS(1);
   GenAreas_MVU(hMV, sGroup, hColVV, hPatVV, rPatSize);
   Progress_SYS(0);


   // --- start group ---

   StartGroup_MVIEW(hMV, sGroup, MVIEW_GROUP_APPEND);


   // --- draw a legend ---

   if (iLegend)
   {
      // --- get default legend start location ---

      rMinX = rMinY = rMaxX = rMaxY = 0.0;
      Extent_MVIEW(hMV, MVIEW_EXTENT_CLIP, MVIEW_EXTENT_UNIT_VIEW,
                   rMinX, rMinY, rMaxX, rMaxY);

      rX0 = rMaxX + rBoxSize * 2.0;
      rY0 = (rMinY + rMaxY) / 2.0 +
            ((real)iMaxCol * rBoxSize + (real)(iMaxCol - 1) * rBoxSep) / 2.0 - rBoxSize;


      // --- Set the Default Font ---

      if (iGlobal_SYS("MONTAJ.DEFAULT_MAP_FONT", sFont) == 1)
         Strcpy_STR(sFont, _n("Arial"));
      TextFont_MVIEW(hMV, sFont, FALSE, MVIEW_FONT_WEIGHT_NORMAL, FALSE);


      // --- plot legend

      LineColor_MVIEW(hMV, C_BLACK);
      LineThick_MVIEW(hMV, 0.2);
      LineStyle_MVIEW(hMV, 0, 0.0);
      TextSize_MVIEW(hMV, rTextSize);
      TextRef_MVIEW(hMV, TEXT_REF_BOTTOM_LEFT);

      rX = rX0;
      rY = rY0;
      for (i = 0; i < iMaxUnits; i++)
      {
         // --- box ---

         FillColor_MVIEW(hMV, iGetInt_VV(hColVV, i));
         if (iFill != 0)
         {
            PatNumber_MVIEW(hMV, iGetInt_VV(hPatVV, i));
            PatSize_MVIEW(hMV, rPatSize);
         }
         Rectangle_MVIEW(hMV, rX, rY, rX + rBoxSize, rY + rBoxSize);


         // --- text ---

         rYt = rY + rBoxSize / 2.0 +
               ((real)iLines * rTextSize + (real)(iLines - 1) * rTextSize * 0.75) / 2.0 - rTextSize;
         for (ii = 0; ii < iLines; ii++, rYt -= rTextSize * 1.75)
            Text_MVIEW(hMV, _("Description..."), rX + rBoxSize * 1.3, rYt);


         // --- move ---

         if (iMod_MATH(i + 1, iMaxCol) == 0)
         {
            rX += rColWidth;
            rY = rY0;
         }
         else
            rY -= rBoxSize + rBoxSep;
      }
   }

   // --- Add maker object ---

   SetString_SYS("POLYREGEN", "GROUP", sGroup);
   Maker_MVIEW(hMV, 0, 1, "polyregen", MAKER_GX, _("Re-generate polygons"), "POLYREGEN;");

   // --- This comment to show we use the PolyReGen GX : iRunGX_SYS("polyregen.gx") ---

   // --- clean up ---

   Destroy_MVIEW(hMV);
   UnLock_EMAP(eMAP);
   ActivateGroup_EMAP(eMAP, sViewGrp);

   Destroy_SYS(hColVV);
   Destroy_SYS(hPatVV);
}
